
c:/Users/alext/gitRepositories/IoT-Breathalyzer/target/3.3.0/photon/IoT-Breathalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003820  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3840  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a3844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004a8  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a38b4  080a38b4  000238b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a38dc  080a38dc  000238dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a4d8d  00000000  00000000  000238e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000f5f6  00000000  00000000  000c866d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001445a  00000000  00000000  000d7c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ce0  00000000  00000000  000ec0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003e48  00000000  00000000  000edd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000288ca  00000000  00000000  000f1be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002a557  00000000  00000000  0011a4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b40e3  00000000  00000000  00144a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000049fc  00000000  00000000  001f8aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fa09 	bl	80a3448 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fa11 	bl	80a3464 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3844 	.word	0x080a3844
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000515 	.word	0x20000515
 80a005c:	20000515 	.word	0x20000515

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 ffdf 	bl	80a2024 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a3814 	.word	0x080a3814
 80a0084:	080a3838 	.word	0x080a3838

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f89d 	bl	80a01cc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 bf7d 	b.w	80a1f94 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f001 bd99 	b.w	80a1bd0 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f001 bd9f 	b.w	80a1be0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
// Variable for the next time the sensor will be read
unsigned long int nextSensorReadTime;
unsigned long int nextLedFlashTime;
unsigned long int stateChangeTime;

void setup() {
 80a00b4:	b538      	push	{r3, r4, r5, lr}
  // Initialize the Serial communication
  Serial.begin(9600);
 80a00b6:	f002 f8b7 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f002 f899 	bl	80a21f4 <_ZN9USBSerial5beginEl>

  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a00c2:	2103      	movs	r1, #3
  strip.begin();

  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);

  deviceMode = WARMING_UP;
 80a00c4:	2500      	movs	r5, #0
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a00c6:	4608      	mov	r0, r1
  lcd.begin(16, 2);
 80a00c8:	4c11      	ldr	r4, [pc, #68]	; (80a0110 <setup+0x5c>)
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a00ca:	f002 fac5 	bl	80a2658 <pinMode>
  strip.begin();
 80a00ce:	4811      	ldr	r0, [pc, #68]	; (80a0114 <setup+0x60>)
 80a00d0:	f000 f982 	bl	80a03d8 <_ZN17Adafruit_NeoPixel5beginEv>
  lcd.begin(16, 2);
 80a00d4:	2202      	movs	r2, #2
 80a00d6:	2110      	movs	r1, #16
 80a00d8:	4620      	mov	r0, r4
 80a00da:	2300      	movs	r3, #0
 80a00dc:	f001 fb45 	bl	80a176a <_ZN7rgb_lcd5beginEhhh>
  deviceMode = WARMING_UP;
 80a00e0:	4b0d      	ldr	r3, [pc, #52]	; (80a0118 <setup+0x64>)
 80a00e2:	601d      	str	r5, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00e4:	f001 fbee 	bl	80a18c4 <HAL_Timer_Get_Milli_Seconds>
  stateChangeTime = millis() + WARMING_UP_MODE_TIME;
 80a00e8:	4b0c      	ldr	r3, [pc, #48]	; (80a011c <setup+0x68>)
 80a00ea:	f500 409c 	add.w	r0, r0, #19968	; 0x4e00
 80a00ee:	3020      	adds	r0, #32
  
  lcd.setRGB(colorR, colorG, colorB);
 80a00f0:	462a      	mov	r2, r5
  stateChangeTime = millis() + WARMING_UP_MODE_TIME;
 80a00f2:	6018      	str	r0, [r3, #0]
  lcd.setRGB(colorR, colorG, colorB);
 80a00f4:	21ff      	movs	r1, #255	; 0xff
 80a00f6:	462b      	mov	r3, r5
 80a00f8:	4620      	mov	r0, r4
 80a00fa:	f001 fb22 	bl	80a1742 <_ZN7rgb_lcd6setRGBEhhh>
  
  // Print a message to the LCD.
  lcd.print("BAC");
 80a00fe:	4620      	mov	r0, r4
 80a0100:	4907      	ldr	r1, [pc, #28]	; (80a0120 <setup+0x6c>)
 80a0102:	f001 fdcd 	bl	80a1ca0 <_ZN5Print5printEPKc>

  delay(100);
}
 80a0106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(100);
 80a010a:	2064      	movs	r0, #100	; 0x64
 80a010c:	f001 bf02 	b.w	80a1f14 <delay>
 80a0110:	20000078 	.word	0x20000078
 80a0114:	2000009c 	.word	0x2000009c
 80a0118:	20000070 	.word	0x20000070
 80a011c:	20000098 	.word	0x20000098
 80a0120:	080a35c4 	.word	0x080a35c4
 80a0124:	00000000 	.word	0x00000000

080a0128 <_Z13readMQ3Sensorf>:
  strip.show();

  delay(10);
}

float readMQ3Sensor(float rawValue) {
 80a0128:	b538      	push	{r3, r4, r5, lr}
 80a012a:	4605      	mov	r5, r0
  float voltage = (float)rawValue * 5.0 / 1024.0;
 80a012c:	f002 fcd8 	bl	80a2ae0 <__aeabi_f2d>
 80a0130:	2200      	movs	r2, #0
 80a0132:	4b1f      	ldr	r3, [pc, #124]	; (80a01b0 <_Z13readMQ3Sensorf+0x88>)
 80a0134:	f002 fd2c 	bl	80a2b90 <__aeabi_dmul>
 80a0138:	4b1e      	ldr	r3, [pc, #120]	; (80a01b4 <_Z13readMQ3Sensorf+0x8c>)
 80a013a:	2200      	movs	r2, #0
 80a013c:	f002 fd28 	bl	80a2b90 <__aeabi_dmul>
 80a0140:	f003 f81e 	bl	80a3180 <__aeabi_d2f>
 80a0144:	4604      	mov	r4, r0

  // Debug
  Serial.print("MQ-2 Sensor Data:\n");
 80a0146:	f002 f86f 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a014a:	491b      	ldr	r1, [pc, #108]	; (80a01b8 <_Z13readMQ3Sensorf+0x90>)
 80a014c:	f001 fda8 	bl	80a1ca0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value: ");
 80a0150:	f002 f86a 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a0154:	4919      	ldr	r1, [pc, #100]	; (80a01bc <_Z13readMQ3Sensorf+0x94>)
 80a0156:	f001 fda3 	bl	80a1ca0 <_ZN5Print5printEPKc>
  Serial.println(rawValue);
 80a015a:	f002 f865 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a015e:	2202      	movs	r2, #2
 80a0160:	4629      	mov	r1, r5
 80a0162:	f001 feb6 	bl	80a1ed2 <_ZN5Print7printlnEfi>
  Serial.print("Voltage: ");
 80a0166:	f002 f85f 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a016a:	4915      	ldr	r1, [pc, #84]	; (80a01c0 <_Z13readMQ3Sensorf+0x98>)
 80a016c:	f001 fd98 	bl	80a1ca0 <_ZN5Print5printEPKc>
  Serial.print(voltage);
 80a0170:	f002 f85a 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a0174:	2202      	movs	r2, #2
 80a0176:	4621      	mov	r1, r4
 80a0178:	f001 fe8e 	bl	80a1e98 <_ZN5Print5printEfi>
  Serial.println(" V");
 80a017c:	f002 f854 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a0180:	4910      	ldr	r1, [pc, #64]	; (80a01c4 <_Z13readMQ3Sensorf+0x9c>)
 80a0182:	f001 fda0 	bl	80a1cc6 <_ZN5Print7printlnEPKc>
  // Debug end

  return (voltage / 1.1) * 1000.0;
 80a0186:	4620      	mov	r0, r4
 80a0188:	f002 fcaa 	bl	80a2ae0 <__aeabi_f2d>
 80a018c:	a306      	add	r3, pc, #24	; (adr r3, 80a01a8 <_Z13readMQ3Sensorf+0x80>)
 80a018e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0192:	f002 fe27 	bl	80a2de4 <__aeabi_ddiv>
 80a0196:	2200      	movs	r2, #0
 80a0198:	4b0b      	ldr	r3, [pc, #44]	; (80a01c8 <_Z13readMQ3Sensorf+0xa0>)
 80a019a:	f002 fcf9 	bl	80a2b90 <__aeabi_dmul>
 80a019e:	f002 ffef 	bl	80a3180 <__aeabi_d2f>
  // float BAC = 0.1896*ratio*ratio - 8.6178*ratio/10 + 1.0792;   //BAC in mg/L
  // Serial.print("BAC = ");
  // Serial.println(BAC*0.0001);  //convert to g/dL
  // Serial.print("\n\n");
  // return BAC - 1;
}
 80a01a2:	bd38      	pop	{r3, r4, r5, pc}
 80a01a4:	f3af 8000 	nop.w
 80a01a8:	9999999a 	.word	0x9999999a
 80a01ac:	3ff19999 	.word	0x3ff19999
 80a01b0:	40140000 	.word	0x40140000
 80a01b4:	3f500000 	.word	0x3f500000
 80a01b8:	080a35c8 	.word	0x080a35c8
 80a01bc:	080a35db 	.word	0x080a35db
 80a01c0:	080a35e7 	.word	0x080a35e7
 80a01c4:	080a35f1 	.word	0x080a35f1
 80a01c8:	408f4000 	.word	0x408f4000

080a01cc <loop>:
void loop() {
 80a01cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a01d0:	f001 fb78 	bl	80a18c4 <HAL_Timer_Get_Milli_Seconds>
  if(currentTime > nextSensorReadTime) {
 80a01d4:	4d5d      	ldr	r5, [pc, #372]	; (80a034c <loop+0x180>)
 80a01d6:	4604      	mov	r4, r0
 80a01d8:	682b      	ldr	r3, [r5, #0]
 80a01da:	4f5d      	ldr	r7, [pc, #372]	; (80a0350 <loop+0x184>)
 80a01dc:	4283      	cmp	r3, r0
 80a01de:	d21b      	bcs.n	80a0218 <loop+0x4c>
    ppm = readMQ3Sensor(analogRead(mq2Pin));
 80a01e0:	200a      	movs	r0, #10
 80a01e2:	f002 fa76 	bl	80a26d2 <analogRead>
 80a01e6:	f003 f8d5 	bl	80a3394 <__aeabi_i2f>
 80a01ea:	f7ff ff9d 	bl	80a0128 <_Z13readMQ3Sensorf>
    nextSensorReadTime += SENSOR_READ_TIME_DIFFERENCE;
 80a01ee:	682b      	ldr	r3, [r5, #0]
    ppm = readMQ3Sensor(analogRead(mq2Pin));
 80a01f0:	6038      	str	r0, [r7, #0]
    nextSensorReadTime += SENSOR_READ_TIME_DIFFERENCE;
 80a01f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80a01f6:	602b      	str	r3, [r5, #0]
    Serial.print("PPM: ");
 80a01f8:	f002 f816 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a01fc:	4955      	ldr	r1, [pc, #340]	; (80a0354 <loop+0x188>)
 80a01fe:	f001 fd4f 	bl	80a1ca0 <_ZN5Print5printEPKc>
    Serial.print(ppm);
 80a0202:	f002 f811 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a0206:	6839      	ldr	r1, [r7, #0]
 80a0208:	2202      	movs	r2, #2
 80a020a:	f001 fe45 	bl	80a1e98 <_ZN5Print5printEfi>
    Serial.println(" ppm");
 80a020e:	f002 f80b 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a0212:	4951      	ldr	r1, [pc, #324]	; (80a0358 <loop+0x18c>)
 80a0214:	f001 fd57 	bl	80a1cc6 <_ZN5Print7printlnEPKc>
  int buttonReading = digitalRead(BUTTON_PIN);
 80a0218:	2003      	movs	r0, #3
 80a021a:	f002 fa47 	bl	80a26ac <digitalRead>
  if(deviceMode != READING && buttonReading == HIGH && lastButtonReading == LOW) {
 80a021e:	4e4f      	ldr	r6, [pc, #316]	; (80a035c <loop+0x190>)
  int buttonReading = digitalRead(BUTTON_PIN);
 80a0220:	4605      	mov	r5, r0
  if(deviceMode != READING && buttonReading == HIGH && lastButtonReading == LOW) {
 80a0222:	6833      	ldr	r3, [r6, #0]
 80a0224:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80a0360 <loop+0x194>
 80a0228:	2b02      	cmp	r3, #2
 80a022a:	d012      	beq.n	80a0252 <loop+0x86>
 80a022c:	2801      	cmp	r0, #1
 80a022e:	d110      	bne.n	80a0252 <loop+0x86>
 80a0230:	f8d8 3000 	ldr.w	r3, [r8]
 80a0234:	b96b      	cbnz	r3, 80a0252 <loop+0x86>
    deviceMode = READING;
 80a0236:	2302      	movs	r3, #2
 80a0238:	6033      	str	r3, [r6, #0]
 80a023a:	f001 fb43 	bl	80a18c4 <HAL_Timer_Get_Milli_Seconds>
    stateChangeTime = millis() + READING_MODE_TIME;
 80a023e:	4a49      	ldr	r2, [pc, #292]	; (80a0364 <loop+0x198>)
 80a0240:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a0244:	3010      	adds	r0, #16
 80a0246:	6010      	str	r0, [r2, #0]
    Serial.print("Button press");
 80a0248:	f001 ffee 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a024c:	4946      	ldr	r1, [pc, #280]	; (80a0368 <loop+0x19c>)
 80a024e:	f001 fd27 	bl	80a1ca0 <_ZN5Print5printEPKc>
  lcd.setCursor(0, 1);
 80a0252:	2201      	movs	r2, #1
 80a0254:	2100      	movs	r1, #0
 80a0256:	4845      	ldr	r0, [pc, #276]	; (80a036c <loop+0x1a0>)
  lastButtonReading = buttonReading;
 80a0258:	f8c8 5000 	str.w	r5, [r8]
  lcd.setCursor(0, 1);
 80a025c:	f001 fa3c 	bl	80a16d8 <_ZN7rgb_lcd9setCursorEhh>
  lcd.print(ppm);
 80a0260:	6839      	ldr	r1, [r7, #0]
 80a0262:	2202      	movs	r2, #2
 80a0264:	4841      	ldr	r0, [pc, #260]	; (80a036c <loop+0x1a0>)
 80a0266:	f001 fe17 	bl	80a1e98 <_ZN5Print5printEfi>
  int PixelColorRed = strip.Color(0, intensity, 0);
 80a026a:	2200      	movs	r2, #0
 80a026c:	4d40      	ldr	r5, [pc, #256]	; (80a0370 <loop+0x1a4>)
 80a026e:	4610      	mov	r0, r2
 80a0270:	7829      	ldrb	r1, [r5, #0]
 80a0272:	f001 f9d6 	bl	80a1622 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0276:	2200      	movs	r2, #0
  int PixelColorRed = strip.Color(0, intensity, 0);
 80a0278:	4607      	mov	r7, r0
  int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a027a:	4611      	mov	r1, r2
 80a027c:	7828      	ldrb	r0, [r5, #0]
 80a027e:	f001 f9d0 	bl	80a1622 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0282:	7829      	ldrb	r1, [r5, #0]
 80a0284:	2200      	movs	r2, #0
  int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0286:	4681      	mov	r9, r0
  int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0288:	4608      	mov	r0, r1
 80a028a:	f001 f9ca 	bl	80a1622 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  int PixelColorOff = strip.Color(  0,  0,  0);
 80a028e:	2200      	movs	r2, #0
  int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0290:	4680      	mov	r8, r0
  int PixelColorOff = strip.Color(  0,  0,  0);
 80a0292:	4611      	mov	r1, r2
 80a0294:	4610      	mov	r0, r2
 80a0296:	f001 f9c4 	bl	80a1622 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a029a:	6833      	ldr	r3, [r6, #0]
 80a029c:	4605      	mov	r5, r0
  switch (deviceMode) {
 80a029e:	2b05      	cmp	r3, #5
 80a02a0:	d851      	bhi.n	80a0346 <loop+0x17a>
 80a02a2:	e8df f003 	tbb	[pc, r3]
 80a02a6:	4603      	.short	0x4603
 80a02a8:	46264e2a 	.word	0x46264e2a
      if(currentTime > stateChangeTime) {
 80a02ac:	4b2d      	ldr	r3, [pc, #180]	; (80a0364 <loop+0x198>)
      if(currentTime > nextLedFlashTime) {
 80a02ae:	4931      	ldr	r1, [pc, #196]	; (80a0374 <loop+0x1a8>)
      if(currentTime > stateChangeTime) {
 80a02b0:	681b      	ldr	r3, [r3, #0]
      if(currentTime > nextLedFlashTime) {
 80a02b2:	680a      	ldr	r2, [r1, #0]
      if(currentTime > stateChangeTime) {
 80a02b4:	42a3      	cmp	r3, r4
        deviceMode = IDLE;
 80a02b6:	bf3c      	itt	cc
 80a02b8:	2301      	movcc	r3, #1
 80a02ba:	6033      	strcc	r3, [r6, #0]
      if(currentTime > nextLedFlashTime) {
 80a02bc:	42a2      	cmp	r2, r4
 80a02be:	4e2e      	ldr	r6, [pc, #184]	; (80a0378 <loop+0x1ac>)
 80a02c0:	d207      	bcs.n	80a02d2 <loop+0x106>
        ledFlashOn = !ledFlashOn;
 80a02c2:	6833      	ldr	r3, [r6, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a02c4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
        ledFlashOn = !ledFlashOn;
 80a02c8:	fab3 f383 	clz	r3, r3
 80a02cc:	095b      	lsrs	r3, r3, #5
 80a02ce:	6033      	str	r3, [r6, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a02d0:	600a      	str	r2, [r1, #0]
      Serial.print(ledFlashOn);
 80a02d2:	f001 ffa9 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a02d6:	6834      	ldr	r4, [r6, #0]
 80a02d8:	4680      	mov	r8, r0
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a02da:	2c00      	cmp	r4, #0
 80a02dc:	da0b      	bge.n	80a02f6 <loop+0x12a>
            t = print('-');
 80a02de:	212d      	movs	r1, #45	; 0x2d
 80a02e0:	f001 fce2 	bl	80a1ca8 <_ZN5Print5printEc>
            val = -n;
 80a02e4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a02e6:	220a      	movs	r2, #10
 80a02e8:	4640      	mov	r0, r8
 80a02ea:	f001 fcf6 	bl	80a1cda <_ZN5Print11printNumberEmh>
      if (ledFlashOn) {
 80a02ee:	6831      	ldr	r1, [r6, #0]
 80a02f0:	b1d9      	cbz	r1, 80a032a <loop+0x15e>
      strip.setPixelColor(0, PixelColorRed);
 80a02f2:	463a      	mov	r2, r7
 80a02f4:	e017      	b.n	80a0326 <loop+0x15a>
            val = n;
 80a02f6:	4621      	mov	r1, r4
 80a02f8:	e7f5      	b.n	80a02e6 <loop+0x11a>
      if(currentTime > stateChangeTime) {
 80a02fa:	4b1a      	ldr	r3, [pc, #104]	; (80a0364 <loop+0x198>)
      if(currentTime > nextLedFlashTime) {
 80a02fc:	481d      	ldr	r0, [pc, #116]	; (80a0374 <loop+0x1a8>)
      if(currentTime > stateChangeTime) {
 80a02fe:	681b      	ldr	r3, [r3, #0]
      if(currentTime > nextLedFlashTime) {
 80a0300:	6801      	ldr	r1, [r0, #0]
      if(currentTime > stateChangeTime) {
 80a0302:	42a3      	cmp	r3, r4
        deviceMode = LOW_READING;
 80a0304:	bf3c      	itt	cc
 80a0306:	2303      	movcc	r3, #3
 80a0308:	6033      	strcc	r3, [r6, #0]
      if(currentTime > nextLedFlashTime) {
 80a030a:	42a1      	cmp	r1, r4
 80a030c:	4a1a      	ldr	r2, [pc, #104]	; (80a0378 <loop+0x1ac>)
 80a030e:	d207      	bcs.n	80a0320 <loop+0x154>
        ledFlashOn = !ledFlashOn;
 80a0310:	6813      	ldr	r3, [r2, #0]
        nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a0312:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
        ledFlashOn = !ledFlashOn;
 80a0316:	fab3 f383 	clz	r3, r3
 80a031a:	095b      	lsrs	r3, r3, #5
 80a031c:	6013      	str	r3, [r2, #0]
        nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a031e:	6001      	str	r1, [r0, #0]
      if (ledFlashOn) {
 80a0320:	6811      	ldr	r1, [r2, #0]
 80a0322:	b111      	cbz	r1, 80a032a <loop+0x15e>
        strip.setPixelColor(0, PixelColorYellow);
 80a0324:	4642      	mov	r2, r8
      strip.setPixelColor(0, PixelColorOff);
 80a0326:	2100      	movs	r1, #0
 80a0328:	e000      	b.n	80a032c <loop+0x160>
        strip.setPixelColor(0, PixelColorOff);
 80a032a:	462a      	mov	r2, r5
      strip.setPixelColor(0, PixelColorOff);
 80a032c:	4813      	ldr	r0, [pc, #76]	; (80a037c <loop+0x1b0>)
 80a032e:	f001 f935 	bl	80a159c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  strip.show();
 80a0332:	4812      	ldr	r0, [pc, #72]	; (80a037c <loop+0x1b0>)
 80a0334:	f000 f886 	bl	80a0444 <_ZN17Adafruit_NeoPixel4showEv>
}
 80a0338:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  delay(10);
 80a033c:	200a      	movs	r0, #10
 80a033e:	f001 bde9 	b.w	80a1f14 <delay>
      strip.setPixelColor(0, PixelColorGreen);
 80a0342:	464a      	mov	r2, r9
 80a0344:	e7ef      	b.n	80a0326 <loop+0x15a>
      strip.setPixelColor(0, PixelColorOff);
 80a0346:	4602      	mov	r2, r0
 80a0348:	e7ed      	b.n	80a0326 <loop+0x15a>
 80a034a:	bf00      	nop
 80a034c:	20000090 	.word	0x20000090
 80a0350:	20000094 	.word	0x20000094
 80a0354:	080a35f4 	.word	0x080a35f4
 80a0358:	080a35fa 	.word	0x080a35fa
 80a035c:	20000070 	.word	0x20000070
 80a0360:	20000074 	.word	0x20000074
 80a0364:	20000098 	.word	0x20000098
 80a0368:	080a35ff 	.word	0x080a35ff
 80a036c:	20000078 	.word	0x20000078
 80a0370:	20000000 	.word	0x20000000
 80a0374:	2000008c 	.word	0x2000008c
 80a0378:	20000088 	.word	0x20000088
 80a037c:	2000009c 	.word	0x2000009c

080a0380 <_GLOBAL__sub_I_lcd>:
}
 80a0380:	b510      	push	{r4, lr}
rgb_lcd lcd;
 80a0382:	4805      	ldr	r0, [pc, #20]	; (80a0398 <_GLOBAL__sub_I_lcd+0x18>)
 80a0384:	f001 f996 	bl	80a16b4 <_ZN7rgb_lcdC1Ev>
}
 80a0388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a038c:	2302      	movs	r3, #2
 80a038e:	2204      	movs	r2, #4
 80a0390:	2101      	movs	r1, #1
 80a0392:	4802      	ldr	r0, [pc, #8]	; (80a039c <_GLOBAL__sub_I_lcd+0x1c>)
 80a0394:	f000 b845 	b.w	80a0422 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0398:	20000078 	.word	0x20000078
 80a039c:	2000009c 	.word	0x2000009c

080a03a0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a0:	b538      	push	{r3, r4, r5, lr}
 80a03a2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a4:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a8:	b108      	cbz	r0, 80a03ae <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a03aa:	f001 fc19 	bl	80a1be0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a03ae:	79a3      	ldrb	r3, [r4, #6]
 80a03b0:	2b06      	cmp	r3, #6
 80a03b2:	bf0c      	ite	eq
 80a03b4:	2004      	moveq	r0, #4
 80a03b6:	2003      	movne	r0, #3
 80a03b8:	4368      	muls	r0, r5
 80a03ba:	b280      	uxth	r0, r0
 80a03bc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a03be:	f001 fc07 	bl	80a1bd0 <malloc>
 80a03c2:	60e0      	str	r0, [r4, #12]
 80a03c4:	b128      	cbz	r0, 80a03d2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a03c6:	2100      	movs	r1, #0
 80a03c8:	88a2      	ldrh	r2, [r4, #4]
 80a03ca:	f003 f84b 	bl	80a3464 <memset>
    numLEDs = n;
 80a03ce:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a03d0:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a03d2:	80a0      	strh	r0, [r4, #4]
 80a03d4:	8060      	strh	r0, [r4, #2]
}
 80a03d6:	e7fb      	b.n	80a03d0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a03d8 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a03d8:	b510      	push	{r4, lr}
 80a03da:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a03dc:	2101      	movs	r1, #1
 80a03de:	79c0      	ldrb	r0, [r0, #7]
 80a03e0:	f002 f93a 	bl	80a2658 <pinMode>
  digitalWrite(pin, LOW);
 80a03e4:	2100      	movs	r1, #0
 80a03e6:	79e0      	ldrb	r0, [r4, #7]
 80a03e8:	f002 f947 	bl	80a267a <digitalWrite>
  begun = true;
 80a03ec:	2301      	movs	r3, #1
 80a03ee:	7023      	strb	r3, [r4, #0]
}
 80a03f0:	bd10      	pop	{r4, pc}

080a03f2 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03f2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03f4:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03f6:	4605      	mov	r5, r0
 80a03f8:	460c      	mov	r4, r1
    if (begun) {
 80a03fa:	b11b      	cbz	r3, 80a0404 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03fc:	2100      	movs	r1, #0
 80a03fe:	79c0      	ldrb	r0, [r0, #7]
 80a0400:	f002 f92a 	bl	80a2658 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0404:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0406:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0408:	b153      	cbz	r3, 80a0420 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a040a:	b2a4      	uxth	r4, r4
 80a040c:	4620      	mov	r0, r4
 80a040e:	2101      	movs	r1, #1
 80a0410:	f002 f922 	bl	80a2658 <pinMode>
        digitalWrite(p, LOW);
 80a0414:	4620      	mov	r0, r4
    }
}
 80a0416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a041a:	2100      	movs	r1, #0
 80a041c:	f002 b92d 	b.w	80a267a <digitalWrite>
}
 80a0420:	bd38      	pop	{r3, r4, r5, pc}

080a0422 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0422:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0424:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0426:	4604      	mov	r4, r0
 80a0428:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a042a:	7183      	strb	r3, [r0, #6]
 80a042c:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0430:	7005      	strb	r5, [r0, #0]
 80a0432:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0434:	f7ff ffb4 	bl	80a03a0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0438:	4620      	mov	r0, r4
 80a043a:	4631      	mov	r1, r6
 80a043c:	f7ff ffd9 	bl	80a03f2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0440:	4620      	mov	r0, r4
 80a0442:	bd70      	pop	{r4, r5, r6, pc}

080a0444 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0444:	68c3      	ldr	r3, [r0, #12]
 80a0446:	2b00      	cmp	r3, #0
 80a0448:	f000 8441 	beq.w	80a0cce <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a044e:	7983      	ldrb	r3, [r0, #6]
 80a0450:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0452:	3b02      	subs	r3, #2
 80a0454:	b2db      	uxtb	r3, r3
 80a0456:	2b04      	cmp	r3, #4
 80a0458:	bf8c      	ite	hi
 80a045a:	2532      	movhi	r5, #50	; 0x32
 80a045c:	4a28      	ldrls	r2, [pc, #160]	; (80a0500 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a045e:	b087      	sub	sp, #28
 80a0460:	bf98      	it	ls
 80a0462:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0466:	f001 fa25 	bl	80a18b4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a046a:	6923      	ldr	r3, [r4, #16]
 80a046c:	1ac0      	subs	r0, r0, r3
 80a046e:	42a8      	cmp	r0, r5
 80a0470:	d3f9      	bcc.n	80a0466 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0472:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0474:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0476:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0478:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a047c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0480:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0482:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0484:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0486:	f000 826e 	beq.w	80a0966 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a048a:	2d07      	cmp	r5, #7
 80a048c:	f000 826b 	beq.w	80a0966 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0490:	2d06      	cmp	r5, #6
 80a0492:	f000 841d 	beq.w	80a0cd0 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0496:	2d05      	cmp	r5, #5
 80a0498:	f000 83a1 	beq.w	80a0bde <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a049c:	2d08      	cmp	r5, #8
 80a049e:	f000 839e 	beq.w	80a0bde <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a04a2:	2d00      	cmp	r5, #0
 80a04a4:	f040 854f 	bne.w	80a0f46 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a04a8:	2b00      	cmp	r3, #0
 80a04aa:	f000 8392 	beq.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a04ae:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a04b2:	4a14      	ldr	r2, [pc, #80]	; (80a0504 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a04b4:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a04b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a04ba:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a04bc:	3b03      	subs	r3, #3
 80a04be:	b29b      	uxth	r3, r3
 80a04c0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a04c4:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a04c8:	b2db      	uxtb	r3, r3
 80a04ca:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a04ce:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a04d2:	b2db      	uxtb	r3, r3
 80a04d4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a04d8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a04dc:	b2db      	uxtb	r3, r3
 80a04de:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a04e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a04e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04ea:	021b      	lsls	r3, r3, #8
 80a04ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a04f0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a04f4:	4303      	orrs	r3, r0
 80a04f6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04f8:	f88d 5005 	strb.w	r5, [sp, #5]
 80a04fc:	e11b      	b.n	80a0736 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a04fe:	bf00      	nop
 80a0500:	080a360c 	.word	0x080a360c
 80a0504:	200000b0 	.word	0x200000b0
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a0508:	4600      	mov	r0, r0
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0610:	79e3      	ldrb	r3, [r4, #7]
 80a0612:	6810      	ldr	r0, [r2, #0]
 80a0614:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0618:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a061c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0620:	88b8      	ldrh	r0, [r7, #4]
 80a0622:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0624:	4600      	mov	r0, r0
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a071e:	9b04      	ldr	r3, [sp, #16]
 80a0720:	085b      	lsrs	r3, r3, #1
 80a0722:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0724:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0728:	3301      	adds	r3, #1
 80a072a:	b2db      	uxtb	r3, r3
 80a072c:	2b17      	cmp	r3, #23
 80a072e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0732:	f200 8723 	bhi.w	80a157c <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a0736:	79e3      	ldrb	r3, [r4, #7]
 80a0738:	6810      	ldr	r0, [r2, #0]
 80a073a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a073e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0746:	88b8      	ldrh	r0, [r7, #4]
 80a0748:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a074a:	9803      	ldr	r0, [sp, #12]
 80a074c:	9b04      	ldr	r3, [sp, #16]
 80a074e:	4218      	tst	r0, r3
 80a0750:	f47f aeda 	bne.w	80a0508 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a0754:	4600      	mov	r0, r0
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a07a6:	79e3      	ldrb	r3, [r4, #7]
 80a07a8:	6810      	ldr	r0, [r2, #0]
 80a07aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a07ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a07b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a07b6:	88b8      	ldrh	r0, [r7, #4]
 80a07b8:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a07ba:	4600      	mov	r0, r0
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	e6db      	b.n	80a071e <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0966:	2b00      	cmp	r3, #0
 80a0968:	f000 8133 	beq.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a096c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0970:	f04f 0c00 	mov.w	ip, #0
 80a0974:	4a12      	ldr	r2, [pc, #72]	; (80a09c0 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0976:	4608      	mov	r0, r1
 80a0978:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a097a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a097e:	3103      	adds	r1, #3
 80a0980:	3b03      	subs	r3, #3
 80a0982:	b29b      	uxth	r3, r3
 80a0984:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0988:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a098c:	b2db      	uxtb	r3, r3
 80a098e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0992:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0996:	b2db      	uxtb	r3, r3
 80a0998:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a099c:	7883      	ldrb	r3, [r0, #2]
 80a099e:	b2db      	uxtb	r3, r3
 80a09a0:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09a4:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a09a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a09ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a09b0:	021b      	lsls	r3, r3, #8
 80a09b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a09b6:	4303      	orrs	r3, r0
 80a09b8:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09ba:	f88d c005 	strb.w	ip, [sp, #5]
 80a09be:	e07f      	b.n	80a0ac0 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a09c0:	200000b0 	.word	0x200000b0
          asm volatile(
 80a09c4:	4600      	mov	r0, r0
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0a5e:	79e3      	ldrb	r3, [r4, #7]
 80a0a60:	6810      	ldr	r0, [r2, #0]
 80a0a62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a66:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0a6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a6e:	88b0      	ldrh	r0, [r6, #4]
 80a0a70:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0a72:	4600      	mov	r0, r0
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
        mask >>= 1;
 80a0aa8:	9b04      	ldr	r3, [sp, #16]
 80a0aaa:	085b      	lsrs	r3, r3, #1
 80a0aac:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0aae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ab2:	3301      	adds	r3, #1
 80a0ab4:	b2db      	uxtb	r3, r3
 80a0ab6:	2b17      	cmp	r3, #23
 80a0ab8:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0abc:	f200 8083 	bhi.w	80a0bc6 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a0ac0:	79e3      	ldrb	r3, [r4, #7]
 80a0ac2:	6810      	ldr	r0, [r2, #0]
 80a0ac4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ac8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0acc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ad0:	88b0      	ldrh	r0, [r6, #4]
 80a0ad2:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0ad4:	9803      	ldr	r0, [sp, #12]
 80a0ad6:	9b04      	ldr	r3, [sp, #16]
 80a0ad8:	4218      	tst	r0, r3
 80a0ada:	f47f af73 	bne.w	80a09c4 <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a0ade:	4600      	mov	r0, r0
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0b06:	79e3      	ldrb	r3, [r4, #7]
 80a0b08:	6810      	ldr	r0, [r2, #0]
 80a0b0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b0e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0b12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b16:	88b0      	ldrh	r0, [r6, #4]
 80a0b18:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0b1a:	4600      	mov	r0, r0
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	e770      	b.n	80a0aa8 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bc6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0bca:	b29b      	uxth	r3, r3
 80a0bcc:	2b00      	cmp	r3, #0
 80a0bce:	f47f aed2 	bne.w	80a0976 <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a0bd2:	b662      	cpsie	i
 80a0bd4:	f000 fe6e 	bl	80a18b4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0bd8:	6120      	str	r0, [r4, #16]
}
 80a0bda:	b007      	add	sp, #28
 80a0bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bde:	2b00      	cmp	r3, #0
 80a0be0:	d0f7      	beq.n	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0be2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0be6:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a0bea:	4b54      	ldr	r3, [pc, #336]	; (80a0d3c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a0bec:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a0bee:	4b54      	ldr	r3, [pc, #336]	; (80a0d40 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a0bf0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0bf2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a0bf6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0bf8:	3a03      	subs	r2, #3
 80a0bfa:	b292      	uxth	r2, r2
 80a0bfc:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0c00:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a0c04:	b2d2      	uxtb	r2, r2
 80a0c06:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0c0a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a0c0e:	b2d2      	uxtb	r2, r2
 80a0c10:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0c14:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a0c18:	b2d2      	uxtb	r2, r2
 80a0c1a:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0c1e:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a0c22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a0c26:	0212      	lsls	r2, r2, #8
 80a0c28:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a0c2c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a0c30:	4332      	orrs	r2, r6
 80a0c32:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c34:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a0c38:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a0c3a:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c40:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0c44:	88b6      	ldrh	r6, [r6, #4]
 80a0c46:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a0c4a:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c4c:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c4e:	9e03      	ldr	r6, [sp, #12]
 80a0c50:	9a04      	ldr	r2, [sp, #16]
 80a0c52:	4216      	tst	r6, r2
 80a0c54:	d025      	beq.n	80a0ca2 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c56:	685a      	ldr	r2, [r3, #4]
 80a0c58:	9e05      	ldr	r6, [sp, #20]
 80a0c5a:	1b92      	subs	r2, r2, r6
 80a0c5c:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c5e:	d9fa      	bls.n	80a0c56 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a0c60:	79e2      	ldrb	r2, [r4, #7]
 80a0c62:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c66:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0c6a:	88b6      	ldrh	r6, [r6, #4]
 80a0c6c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0c70:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c72:	685a      	ldr	r2, [r3, #4]
 80a0c74:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c76:	685a      	ldr	r2, [r3, #4]
 80a0c78:	9e05      	ldr	r6, [sp, #20]
 80a0c7a:	1b92      	subs	r2, r2, r6
 80a0c7c:	2a07      	cmp	r2, #7
 80a0c7e:	d9fa      	bls.n	80a0c76 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a0c80:	9a04      	ldr	r2, [sp, #16]
 80a0c82:	0852      	lsrs	r2, r2, #1
 80a0c84:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0c8a:	3201      	adds	r2, #1
 80a0c8c:	b2d2      	uxtb	r2, r2
 80a0c8e:	2a17      	cmp	r2, #23
 80a0c90:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0c94:	d9d0      	bls.n	80a0c38 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0c96:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0c9a:	b292      	uxth	r2, r2
 80a0c9c:	2a00      	cmp	r2, #0
 80a0c9e:	d1a7      	bne.n	80a0bf0 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a0ca0:	e797      	b.n	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0ca2:	685a      	ldr	r2, [r3, #4]
 80a0ca4:	9e05      	ldr	r6, [sp, #20]
 80a0ca6:	1b92      	subs	r2, r2, r6
 80a0ca8:	2a18      	cmp	r2, #24
 80a0caa:	d9fa      	bls.n	80a0ca2 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a0cac:	79e2      	ldrb	r2, [r4, #7]
 80a0cae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0cb2:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0cb6:	88b6      	ldrh	r6, [r6, #4]
 80a0cb8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0cbc:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0cbe:	685a      	ldr	r2, [r3, #4]
 80a0cc0:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0cc2:	685a      	ldr	r2, [r3, #4]
 80a0cc4:	9e05      	ldr	r6, [sp, #20]
 80a0cc6:	1b92      	subs	r2, r2, r6
 80a0cc8:	2a45      	cmp	r2, #69	; 0x45
 80a0cca:	d9fa      	bls.n	80a0cc2 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a0ccc:	e7d8      	b.n	80a0c80 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a0cce:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0cd0:	2b00      	cmp	r3, #0
 80a0cd2:	f43f af7e 	beq.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a0cd6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a0cda:	2600      	movs	r6, #0
 80a0cdc:	4a17      	ldr	r2, [pc, #92]	; (80a0d3c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a0cde:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0ce0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a0ce4:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a0ce6:	3b04      	subs	r3, #4
 80a0ce8:	b29b      	uxth	r3, r3
 80a0cea:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0cee:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a0cf2:	b2db      	uxtb	r3, r3
 80a0cf4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0cf8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0cfc:	b2db      	uxtb	r3, r3
 80a0cfe:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0d02:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0d06:	b2db      	uxtb	r3, r3
 80a0d08:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0d0c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0d10:	b2db      	uxtb	r3, r3
 80a0d12:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0d16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0d1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0d1e:	041b      	lsls	r3, r3, #16
 80a0d20:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a0d24:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0d28:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a0d2c:	433b      	orrs	r3, r7
 80a0d2e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0d32:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d34:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d38:	e07f      	b.n	80a0e3a <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a0d3a:	bf00      	nop
 80a0d3c:	200000b0 	.word	0x200000b0
 80a0d40:	e0001000 	.word	0xe0001000
          asm volatile(
 80a0d44:	4600      	mov	r0, r0
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0db2:	79e3      	ldrb	r3, [r4, #7]
 80a0db4:	6810      	ldr	r0, [r2, #0]
 80a0db6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0dba:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0dbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dc2:	88b8      	ldrh	r0, [r7, #4]
 80a0dc4:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0dc6:	4600      	mov	r0, r0
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
        mask >>= 1;
 80a0e24:	9b04      	ldr	r3, [sp, #16]
 80a0e26:	085b      	lsrs	r3, r3, #1
 80a0e28:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e2e:	3301      	adds	r3, #1
 80a0e30:	b2db      	uxtb	r3, r3
 80a0e32:	2b1f      	cmp	r3, #31
 80a0e34:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e38:	d87e      	bhi.n	80a0f38 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a0e3a:	79e3      	ldrb	r3, [r4, #7]
 80a0e3c:	6810      	ldr	r0, [r2, #0]
 80a0e3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e42:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e4a:	88b8      	ldrh	r0, [r7, #4]
 80a0e4c:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e4e:	9803      	ldr	r0, [sp, #12]
 80a0e50:	9b04      	ldr	r3, [sp, #16]
 80a0e52:	4218      	tst	r0, r3
 80a0e54:	f47f af76 	bne.w	80a0d44 <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a0e58:	4600      	mov	r0, r0
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0e80:	79e3      	ldrb	r3, [r4, #7]
 80a0e82:	6810      	ldr	r0, [r2, #0]
 80a0e84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e88:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e90:	88b8      	ldrh	r0, [r7, #4]
 80a0e92:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0e94:	4600      	mov	r0, r0
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	e775      	b.n	80a0e24 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0f38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f3c:	b29b      	uxth	r3, r3
 80a0f3e:	2b00      	cmp	r3, #0
 80a0f40:	f47f aecd 	bne.w	80a0cde <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a0f44:	e645      	b.n	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f46:	2d03      	cmp	r5, #3
 80a0f48:	f000 8128 	beq.w	80a119c <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f4c:	2b00      	cmp	r3, #0
 80a0f4e:	f43f ae40 	beq.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0f52:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0f56:	2600      	movs	r6, #0
 80a0f58:	4a16      	ldr	r2, [pc, #88]	; (80a0fb4 <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a0f5a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a0f60:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a0f62:	3b03      	subs	r3, #3
 80a0f64:	b29b      	uxth	r3, r3
 80a0f66:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f6a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a0f6c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a0f6e:	b2db      	uxtb	r3, r3
 80a0f70:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f74:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a0f76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a0f7a:	b2db      	uxtb	r3, r3
 80a0f7c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0f80:	788b      	ldrb	r3, [r1, #2]
 80a0f82:	3103      	adds	r1, #3
 80a0f84:	b2db      	uxtb	r3, r3
 80a0f86:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f8a:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a0f8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a0f92:	021b      	lsls	r3, r3, #8
 80a0f94:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a0f98:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a0f9c:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a0fa0:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fa4:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a0fa6:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a0faa:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0fae:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a0fb2:	e07a      	b.n	80a10aa <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a0fb4:	200000b0 	.word	0x200000b0
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fb8:	9b04      	ldr	r3, [sp, #16]
 80a0fba:	085b      	lsrs	r3, r3, #1
 80a0fbc:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a0fbe:	4600      	mov	r0, r0
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1044:	79e0      	ldrb	r0, [r4, #7]
 80a1046:	6817      	ldr	r7, [r2, #0]
          j++;
 80a1048:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a104c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1050:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a1054:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a1056:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a105a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a105e:	b2db      	uxtb	r3, r3
 80a1060:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1064:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a1066:	4600      	mov	r0, r0
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
          if(j==24) break;
 80a1090:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1094:	2b18      	cmp	r3, #24
 80a1096:	d07a      	beq.n	80a118e <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a1098:	79e3      	ldrb	r3, [r4, #7]
 80a109a:	6810      	ldr	r0, [r2, #0]
 80a109c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10a0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10a8:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a10aa:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a10ac:	9803      	ldr	r0, [sp, #12]
 80a10ae:	9b04      	ldr	r3, [sp, #16]
 80a10b0:	4218      	tst	r0, r3
 80a10b2:	d181      	bne.n	80a0fb8 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a10b4:	4600      	mov	r0, r0
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a10d6:	79e3      	ldrb	r3, [r4, #7]
 80a10d8:	6810      	ldr	r0, [r2, #0]
 80a10da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10de:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e6:	88b8      	ldrh	r0, [r7, #4]
 80a10e8:	8318      	strh	r0, [r3, #24]
          j++;
 80a10ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10ee:	3301      	adds	r3, #1
 80a10f0:	b2db      	uxtb	r3, r3
 80a10f2:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a10f6:	9b04      	ldr	r3, [sp, #16]
 80a10f8:	085b      	lsrs	r3, r3, #1
 80a10fa:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a10fc:	4600      	mov	r0, r0
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
          if(j==24) break;
 80a1186:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a118a:	2b18      	cmp	r3, #24
 80a118c:	d184      	bne.n	80a1098 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a118e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1192:	b29b      	uxth	r3, r3
 80a1194:	2b00      	cmp	r3, #0
 80a1196:	f47f aee0 	bne.w	80a0f5a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a119a:	e51a      	b.n	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a119c:	2b00      	cmp	r3, #0
 80a119e:	f43f ad18 	beq.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a11a2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a11a6:	2600      	movs	r6, #0
 80a11a8:	4a12      	ldr	r2, [pc, #72]	; (80a11f4 <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a11aa:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a11b0:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a11b2:	3b03      	subs	r3, #3
 80a11b4:	b29b      	uxth	r3, r3
 80a11b6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11ba:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a11be:	b2db      	uxtb	r3, r3
 80a11c0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11c4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a11c8:	b2db      	uxtb	r3, r3
 80a11ca:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a11ce:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a11d2:	b2db      	uxtb	r3, r3
 80a11d4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a11dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11e0:	021b      	lsls	r3, r3, #8
 80a11e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a11e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11ea:	4303      	orrs	r3, r0
 80a11ec:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11ee:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11f2:	e0e0      	b.n	80a13b6 <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a11f4:	200000b0 	.word	0x200000b0
          asm volatile(
 80a11f8:	4600      	mov	r0, r0
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a131a:	79e3      	ldrb	r3, [r4, #7]
 80a131c:	6810      	ldr	r0, [r2, #0]
 80a131e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1322:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1326:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a132a:	88b8      	ldrh	r0, [r7, #4]
 80a132c:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a132e:	4600      	mov	r0, r0
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
        mask >>= 1;
 80a139e:	9b04      	ldr	r3, [sp, #16]
 80a13a0:	085b      	lsrs	r3, r3, #1
 80a13a2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a13a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a13a8:	3301      	adds	r3, #1
 80a13aa:	b2db      	uxtb	r3, r3
 80a13ac:	2b17      	cmp	r3, #23
 80a13ae:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13b2:	f200 80eb 	bhi.w	80a158c <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a13b6:	79e3      	ldrb	r3, [r4, #7]
 80a13b8:	6810      	ldr	r0, [r2, #0]
 80a13ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13be:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13c6:	88b8      	ldrh	r0, [r7, #4]
 80a13c8:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13ca:	9803      	ldr	r0, [sp, #12]
 80a13cc:	9b04      	ldr	r3, [sp, #16]
 80a13ce:	4218      	tst	r0, r3
 80a13d0:	f47f af12 	bne.w	80a11f8 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a13d4:	4600      	mov	r0, r0
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1456:	79e3      	ldrb	r3, [r4, #7]
 80a1458:	6810      	ldr	r0, [r2, #0]
 80a145a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a145e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1462:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1466:	88b8      	ldrh	r0, [r7, #4]
 80a1468:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a146a:	4600      	mov	r0, r0
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	e710      	b.n	80a139e <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a157c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1580:	b29b      	uxth	r3, r3
 80a1582:	2b00      	cmp	r3, #0
 80a1584:	f47e af96 	bne.w	80a04b4 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1588:	f7ff bb23 	b.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a158c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1590:	b29b      	uxth	r3, r3
 80a1592:	2b00      	cmp	r3, #0
 80a1594:	f47f ae09 	bne.w	80a11aa <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a1598:	f7ff bb1b 	b.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a159c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a159c:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a159e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a15a0:	428b      	cmp	r3, r1
 80a15a2:	d92d      	bls.n	80a1600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a15a4:	7a06      	ldrb	r6, [r0, #8]
 80a15a6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a15aa:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a15ae:	b2d5      	uxtb	r5, r2
 80a15b0:	b13e      	cbz	r6, 80a15c2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a15b2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a15b4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a15b6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a15b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a15bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a15c0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a15c2:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a15c6:	68c7      	ldr	r7, [r0, #12]
 80a15c8:	f1bc 0f06 	cmp.w	ip, #6
 80a15cc:	bf0c      	ite	eq
 80a15ce:	2604      	moveq	r6, #4
 80a15d0:	2603      	movne	r6, #3
 80a15d2:	434e      	muls	r6, r1
 80a15d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80a15d8:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a15da:	f1bc 0f06 	cmp.w	ip, #6
 80a15de:	d81d      	bhi.n	80a161c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a15e0:	e8df f00c 	tbb	[pc, ip]
 80a15e4:	04081c04 	.word	0x04081c04
 80a15e8:	040f      	.short	0x040f
 80a15ea:	04          	.byte	0x04
 80a15eb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a15ec:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a15ee:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a15f0:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a15f2:	e005      	b.n	80a1600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a15f4:	2bfe      	cmp	r3, #254	; 0xfe
 80a15f6:	bf28      	it	cs
 80a15f8:	23fe      	movcs	r3, #254	; 0xfe
 80a15fa:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a15fc:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a15fe:	708c      	strb	r4, [r1, #2]
}
 80a1600:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1602:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1604:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a1606:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1608:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a160a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a160c:	b913      	cbnz	r3, 80a1614 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a160e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1610:	70ca      	strb	r2, [r1, #3]
        } break;
 80a1612:	e7f5      	b.n	80a1600 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1614:	435a      	muls	r2, r3
 80a1616:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a161a:	e7f9      	b.n	80a1610 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a161c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a161e:	704c      	strb	r4, [r1, #1]
 80a1620:	e7e6      	b.n	80a15f0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a1622 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1622:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1626:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a162a:	4770      	bx	lr

080a162c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a162c:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a162e:	f000 f8f9 	bl	80a1824 <HAL_Pin_Map>
 80a1632:	4b01      	ldr	r3, [pc, #4]	; (80a1638 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1634:	6018      	str	r0, [r3, #0]
}
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	200000b0 	.word	0x200000b0

080a163c <_ZN7rgb_lcdD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class rgb_lcd : public Print 
 80a163c:	4770      	bx	lr

080a163e <_ZN7rgb_lcdD0Ev>:
 80a163e:	b510      	push	{r4, lr}
 80a1640:	4604      	mov	r4, r0
 80a1642:	2110      	movs	r1, #16
 80a1644:	f7fe fd2b 	bl	80a009e <_ZdlPvj>
 80a1648:	4620      	mov	r0, r4
 80a164a:	bd10      	pop	{r4, pc}

080a164c <_Z14i2c_send_byteSPhh>:
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80a164c:	b570      	push	{r4, r5, r6, lr}
 80a164e:	460e      	mov	r6, r1
 80a1650:	4605      	mov	r5, r0
    Wire.beginTransmission(LCD_ADDRESS);        // transmit to device #4
 80a1652:	f001 f8bb 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a1656:	213e      	movs	r1, #62	; 0x3e
 80a1658:	f000 fedc 	bl	80a2414 <_ZN7TwoWire17beginTransmissionEi>
    for(int i=0; i<len; i++)
 80a165c:	2400      	movs	r4, #0
 80a165e:	42a6      	cmp	r6, r4
 80a1660:	dd07      	ble.n	80a1672 <_Z14i2c_send_byteSPhh+0x26>
    {
        Wire.write(dta[i]);
 80a1662:	f001 f8b3 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a1666:	6803      	ldr	r3, [r0, #0]
 80a1668:	5d29      	ldrb	r1, [r5, r4]
 80a166a:	689b      	ldr	r3, [r3, #8]
 80a166c:	4798      	blx	r3
    for(int i=0; i<len; i++)
 80a166e:	3401      	adds	r4, #1
 80a1670:	e7f5      	b.n	80a165e <_Z14i2c_send_byteSPhh+0x12>
    }
    Wire.endTransmission();                     // stop transmitting
 80a1672:	f001 f8ab 	bl	80a27cc <_Z19__fetch_global_Wirev>
}
 80a1676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();                     // stop transmitting
 80a167a:	f000 bed2 	b.w	80a2422 <_ZN7TwoWire15endTransmissionEv>

080a167e <_ZN7rgb_lcd5writeEh>:

// send data
inline size_t rgb_lcd::write(uint8_t value)
{

    unsigned char dta[2] = {0x40, value};
 80a167e:	2340      	movs	r3, #64	; 0x40
{
 80a1680:	b507      	push	{r0, r1, r2, lr}
    unsigned char dta[2] = {0x40, value};
 80a1682:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1686:	a801      	add	r0, sp, #4
 80a1688:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x40, value};
 80a168a:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a168e:	f7ff ffdd 	bl	80a164c <_Z14i2c_send_byteSPhh>
    return 1; // assume sucess
}
 80a1692:	2001      	movs	r0, #1
 80a1694:	b003      	add	sp, #12
 80a1696:	f85d fb04 	ldr.w	pc, [sp], #4

080a169a <_ZN7rgb_lcd7commandEh.constprop.0>:
    unsigned char dta[2] = {0x80, value};
 80a169a:	2380      	movs	r3, #128	; 0x80
inline void rgb_lcd::command(uint8_t value)
 80a169c:	b507      	push	{r0, r1, r2, lr}
    i2c_send_byteS(dta, 2);
 80a169e:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, value};
 80a16a0:	f88d 0005 	strb.w	r0, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a16a4:	a801      	add	r0, sp, #4
    unsigned char dta[2] = {0x80, value};
 80a16a6:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a16aa:	f7ff ffcf 	bl	80a164c <_Z14i2c_send_byteSPhh>
}
 80a16ae:	b003      	add	sp, #12
 80a16b0:	f85d fb04 	ldr.w	pc, [sp], #4

080a16b4 <_ZN7rgb_lcdC1Ev>:
    Print() : write_error(0) {}
 80a16b4:	2200      	movs	r2, #0
 80a16b6:	6042      	str	r2, [r0, #4]
rgb_lcd::rgb_lcd()
 80a16b8:	4a01      	ldr	r2, [pc, #4]	; (80a16c0 <_ZN7rgb_lcdC1Ev+0xc>)
 80a16ba:	6002      	str	r2, [r0, #0]
}
 80a16bc:	4770      	bx	lr
 80a16be:	bf00      	nop
 80a16c0:	080a3628 	.word	0x080a3628

080a16c4 <_ZN7rgb_lcd5clearEv>:
{
 80a16c4:	b508      	push	{r3, lr}
    command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80a16c6:	2001      	movs	r0, #1
 80a16c8:	f7ff ffe7 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
}
 80a16cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a16d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a16d4:	f000 b8e6 	b.w	80a18a4 <HAL_Delay_Microseconds>

080a16d8 <_ZN7rgb_lcd9setCursorEhh>:
{
 80a16d8:	b507      	push	{r0, r1, r2, lr}
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a16da:	b96a      	cbnz	r2, 80a16f8 <_ZN7rgb_lcd9setCursorEhh+0x20>
 80a16dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    unsigned char dta[2] = {0x80, col};
 80a16e0:	2380      	movs	r3, #128	; 0x80
 80a16e2:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a16e6:	a801      	add	r0, sp, #4
 80a16e8:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, col};
 80a16ea:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a16ee:	f7ff ffad 	bl	80a164c <_Z14i2c_send_byteSPhh>
}
 80a16f2:	b003      	add	sp, #12
 80a16f4:	f85d fb04 	ldr.w	pc, [sp], #4
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a16f8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80a16fc:	e7f0      	b.n	80a16e0 <_ZN7rgb_lcd9setCursorEhh+0x8>

080a16fe <_ZN7rgb_lcd7displayEv>:
    _displaycontrol |= LCD_DISPLAYON;
 80a16fe:	7a43      	ldrb	r3, [r0, #9]
 80a1700:	f043 0204 	orr.w	r2, r3, #4
 80a1704:	7242      	strb	r2, [r0, #9]
    command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a1706:	f043 000c 	orr.w	r0, r3, #12
 80a170a:	f7ff bfc6 	b.w	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>

080a170e <_ZN7rgb_lcd6setRegEhh>:

void rgb_lcd::setReg(unsigned char addr, unsigned char dta)
{
 80a170e:	b538      	push	{r3, r4, r5, lr}
 80a1710:	4614      	mov	r4, r2
 80a1712:	460d      	mov	r5, r1
    Wire.beginTransmission(RGB_ADDRESS); // transmit to device #4
 80a1714:	f001 f85a 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a1718:	2162      	movs	r1, #98	; 0x62
 80a171a:	f000 fe7b 	bl	80a2414 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(addr);
 80a171e:	f001 f855 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a1722:	6803      	ldr	r3, [r0, #0]
 80a1724:	4629      	mov	r1, r5
 80a1726:	689b      	ldr	r3, [r3, #8]
 80a1728:	4798      	blx	r3
    Wire.write(dta);
 80a172a:	f001 f84f 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a172e:	6803      	ldr	r3, [r0, #0]
 80a1730:	4621      	mov	r1, r4
 80a1732:	689b      	ldr	r3, [r3, #8]
 80a1734:	4798      	blx	r3
    Wire.endTransmission();    // stop transmitting
 80a1736:	f001 f849 	bl	80a27cc <_Z19__fetch_global_Wirev>
}
 80a173a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();    // stop transmitting
 80a173e:	f000 be70 	b.w	80a2422 <_ZN7TwoWire15endTransmissionEv>

080a1742 <_ZN7rgb_lcd6setRGBEhhh>:

void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80a1742:	b570      	push	{r4, r5, r6, lr}
 80a1744:	4604      	mov	r4, r0
 80a1746:	4616      	mov	r6, r2
 80a1748:	461d      	mov	r5, r3
    setReg(REG_RED, r);
 80a174a:	460a      	mov	r2, r1
 80a174c:	2104      	movs	r1, #4
 80a174e:	f7ff ffde 	bl	80a170e <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_GREEN, g);
 80a1752:	4632      	mov	r2, r6
 80a1754:	4620      	mov	r0, r4
 80a1756:	2103      	movs	r1, #3
 80a1758:	f7ff ffd9 	bl	80a170e <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_BLUE, b);
 80a175c:	462a      	mov	r2, r5
 80a175e:	4620      	mov	r0, r4
}
 80a1760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setReg(REG_BLUE, b);
 80a1764:	2102      	movs	r1, #2
 80a1766:	f7ff bfd2 	b.w	80a170e <_ZN7rgb_lcd6setRegEhh>

080a176a <_ZN7rgb_lcd5beginEhhh>:
{
 80a176a:	b570      	push	{r4, r5, r6, lr}
 80a176c:	4615      	mov	r5, r2
 80a176e:	4604      	mov	r4, r0
 80a1770:	461e      	mov	r6, r3
    Wire.begin();
 80a1772:	f001 f82b 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a1776:	f000 fe43 	bl	80a2400 <_ZN7TwoWire5beginEv>
    if (lines > 1) {
 80a177a:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_2LINE;
 80a177c:	bf88      	it	hi
 80a177e:	7a23      	ldrbhi	r3, [r4, #8]
    _numlines = lines;
 80a1780:	7325      	strb	r5, [r4, #12]
        _displayfunction |= LCD_2LINE;
 80a1782:	bf84      	itt	hi
 80a1784:	f043 0308 	orrhi.w	r3, r3, #8
 80a1788:	7223      	strbhi	r3, [r4, #8]
    _currline = 0;
 80a178a:	2300      	movs	r3, #0
 80a178c:	7363      	strb	r3, [r4, #13]
    if ((dotsize != 0) && (lines == 1)) {
 80a178e:	b12e      	cbz	r6, 80a179c <_ZN7rgb_lcd5beginEhhh+0x32>
 80a1790:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_5x10DOTS;
 80a1792:	bf02      	ittt	eq
 80a1794:	7a23      	ldrbeq	r3, [r4, #8]
 80a1796:	f043 0304 	orreq.w	r3, r3, #4
 80a179a:	7223      	strbeq	r3, [r4, #8]
 80a179c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80a17a0:	f000 f880 	bl	80a18a4 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a17a4:	7a20      	ldrb	r0, [r4, #8]
 80a17a6:	f040 0020 	orr.w	r0, r0, #32
 80a17aa:	f7ff ff76 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
 80a17ae:	f241 1094 	movw	r0, #4500	; 0x1194
 80a17b2:	f000 f877 	bl	80a18a4 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a17b6:	7a20      	ldrb	r0, [r4, #8]
 80a17b8:	f040 0020 	orr.w	r0, r0, #32
 80a17bc:	f7ff ff6d 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
 80a17c0:	2096      	movs	r0, #150	; 0x96
 80a17c2:	f000 f86f 	bl	80a18a4 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a17c6:	7a20      	ldrb	r0, [r4, #8]
 80a17c8:	f040 0020 	orr.w	r0, r0, #32
 80a17cc:	f7ff ff65 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a17d0:	7a20      	ldrb	r0, [r4, #8]
 80a17d2:	f040 0020 	orr.w	r0, r0, #32
 80a17d6:	f7ff ff60 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a17da:	2304      	movs	r3, #4
    display();
 80a17dc:	4620      	mov	r0, r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a17de:	7263      	strb	r3, [r4, #9]
    display();
 80a17e0:	f7ff ff8d 	bl	80a16fe <_ZN7rgb_lcd7displayEv>
    clear();
 80a17e4:	4620      	mov	r0, r4
 80a17e6:	f7ff ff6d 	bl	80a16c4 <_ZN7rgb_lcd5clearEv>
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a17ea:	2302      	movs	r3, #2
    command(LCD_ENTRYMODESET | _displaymode);
 80a17ec:	2006      	movs	r0, #6
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a17ee:	72a3      	strb	r3, [r4, #10]
    command(LCD_ENTRYMODESET | _displaymode);
 80a17f0:	f7ff ff53 	bl	80a169a <_ZN7rgb_lcd7commandEh.constprop.0>
    setReg(0, 0);
 80a17f4:	2200      	movs	r2, #0
 80a17f6:	4620      	mov	r0, r4
 80a17f8:	4611      	mov	r1, r2
 80a17fa:	f7ff ff88 	bl	80a170e <_ZN7rgb_lcd6setRegEhh>
    setReg(1, 0);
 80a17fe:	4620      	mov	r0, r4
 80a1800:	2200      	movs	r2, #0
 80a1802:	2101      	movs	r1, #1
 80a1804:	f7ff ff83 	bl	80a170e <_ZN7rgb_lcd6setRegEhh>
    setReg(0x08, 0xAA);     // all led control by pwm
 80a1808:	4620      	mov	r0, r4
 80a180a:	22aa      	movs	r2, #170	; 0xaa
 80a180c:	2108      	movs	r1, #8
 80a180e:	f7ff ff7e 	bl	80a170e <_ZN7rgb_lcd6setRegEhh>
  void setRGB(unsigned char r, unsigned char g, unsigned char b);               // set rgb
  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      // set pwm
  
  void setColor(unsigned char color);
  void setColorAll(){setRGB(0, 0, 0);}
  void setColorWhite(){setRGB(255, 255, 255);}
 80a1812:	23ff      	movs	r3, #255	; 0xff
 80a1814:	4620      	mov	r0, r4
}
 80a1816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a181a:	461a      	mov	r2, r3
 80a181c:	4619      	mov	r1, r3
 80a181e:	f7ff bf90 	b.w	80a1742 <_ZN7rgb_lcd6setRGBEhhh>
	...

080a1824 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <HAL_Pin_Map+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	681b      	ldr	r3, [r3, #0]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601b0 	.word	0x080601b0

080a1834 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <HAL_Validate_Pin_Function+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	685b      	ldr	r3, [r3, #4]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601b0 	.word	0x080601b0

080a1844 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <HAL_Pin_Mode+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	689b      	ldr	r3, [r3, #8]
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601b0 	.word	0x080601b0

080a1854 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <HAL_Get_Pin_Mode+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	68db      	ldr	r3, [r3, #12]
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601b0 	.word	0x080601b0

080a1864 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <HAL_GPIO_Write+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	691b      	ldr	r3, [r3, #16]
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601b0 	.word	0x080601b0

080a1874 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <HAL_GPIO_Read+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	695b      	ldr	r3, [r3, #20]
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080601b0 	.word	0x080601b0

080a1884 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <hal_adc_read+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601b0 	.word	0x080601b0

080a1894 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <HAL_RNG_GetRandomNumber+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	685b      	ldr	r3, [r3, #4]
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	0806019c 	.word	0x0806019c

080a18a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <HAL_Delay_Microseconds+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	68db      	ldr	r3, [r3, #12]
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	0806019c 	.word	0x0806019c

080a18b4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	691b      	ldr	r3, [r3, #16]
 80a18bc:	9301      	str	r3, [sp, #4]
 80a18be:	bd08      	pop	{r3, pc}
 80a18c0:	0806019c 	.word	0x0806019c

080a18c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b02      	ldr	r3, [pc, #8]	; (80a18d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	695b      	ldr	r3, [r3, #20]
 80a18cc:	9301      	str	r3, [sp, #4]
 80a18ce:	bd08      	pop	{r3, pc}
 80a18d0:	0806019c 	.word	0x0806019c

080a18d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b02      	ldr	r3, [pc, #8]	; (80a18e0 <os_mutex_recursive_create+0xc>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a18dc:	9301      	str	r3, [sp, #4]
 80a18de:	bd08      	pop	{r3, pc}
 80a18e0:	080601d0 	.word	0x080601d0

080a18e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a18e4:	b508      	push	{r3, lr}
 80a18e6:	4b02      	ldr	r3, [pc, #8]	; (80a18f0 <os_mutex_recursive_destroy+0xc>)
 80a18e8:	681b      	ldr	r3, [r3, #0]
 80a18ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a18ec:	9301      	str	r3, [sp, #4]
 80a18ee:	bd08      	pop	{r3, pc}
 80a18f0:	080601d0 	.word	0x080601d0

080a18f4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b02      	ldr	r3, [pc, #8]	; (80a1900 <hal_usart_write+0xc>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18fc:	9301      	str	r3, [sp, #4]
 80a18fe:	bd08      	pop	{r3, pc}
 80a1900:	080601c4 	.word	0x080601c4

080a1904 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1904:	b508      	push	{r3, lr}
 80a1906:	4b02      	ldr	r3, [pc, #8]	; (80a1910 <hal_usart_available+0xc>)
 80a1908:	681b      	ldr	r3, [r3, #0]
 80a190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a190c:	9301      	str	r3, [sp, #4]
 80a190e:	bd08      	pop	{r3, pc}
 80a1910:	080601c4 	.word	0x080601c4

080a1914 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1914:	b508      	push	{r3, lr}
 80a1916:	4b02      	ldr	r3, [pc, #8]	; (80a1920 <hal_usart_read+0xc>)
 80a1918:	681b      	ldr	r3, [r3, #0]
 80a191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a191c:	9301      	str	r3, [sp, #4]
 80a191e:	bd08      	pop	{r3, pc}
 80a1920:	080601c4 	.word	0x080601c4

080a1924 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1924:	b508      	push	{r3, lr}
 80a1926:	4b02      	ldr	r3, [pc, #8]	; (80a1930 <hal_usart_peek+0xc>)
 80a1928:	681b      	ldr	r3, [r3, #0]
 80a192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a192c:	9301      	str	r3, [sp, #4]
 80a192e:	bd08      	pop	{r3, pc}
 80a1930:	080601c4 	.word	0x080601c4

080a1934 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1934:	b508      	push	{r3, lr}
 80a1936:	4b02      	ldr	r3, [pc, #8]	; (80a1940 <hal_usart_flush+0xc>)
 80a1938:	681b      	ldr	r3, [r3, #0]
 80a193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a193c:	9301      	str	r3, [sp, #4]
 80a193e:	bd08      	pop	{r3, pc}
 80a1940:	080601c4 	.word	0x080601c4

080a1944 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1944:	b508      	push	{r3, lr}
 80a1946:	4b02      	ldr	r3, [pc, #8]	; (80a1950 <hal_usart_is_enabled+0xc>)
 80a1948:	681b      	ldr	r3, [r3, #0]
 80a194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a194c:	9301      	str	r3, [sp, #4]
 80a194e:	bd08      	pop	{r3, pc}
 80a1950:	080601c4 	.word	0x080601c4

080a1954 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b02      	ldr	r3, [pc, #8]	; (80a1960 <hal_usart_available_data_for_write+0xc>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a195c:	9301      	str	r3, [sp, #4]
 80a195e:	bd08      	pop	{r3, pc}
 80a1960:	080601c4 	.word	0x080601c4

080a1964 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <hal_usart_init_ex+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601c4 	.word	0x080601c4

080a1974 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <hal_i2c_begin+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601ac 	.word	0x080601ac

080a1984 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <hal_i2c_begin_transmission+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601ac 	.word	0x080601ac

080a1994 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <hal_i2c_end_transmission+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601ac 	.word	0x080601ac

080a19a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <hal_i2c_write+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601ac 	.word	0x080601ac

080a19b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <hal_i2c_available+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601ac 	.word	0x080601ac

080a19c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <hal_i2c_read+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601ac 	.word	0x080601ac

080a19d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <hal_i2c_peek+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601ac 	.word	0x080601ac

080a19e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <hal_i2c_flush+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601ac 	.word	0x080601ac

080a19f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <hal_i2c_is_enabled+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601ac 	.word	0x080601ac

080a1a04 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b03      	ldr	r3, [pc, #12]	; (80a1a14 <hal_i2c_init+0x10>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1a0e:	9301      	str	r3, [sp, #4]
 80a1a10:	bd08      	pop	{r3, pc}
 80a1a12:	0000      	.short	0x0000
 80a1a14:	080601ac 	.word	0x080601ac

080a1a18 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <hal_spi_init+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	69db      	ldr	r3, [r3, #28]
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601b4 	.word	0x080601b4

080a1a28 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <hal_spi_is_enabled+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6a1b      	ldr	r3, [r3, #32]
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601b4 	.word	0x080601b4

080a1a38 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <HAL_USB_USART_Init+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	681b      	ldr	r3, [r3, #0]
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601d8 	.word	0x080601d8

080a1a48 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b02      	ldr	r3, [pc, #8]	; (80a1a54 <HAL_USB_USART_Begin+0xc>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	685b      	ldr	r3, [r3, #4]
 80a1a50:	9301      	str	r3, [sp, #4]
 80a1a52:	bd08      	pop	{r3, pc}
 80a1a54:	080601d8 	.word	0x080601d8

080a1a58 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a58:	b508      	push	{r3, lr}
 80a1a5a:	4b02      	ldr	r3, [pc, #8]	; (80a1a64 <HAL_USB_USART_Available_Data+0xc>)
 80a1a5c:	681b      	ldr	r3, [r3, #0]
 80a1a5e:	691b      	ldr	r3, [r3, #16]
 80a1a60:	9301      	str	r3, [sp, #4]
 80a1a62:	bd08      	pop	{r3, pc}
 80a1a64:	080601d8 	.word	0x080601d8

080a1a68 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1a68:	b508      	push	{r3, lr}
 80a1a6a:	4b02      	ldr	r3, [pc, #8]	; (80a1a74 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1a6c:	681b      	ldr	r3, [r3, #0]
 80a1a6e:	695b      	ldr	r3, [r3, #20]
 80a1a70:	9301      	str	r3, [sp, #4]
 80a1a72:	bd08      	pop	{r3, pc}
 80a1a74:	080601d8 	.word	0x080601d8

080a1a78 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a78:	b508      	push	{r3, lr}
 80a1a7a:	4b02      	ldr	r3, [pc, #8]	; (80a1a84 <HAL_USB_USART_Receive_Data+0xc>)
 80a1a7c:	681b      	ldr	r3, [r3, #0]
 80a1a7e:	699b      	ldr	r3, [r3, #24]
 80a1a80:	9301      	str	r3, [sp, #4]
 80a1a82:	bd08      	pop	{r3, pc}
 80a1a84:	080601d8 	.word	0x080601d8

080a1a88 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a88:	b508      	push	{r3, lr}
 80a1a8a:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <HAL_USB_USART_Send_Data+0xc>)
 80a1a8c:	681b      	ldr	r3, [r3, #0]
 80a1a8e:	69db      	ldr	r3, [r3, #28]
 80a1a90:	9301      	str	r3, [sp, #4]
 80a1a92:	bd08      	pop	{r3, pc}
 80a1a94:	080601d8 	.word	0x080601d8

080a1a98 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a98:	b508      	push	{r3, lr}
 80a1a9a:	4b02      	ldr	r3, [pc, #8]	; (80a1aa4 <HAL_USB_USART_Flush_Data+0xc>)
 80a1a9c:	681b      	ldr	r3, [r3, #0]
 80a1a9e:	6a1b      	ldr	r3, [r3, #32]
 80a1aa0:	9301      	str	r3, [sp, #4]
 80a1aa2:	bd08      	pop	{r3, pc}
 80a1aa4:	080601d8 	.word	0x080601d8

080a1aa8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1aa8:	b508      	push	{r3, lr}
 80a1aaa:	4b02      	ldr	r3, [pc, #8]	; (80a1ab4 <inet_gethostbyname+0xc>)
 80a1aac:	681b      	ldr	r3, [r3, #0]
 80a1aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ab0:	9301      	str	r3, [sp, #4]
 80a1ab2:	bd08      	pop	{r3, pc}
 80a1ab4:	080601c0 	.word	0x080601c0

080a1ab8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1ab8:	b508      	push	{r3, lr}
 80a1aba:	4b02      	ldr	r3, [pc, #8]	; (80a1ac4 <set_system_mode+0xc>)
 80a1abc:	681b      	ldr	r3, [r3, #0]
 80a1abe:	685b      	ldr	r3, [r3, #4]
 80a1ac0:	9301      	str	r3, [sp, #4]
 80a1ac2:	bd08      	pop	{r3, pc}
 80a1ac4:	080601a4 	.word	0x080601a4

080a1ac8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ac8:	b508      	push	{r3, lr}
 80a1aca:	4b02      	ldr	r3, [pc, #8]	; (80a1ad4 <system_delay_ms+0xc>)
 80a1acc:	681b      	ldr	r3, [r3, #0]
 80a1ace:	695b      	ldr	r3, [r3, #20]
 80a1ad0:	9301      	str	r3, [sp, #4]
 80a1ad2:	bd08      	pop	{r3, pc}
 80a1ad4:	080601a4 	.word	0x080601a4

080a1ad8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ad8:	b508      	push	{r3, lr}
 80a1ada:	4b03      	ldr	r3, [pc, #12]	; (80a1ae8 <system_ctrl_set_app_request_handler+0x10>)
 80a1adc:	681b      	ldr	r3, [r3, #0]
 80a1ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1ae2:	9301      	str	r3, [sp, #4]
 80a1ae4:	bd08      	pop	{r3, pc}
 80a1ae6:	0000      	.short	0x0000
 80a1ae8:	080601a4 	.word	0x080601a4

080a1aec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1aec:	b508      	push	{r3, lr}
 80a1aee:	4b03      	ldr	r3, [pc, #12]	; (80a1afc <system_ctrl_set_result+0x10>)
 80a1af0:	681b      	ldr	r3, [r3, #0]
 80a1af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1af6:	9301      	str	r3, [sp, #4]
 80a1af8:	bd08      	pop	{r3, pc}
 80a1afa:	0000      	.short	0x0000
 80a1afc:	080601a4 	.word	0x080601a4

080a1b00 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b00:	b508      	push	{r3, lr}
 80a1b02:	4b02      	ldr	r3, [pc, #8]	; (80a1b0c <network_connect+0xc>)
 80a1b04:	681b      	ldr	r3, [r3, #0]
 80a1b06:	685b      	ldr	r3, [r3, #4]
 80a1b08:	9301      	str	r3, [sp, #4]
 80a1b0a:	bd08      	pop	{r3, pc}
 80a1b0c:	080601c8 	.word	0x080601c8

080a1b10 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1b10:	b508      	push	{r3, lr}
 80a1b12:	4b02      	ldr	r3, [pc, #8]	; (80a1b1c <network_connecting+0xc>)
 80a1b14:	681b      	ldr	r3, [r3, #0]
 80a1b16:	689b      	ldr	r3, [r3, #8]
 80a1b18:	9301      	str	r3, [sp, #4]
 80a1b1a:	bd08      	pop	{r3, pc}
 80a1b1c:	080601c8 	.word	0x080601c8

080a1b20 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1b20:	b508      	push	{r3, lr}
 80a1b22:	4b02      	ldr	r3, [pc, #8]	; (80a1b2c <network_disconnect+0xc>)
 80a1b24:	681b      	ldr	r3, [r3, #0]
 80a1b26:	68db      	ldr	r3, [r3, #12]
 80a1b28:	9301      	str	r3, [sp, #4]
 80a1b2a:	bd08      	pop	{r3, pc}
 80a1b2c:	080601c8 	.word	0x080601c8

080a1b30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1b30:	b508      	push	{r3, lr}
 80a1b32:	4b02      	ldr	r3, [pc, #8]	; (80a1b3c <network_ready+0xc>)
 80a1b34:	681b      	ldr	r3, [r3, #0]
 80a1b36:	691b      	ldr	r3, [r3, #16]
 80a1b38:	9301      	str	r3, [sp, #4]
 80a1b3a:	bd08      	pop	{r3, pc}
 80a1b3c:	080601c8 	.word	0x080601c8

080a1b40 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <network_on+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	695b      	ldr	r3, [r3, #20]
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601c8 	.word	0x080601c8

080a1b50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1b50:	b508      	push	{r3, lr}
 80a1b52:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <network_off+0xc>)
 80a1b54:	681b      	ldr	r3, [r3, #0]
 80a1b56:	699b      	ldr	r3, [r3, #24]
 80a1b58:	9301      	str	r3, [sp, #4]
 80a1b5a:	bd08      	pop	{r3, pc}
 80a1b5c:	080601c8 	.word	0x080601c8

080a1b60 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <network_listen+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	69db      	ldr	r3, [r3, #28]
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601c8 	.word	0x080601c8

080a1b70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <network_listening+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	6a1b      	ldr	r3, [r3, #32]
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601c8 	.word	0x080601c8

080a1b80 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <network_set_listen_timeout+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601c8 	.word	0x080601c8

080a1b90 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <network_get_listen_timeout+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601c8 	.word	0x080601c8

080a1ba0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <network_is_on+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601c8 	.word	0x080601c8

080a1bb0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <network_is_off+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601c8 	.word	0x080601c8

080a1bc0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601cc 	.word	0x080601cc

080a1bd0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <malloc+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	681b      	ldr	r3, [r3, #0]
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601a0 	.word	0x080601a0

080a1be0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b02      	ldr	r3, [pc, #8]	; (80a1bec <free+0xc>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	685b      	ldr	r3, [r3, #4]
 80a1be8:	9301      	str	r3, [sp, #4]
 80a1bea:	bd08      	pop	{r3, pc}
 80a1bec:	080601a0 	.word	0x080601a0

080a1bf0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	4b02      	ldr	r3, [pc, #8]	; (80a1bfc <__assert_func+0xc>)
 80a1bf4:	681b      	ldr	r3, [r3, #0]
 80a1bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1bf8:	9301      	str	r3, [sp, #4]
 80a1bfa:	bd08      	pop	{r3, pc}
 80a1bfc:	080601a0 	.word	0x080601a0

080a1c00 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1c00:	b508      	push	{r3, lr}
 80a1c02:	4b02      	ldr	r3, [pc, #8]	; (80a1c0c <newlib_impure_ptr_callback+0xc>)
 80a1c04:	681b      	ldr	r3, [r3, #0]
 80a1c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1c08:	9301      	str	r3, [sp, #4]
 80a1c0a:	bd08      	pop	{r3, pc}
 80a1c0c:	080601a0 	.word	0x080601a0

080a1c10 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1c10:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1c12:	2600      	movs	r6, #0
 80a1c14:	4604      	mov	r4, r0
 80a1c16:	460d      	mov	r5, r1
 80a1c18:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1c1c:	f7ff fe5a 	bl	80a18d4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1c20:	4628      	mov	r0, r5
    _spi = spi;
 80a1c22:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1c24:	f7ff fef8 	bl	80a1a18 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1c28:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1c2a:	6066      	str	r6, [r4, #4]
}
 80a1c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1c30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1c30:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1c32:	2000      	movs	r0, #0
 80a1c34:	4b04      	ldr	r3, [pc, #16]	; (80a1c48 <_GLOBAL__sub_I_System+0x18>)
 80a1c36:	601a      	str	r2, [r3, #0]
 80a1c38:	4b04      	ldr	r3, [pc, #16]	; (80a1c4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1c3a:	4a05      	ldr	r2, [pc, #20]	; (80a1c50 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1c3c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a1c40:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c42:	f7ff bf39 	b.w	80a1ab8 <set_system_mode>
 80a1c46:	bf00      	nop
 80a1c48:	200000c0 	.word	0x200000c0
 80a1c4c:	200000b4 	.word	0x200000b4
 80a1c50:	ffff0000 	.word	0xffff0000

080a1c54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c56:	4606      	mov	r6, r0
 80a1c58:	460d      	mov	r5, r1
  size_t n = 0;
 80a1c5a:	2400      	movs	r4, #0
 80a1c5c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1c5e:	42bd      	cmp	r5, r7
 80a1c60:	d00c      	beq.n	80a1c7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c62:	6833      	ldr	r3, [r6, #0]
 80a1c64:	4630      	mov	r0, r6
 80a1c66:	689b      	ldr	r3, [r3, #8]
 80a1c68:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c6c:	4798      	blx	r3
     if (chunk>=0)
 80a1c6e:	1e03      	subs	r3, r0, #0
 80a1c70:	db01      	blt.n	80a1c76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c72:	441c      	add	r4, r3
  while (size--) {
 80a1c74:	e7f3      	b.n	80a1c5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c76:	2c00      	cmp	r4, #0
 80a1c78:	bf08      	it	eq
 80a1c7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c7c:	4620      	mov	r0, r4
 80a1c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c80:	b570      	push	{r4, r5, r6, lr}
 80a1c82:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c84:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c86:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1c88:	b149      	cbz	r1, 80a1c9e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c8a:	f001 fc21 	bl	80a34d0 <strlen>
 80a1c8e:	682b      	ldr	r3, [r5, #0]
 80a1c90:	4602      	mov	r2, r0
 80a1c92:	4621      	mov	r1, r4
 80a1c94:	4628      	mov	r0, r5
    }
 80a1c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1c9a:	68db      	ldr	r3, [r3, #12]
 80a1c9c:	4718      	bx	r3
    }
 80a1c9e:	bd70      	pop	{r4, r5, r6, pc}

080a1ca0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1ca0:	b508      	push	{r3, lr}
  return write(str);
 80a1ca2:	f7ff ffed 	bl	80a1c80 <_ZN5Print5writeEPKc>
}
 80a1ca6:	bd08      	pop	{r3, pc}

080a1ca8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1ca8:	6803      	ldr	r3, [r0, #0]
 80a1caa:	689b      	ldr	r3, [r3, #8]
 80a1cac:	4718      	bx	r3

080a1cae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1cae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1cb0:	210d      	movs	r1, #13
{
 80a1cb2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1cb4:	f7ff fff8 	bl	80a1ca8 <_ZN5Print5printEc>
  n += print('\n');
 80a1cb8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1cba:	4604      	mov	r4, r0
  n += print('\n');
 80a1cbc:	4628      	mov	r0, r5
 80a1cbe:	f7ff fff3 	bl	80a1ca8 <_ZN5Print5printEc>
  return n;
}
 80a1cc2:	4420      	add	r0, r4
 80a1cc4:	bd38      	pop	{r3, r4, r5, pc}

080a1cc6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1cc6:	b538      	push	{r3, r4, r5, lr}
 80a1cc8:	4605      	mov	r5, r0
  return write(str);
 80a1cca:	f7ff ffd9 	bl	80a1c80 <_ZN5Print5writeEPKc>
 80a1cce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1cd0:	4628      	mov	r0, r5
 80a1cd2:	f7ff ffec 	bl	80a1cae <_ZN5Print7printlnEv>
  return n;
}
 80a1cd6:	4420      	add	r0, r4
 80a1cd8:	bd38      	pop	{r3, r4, r5, pc}

080a1cda <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1cda:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1cdc:	2a01      	cmp	r2, #1
 80a1cde:	bf98      	it	ls
 80a1ce0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ce2:	b530      	push	{r4, r5, lr}
 80a1ce4:	b08b      	sub	sp, #44	; 0x2c
 80a1ce6:	460c      	mov	r4, r1
  *str = '\0';
 80a1ce8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1cec:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1cee:	4625      	mov	r5, r4
 80a1cf0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1cf4:	fb04 5312 	mls	r3, r4, r2, r5
 80a1cf8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1cfa:	2b09      	cmp	r3, #9
 80a1cfc:	bf94      	ite	ls
 80a1cfe:	3330      	addls	r3, #48	; 0x30
 80a1d00:	3337      	addhi	r3, #55	; 0x37
 80a1d02:	b2db      	uxtb	r3, r3
  } while(n);
 80a1d04:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1d06:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1d0a:	d9f0      	bls.n	80a1cee <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1d0c:	f7ff ffb8 	bl	80a1c80 <_ZN5Print5writeEPKc>
}
 80a1d10:	b00b      	add	sp, #44	; 0x2c
 80a1d12:	bd30      	pop	{r4, r5, pc}

080a1d14 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d18:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1d1a:	4619      	mov	r1, r3
 80a1d1c:	4610      	mov	r0, r2
{
 80a1d1e:	4692      	mov	sl, r2
 80a1d20:	461f      	mov	r7, r3
 80a1d22:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a1d26:	f001 f9cd 	bl	80a30c4 <__aeabi_dcmpun>
 80a1d2a:	b140      	cbz	r0, 80a1d3e <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a1d2c:	4951      	ldr	r1, [pc, #324]	; (80a1e74 <_ZN5Print10printFloatEdh+0x160>)
 80a1d2e:	4628      	mov	r0, r5
 80a1d30:	f7ff ffa6 	bl	80a1c80 <_ZN5Print5writeEPKc>
 80a1d34:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	b003      	add	sp, #12
 80a1d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a1d3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a1d42:	f04f 32ff 	mov.w	r2, #4294967295
 80a1d46:	4650      	mov	r0, sl
 80a1d48:	4621      	mov	r1, r4
 80a1d4a:	4b4b      	ldr	r3, [pc, #300]	; (80a1e78 <_ZN5Print10printFloatEdh+0x164>)
 80a1d4c:	f001 f9ba 	bl	80a30c4 <__aeabi_dcmpun>
 80a1d50:	b948      	cbnz	r0, 80a1d66 <_ZN5Print10printFloatEdh+0x52>
 80a1d52:	f04f 32ff 	mov.w	r2, #4294967295
 80a1d56:	4650      	mov	r0, sl
 80a1d58:	4621      	mov	r1, r4
 80a1d5a:	4b47      	ldr	r3, [pc, #284]	; (80a1e78 <_ZN5Print10printFloatEdh+0x164>)
 80a1d5c:	f001 f994 	bl	80a3088 <__aeabi_dcmple>
 80a1d60:	b908      	cbnz	r0, 80a1d66 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a1d62:	4946      	ldr	r1, [pc, #280]	; (80a1e7c <_ZN5Print10printFloatEdh+0x168>)
 80a1d64:	e7e3      	b.n	80a1d2e <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1d66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1d6a:	4650      	mov	r0, sl
 80a1d6c:	4639      	mov	r1, r7
 80a1d6e:	4b44      	ldr	r3, [pc, #272]	; (80a1e80 <_ZN5Print10printFloatEdh+0x16c>)
 80a1d70:	f001 f99e 	bl	80a30b0 <__aeabi_dcmpgt>
 80a1d74:	b108      	cbz	r0, 80a1d7a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a1d76:	4943      	ldr	r1, [pc, #268]	; (80a1e84 <_ZN5Print10printFloatEdh+0x170>)
 80a1d78:	e7d9      	b.n	80a1d2e <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1d7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1d7e:	4650      	mov	r0, sl
 80a1d80:	4639      	mov	r1, r7
 80a1d82:	4b41      	ldr	r3, [pc, #260]	; (80a1e88 <_ZN5Print10printFloatEdh+0x174>)
 80a1d84:	f001 f976 	bl	80a3074 <__aeabi_dcmplt>
 80a1d88:	2800      	cmp	r0, #0
 80a1d8a:	d1f4      	bne.n	80a1d76 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a1d8c:	2200      	movs	r2, #0
 80a1d8e:	2300      	movs	r3, #0
 80a1d90:	4650      	mov	r0, sl
 80a1d92:	4639      	mov	r1, r7
 80a1d94:	f001 f96e 	bl	80a3074 <__aeabi_dcmplt>
 80a1d98:	4604      	mov	r4, r0
 80a1d9a:	b130      	cbz	r0, 80a1daa <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a1d9c:	212d      	movs	r1, #45	; 0x2d
 80a1d9e:	4628      	mov	r0, r5
 80a1da0:	f7ff ff82 	bl	80a1ca8 <_ZN5Print5printEc>
 80a1da4:	4604      	mov	r4, r0
     number = -number;
 80a1da6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a1daa:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a1dae:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a1db0:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a1db4:	4935      	ldr	r1, [pc, #212]	; (80a1e8c <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a1db6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a1e90 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a1dba:	fa5f f38b 	uxtb.w	r3, fp
 80a1dbe:	429e      	cmp	r6, r3
 80a1dc0:	d906      	bls.n	80a1dd0 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a1dc2:	4642      	mov	r2, r8
 80a1dc4:	464b      	mov	r3, r9
 80a1dc6:	f001 f80d 	bl	80a2de4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a1dca:	f10b 0b01 	add.w	fp, fp, #1
 80a1dce:	e7f4      	b.n	80a1dba <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a1dd0:	463b      	mov	r3, r7
 80a1dd2:	4652      	mov	r2, sl
 80a1dd4:	f000 fd26 	bl	80a2824 <__adddf3>
 80a1dd8:	4689      	mov	r9, r1
 80a1dda:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a1ddc:	f001 f9b0 	bl	80a3140 <__aeabi_d2uiz>
 80a1de0:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a1de2:	f000 fe5b 	bl	80a2a9c <__aeabi_ui2d>
 80a1de6:	4602      	mov	r2, r0
 80a1de8:	460b      	mov	r3, r1
 80a1dea:	4640      	mov	r0, r8
 80a1dec:	4649      	mov	r1, r9
 80a1dee:	f000 fd17 	bl	80a2820 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1df2:	220a      	movs	r2, #10
 80a1df4:	4680      	mov	r8, r0
 80a1df6:	4689      	mov	r9, r1
 80a1df8:	4628      	mov	r0, r5
 80a1dfa:	4639      	mov	r1, r7
 80a1dfc:	f7ff ff6d 	bl	80a1cda <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a1e00:	4404      	add	r4, r0
  if (digits > 0) {
 80a1e02:	2e00      	cmp	r6, #0
 80a1e04:	d097      	beq.n	80a1d36 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a1e06:	4628      	mov	r0, r5
 80a1e08:	4922      	ldr	r1, [pc, #136]	; (80a1e94 <_ZN5Print10printFloatEdh+0x180>)
 80a1e0a:	f7ff ff39 	bl	80a1c80 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a1e0e:	f04f 0a00 	mov.w	sl, #0
 80a1e12:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a1e90 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a1e16:	4404      	add	r4, r0
  while (digits-- > 0)
 80a1e18:	2e00      	cmp	r6, #0
 80a1e1a:	d08c      	beq.n	80a1d36 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a1e1c:	4652      	mov	r2, sl
 80a1e1e:	465b      	mov	r3, fp
 80a1e20:	4640      	mov	r0, r8
 80a1e22:	4649      	mov	r1, r9
 80a1e24:	f000 feb4 	bl	80a2b90 <__aeabi_dmul>
 80a1e28:	4680      	mov	r8, r0
 80a1e2a:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a1e2c:	f001 f960 	bl	80a30f0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a1e30:	1e07      	subs	r7, r0, #0
 80a1e32:	da1b      	bge.n	80a1e6c <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a1e34:	212d      	movs	r1, #45	; 0x2d
 80a1e36:	4628      	mov	r0, r5
 80a1e38:	f7ff ff36 	bl	80a1ca8 <_ZN5Print5printEc>
 80a1e3c:	4603      	mov	r3, r0
            val = -n;
 80a1e3e:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a1e40:	220a      	movs	r2, #10
 80a1e42:	4628      	mov	r0, r5
 80a1e44:	9301      	str	r3, [sp, #4]
 80a1e46:	f7ff ff48 	bl	80a1cda <_ZN5Print11printNumberEmh>
 80a1e4a:	9b01      	ldr	r3, [sp, #4]
 80a1e4c:	3e01      	subs	r6, #1
 80a1e4e:	4403      	add	r3, r0
    remainder -= toPrint;
 80a1e50:	4638      	mov	r0, r7
    n += print(toPrint);
 80a1e52:	441c      	add	r4, r3
    remainder -= toPrint;
 80a1e54:	f000 fe32 	bl	80a2abc <__aeabi_i2d>
 80a1e58:	4602      	mov	r2, r0
 80a1e5a:	460b      	mov	r3, r1
 80a1e5c:	4640      	mov	r0, r8
 80a1e5e:	4649      	mov	r1, r9
 80a1e60:	f000 fcde 	bl	80a2820 <__aeabi_dsub>
 80a1e64:	b2f6      	uxtb	r6, r6
 80a1e66:	4680      	mov	r8, r0
 80a1e68:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a1e6a:	e7d5      	b.n	80a1e18 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a1e6c:	4639      	mov	r1, r7
        size_t t = 0;
 80a1e6e:	2300      	movs	r3, #0
 80a1e70:	e7e6      	b.n	80a1e40 <_ZN5Print10printFloatEdh+0x12c>
 80a1e72:	bf00      	nop
 80a1e74:	080a3638 	.word	0x080a3638
 80a1e78:	7fefffff 	.word	0x7fefffff
 80a1e7c:	080a363c 	.word	0x080a363c
 80a1e80:	41efffff 	.word	0x41efffff
 80a1e84:	080a3640 	.word	0x080a3640
 80a1e88:	c1efffff 	.word	0xc1efffff
 80a1e8c:	3fe00000 	.word	0x3fe00000
 80a1e90:	40240000 	.word	0x40240000
 80a1e94:	080a3644 	.word	0x080a3644

080a1e98 <_ZN5Print5printEfi>:
{
 80a1e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e9a:	4605      	mov	r5, r0
 80a1e9c:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a1e9e:	4608      	mov	r0, r1
 80a1ea0:	f000 fe1e 	bl	80a2ae0 <__aeabi_f2d>
 80a1ea4:	b2e4      	uxtb	r4, r4
 80a1ea6:	4602      	mov	r2, r0
 80a1ea8:	460b      	mov	r3, r1
 80a1eaa:	4628      	mov	r0, r5
 80a1eac:	9400      	str	r4, [sp, #0]
 80a1eae:	f7ff ff31 	bl	80a1d14 <_ZN5Print10printFloatEdh>
}
 80a1eb2:	b003      	add	sp, #12
 80a1eb4:	bd30      	pop	{r4, r5, pc}

080a1eb6 <_ZN5Print7printlnEdi>:
{
 80a1eb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a1eb8:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a1ebc:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a1ebe:	9100      	str	r1, [sp, #0]
 80a1ec0:	f7ff ff28 	bl	80a1d14 <_ZN5Print10printFloatEdh>
 80a1ec4:	4604      	mov	r4, r0
  n += println();
 80a1ec6:	4628      	mov	r0, r5
 80a1ec8:	f7ff fef1 	bl	80a1cae <_ZN5Print7printlnEv>
}
 80a1ecc:	4420      	add	r0, r4
 80a1ece:	b003      	add	sp, #12
 80a1ed0:	bd30      	pop	{r4, r5, pc}

080a1ed2 <_ZN5Print7printlnEfi>:
{
 80a1ed2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1ed4:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a1ed6:	4608      	mov	r0, r1
{
 80a1ed8:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a1eda:	f000 fe01 	bl	80a2ae0 <__aeabi_f2d>
 80a1ede:	9500      	str	r5, [sp, #0]
 80a1ee0:	4602      	mov	r2, r0
 80a1ee2:	460b      	mov	r3, r1
 80a1ee4:	4620      	mov	r0, r4
 80a1ee6:	f7ff ffe6 	bl	80a1eb6 <_ZN5Print7printlnEdi>
}
 80a1eea:	b003      	add	sp, #12
 80a1eec:	bd30      	pop	{r4, r5, pc}
	...

080a1ef0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1ef0:	4b01      	ldr	r3, [pc, #4]	; (80a1ef8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1ef2:	4a02      	ldr	r2, [pc, #8]	; (80a1efc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1ef4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1ef6:	4770      	bx	lr
 80a1ef8:	200000c4 	.word	0x200000c4
 80a1efc:	080a3646 	.word	0x080a3646

080a1f00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1f00:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1f02:	681a      	ldr	r2, [r3, #0]
 80a1f04:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1f06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1f08:	4770      	bx	lr
 80a1f0a:	bf00      	nop
 80a1f0c:	20000004 	.word	0x20000004
 80a1f10:	200000c8 	.word	0x200000c8

080a1f14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1f14:	2100      	movs	r1, #0
 80a1f16:	f7ff bdd7 	b.w	80a1ac8 <system_delay_ms>
	...

080a1f1c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f1c:	2200      	movs	r2, #0
 80a1f1e:	4b01      	ldr	r3, [pc, #4]	; (80a1f24 <_GLOBAL__sub_I_RGB+0x8>)
 80a1f20:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1f22:	4770      	bx	lr
 80a1f24:	200000cc 	.word	0x200000cc

080a1f28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1f28:	4b01      	ldr	r3, [pc, #4]	; (80a1f30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1f2a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1f2c:	4770      	bx	lr
 80a1f2e:	bf00      	nop
 80a1f30:	20000008 	.word	0x20000008

080a1f34 <serialEventRun>:
{
 80a1f34:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1f36:	4b13      	ldr	r3, [pc, #76]	; (80a1f84 <serialEventRun+0x50>)
 80a1f38:	b143      	cbz	r3, 80a1f4c <serialEventRun+0x18>
 80a1f3a:	f000 f975 	bl	80a2228 <_Z16_fetch_usbserialv>
 80a1f3e:	6803      	ldr	r3, [r0, #0]
 80a1f40:	691b      	ldr	r3, [r3, #16]
 80a1f42:	4798      	blx	r3
 80a1f44:	2800      	cmp	r0, #0
 80a1f46:	dd01      	ble.n	80a1f4c <serialEventRun+0x18>
        serialEvent();
 80a1f48:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1f4c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f88 <serialEventRun+0x54>)
 80a1f4e:	b143      	cbz	r3, 80a1f62 <serialEventRun+0x2e>
 80a1f50:	f000 fbf2 	bl	80a2738 <_Z22__fetch_global_Serial1v>
 80a1f54:	6803      	ldr	r3, [r0, #0]
 80a1f56:	691b      	ldr	r3, [r3, #16]
 80a1f58:	4798      	blx	r3
 80a1f5a:	2800      	cmp	r0, #0
 80a1f5c:	dd01      	ble.n	80a1f62 <serialEventRun+0x2e>
        serialEvent1();
 80a1f5e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1f62:	4b0a      	ldr	r3, [pc, #40]	; (80a1f8c <serialEventRun+0x58>)
 80a1f64:	b10b      	cbz	r3, 80a1f6a <serialEventRun+0x36>
 80a1f66:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1f6a:	4b09      	ldr	r3, [pc, #36]	; (80a1f90 <serialEventRun+0x5c>)
 80a1f6c:	b143      	cbz	r3, 80a1f80 <serialEventRun+0x4c>
 80a1f6e:	f000 f995 	bl	80a229c <_Z17_fetch_usbserial1v>
 80a1f72:	6803      	ldr	r3, [r0, #0]
 80a1f74:	691b      	ldr	r3, [r3, #16]
 80a1f76:	4798      	blx	r3
 80a1f78:	2800      	cmp	r0, #0
 80a1f7a:	dd01      	ble.n	80a1f80 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1f7c:	f3af 8000 	nop.w
}
 80a1f80:	bd08      	pop	{r3, pc}
 80a1f82:	bf00      	nop
	...

080a1f94 <_post_loop>:
{
 80a1f94:	b508      	push	{r3, lr}
	serialEventRun();
 80a1f96:	f7ff ffcd 	bl	80a1f34 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1f9a:	f7ff fc93 	bl	80a18c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1f9e:	4b01      	ldr	r3, [pc, #4]	; (80a1fa4 <_post_loop+0x10>)
 80a1fa0:	6018      	str	r0, [r3, #0]
}
 80a1fa2:	bd08      	pop	{r3, pc}
 80a1fa4:	20000450 	.word	0x20000450

080a1fa8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1fa8:	4805      	ldr	r0, [pc, #20]	; (80a1fc0 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1faa:	4a06      	ldr	r2, [pc, #24]	; (80a1fc4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1fac:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1fae:	1a12      	subs	r2, r2, r0
 80a1fb0:	4905      	ldr	r1, [pc, #20]	; (80a1fc8 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1fb2:	f001 fa49 	bl	80a3448 <memcpy>
    __backup_sram_signature = signature;
 80a1fb6:	4b05      	ldr	r3, [pc, #20]	; (80a1fcc <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1fb8:	4a05      	ldr	r2, [pc, #20]	; (80a1fd0 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1fba:	601a      	str	r2, [r3, #0]
}
 80a1fbc:	bd08      	pop	{r3, pc}
 80a1fbe:	bf00      	nop
 80a1fc0:	40024000 	.word	0x40024000
 80a1fc4:	40024004 	.word	0x40024004
 80a1fc8:	080a3840 	.word	0x080a3840
 80a1fcc:	40024000 	.word	0x40024000
 80a1fd0:	9a271c1e 	.word	0x9a271c1e

080a1fd4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1fd4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1fd6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1fd8:	461a      	mov	r2, r3
 80a1fda:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1fde:	9300      	str	r3, [sp, #0]
 80a1fe0:	f7ff fd84 	bl	80a1aec <system_ctrl_set_result>
}
 80a1fe4:	b003      	add	sp, #12
 80a1fe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1fec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1fec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1fee:	8843      	ldrh	r3, [r0, #2]
 80a1ff0:	2b0a      	cmp	r3, #10
 80a1ff2:	d008      	beq.n	80a2006 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ff4:	2b50      	cmp	r3, #80	; 0x50
 80a1ff6:	d10b      	bne.n	80a2010 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1ff8:	4b09      	ldr	r3, [pc, #36]	; (80a2020 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ffa:	681b      	ldr	r3, [r3, #0]
 80a1ffc:	b14b      	cbz	r3, 80a2012 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1ffe:	b003      	add	sp, #12
 80a2000:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2004:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2006:	f7ff ffe5 	bl	80a1fd4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a200a:	b003      	add	sp, #12
 80a200c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2010:	2300      	movs	r3, #0
 80a2012:	461a      	mov	r2, r3
 80a2014:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2018:	9300      	str	r3, [sp, #0]
 80a201a:	f7ff fd67 	bl	80a1aec <system_ctrl_set_result>
}
 80a201e:	e7f4      	b.n	80a200a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2020:	200000e0 	.word	0x200000e0

080a2024 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2024:	2100      	movs	r1, #0
{
 80a2026:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2028:	4811      	ldr	r0, [pc, #68]	; (80a2070 <module_user_init_hook+0x4c>)
 80a202a:	f7ff fde9 	bl	80a1c00 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a202e:	4b11      	ldr	r3, [pc, #68]	; (80a2074 <module_user_init_hook+0x50>)
 80a2030:	681a      	ldr	r2, [r3, #0]
 80a2032:	4b11      	ldr	r3, [pc, #68]	; (80a2078 <module_user_init_hook+0x54>)
 80a2034:	429a      	cmp	r2, r3
 80a2036:	bf0c      	ite	eq
 80a2038:	2201      	moveq	r2, #1
 80a203a:	2200      	movne	r2, #0
 80a203c:	4b0f      	ldr	r3, [pc, #60]	; (80a207c <module_user_init_hook+0x58>)
 80a203e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2040:	d001      	beq.n	80a2046 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2042:	f7ff ffb1 	bl	80a1fa8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2046:	f7ff fc25 	bl	80a1894 <HAL_RNG_GetRandomNumber>
 80a204a:	4604      	mov	r4, r0
    srand(seed);
 80a204c:	f001 fa12 	bl	80a3474 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2050:	4b0b      	ldr	r3, [pc, #44]	; (80a2080 <module_user_init_hook+0x5c>)
 80a2052:	b113      	cbz	r3, 80a205a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2054:	4620      	mov	r0, r4
 80a2056:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a205a:	2100      	movs	r1, #0
 80a205c:	4808      	ldr	r0, [pc, #32]	; (80a2080 <module_user_init_hook+0x5c>)
 80a205e:	f7ff fdaf 	bl	80a1bc0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2066:	2100      	movs	r1, #0
 80a2068:	4806      	ldr	r0, [pc, #24]	; (80a2084 <module_user_init_hook+0x60>)
 80a206a:	f7ff bd35 	b.w	80a1ad8 <system_ctrl_set_app_request_handler>
 80a206e:	bf00      	nop
 80a2070:	080a1f29 	.word	0x080a1f29
 80a2074:	40024000 	.word	0x40024000
 80a2078:	9a271c1e 	.word	0x9a271c1e
 80a207c:	200000dc 	.word	0x200000dc
 80a2080:	00000000 	.word	0x00000000
 80a2084:	080a1fed 	.word	0x080a1fed

080a2088 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2088:	4770      	bx	lr

080a208a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a208a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a208c:	460e      	mov	r6, r1
 80a208e:	2400      	movs	r4, #0
 80a2090:	f100 0708 	add.w	r7, r0, #8
 80a2094:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a2096:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a209a:	220a      	movs	r2, #10
 80a209c:	4630      	mov	r0, r6
 80a209e:	f7ff fe1c 	bl	80a1cda <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a20a2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20a4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a20a6:	d101      	bne.n	80a20ac <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a20a8:	4620      	mov	r0, r4
 80a20aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a20ac:	2c00      	cmp	r4, #0
 80a20ae:	d0f2      	beq.n	80a2096 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a20b0:	212e      	movs	r1, #46	; 0x2e
 80a20b2:	4630      	mov	r0, r6
 80a20b4:	f7ff fdf8 	bl	80a1ca8 <_ZN5Print5printEc>
 80a20b8:	4404      	add	r4, r0
 80a20ba:	e7ec      	b.n	80a2096 <_ZNK9IPAddress7printToER5Print+0xc>

080a20bc <_ZN9IPAddressD0Ev>:
 80a20bc:	b510      	push	{r4, lr}
 80a20be:	4604      	mov	r4, r0
 80a20c0:	2118      	movs	r1, #24
 80a20c2:	f7fd ffec 	bl	80a009e <_ZdlPvj>
 80a20c6:	4620      	mov	r0, r4
 80a20c8:	bd10      	pop	{r4, pc}
	...

080a20cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a20cc:	b510      	push	{r4, lr}
 80a20ce:	4604      	mov	r4, r0
 80a20d0:	4b04      	ldr	r3, [pc, #16]	; (80a20e4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a20d2:	2211      	movs	r2, #17
 80a20d4:	2100      	movs	r1, #0
 80a20d6:	f840 3b04 	str.w	r3, [r0], #4
 80a20da:	f001 f9c3 	bl	80a3464 <memset>
}
 80a20de:	4620      	mov	r0, r4
 80a20e0:	bd10      	pop	{r4, pc}
 80a20e2:	bf00      	nop
 80a20e4:	080a3670 	.word	0x080a3670

080a20e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a20e8:	4603      	mov	r3, r0
 80a20ea:	4a07      	ldr	r2, [pc, #28]	; (80a2108 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a20ec:	b510      	push	{r4, lr}
 80a20ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a20f2:	f101 0210 	add.w	r2, r1, #16
 80a20f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a20fa:	4291      	cmp	r1, r2
 80a20fc:	f843 4b04 	str.w	r4, [r3], #4
 80a2100:	d1f9      	bne.n	80a20f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2102:	780a      	ldrb	r2, [r1, #0]
 80a2104:	701a      	strb	r2, [r3, #0]
}
 80a2106:	bd10      	pop	{r4, pc}
 80a2108:	080a3670 	.word	0x080a3670

080a210c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a210c:	4a02      	ldr	r2, [pc, #8]	; (80a2118 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a210e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2112:	2204      	movs	r2, #4
 80a2114:	7502      	strb	r2, [r0, #20]
}
 80a2116:	4770      	bx	lr
 80a2118:	080a3670 	.word	0x080a3670

080a211c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a211c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a211e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2122:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2126:	2304      	movs	r3, #4
 80a2128:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a212c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2130:	6044      	str	r4, [r0, #4]
 80a2132:	7503      	strb	r3, [r0, #20]
}
 80a2134:	bd10      	pop	{r4, pc}
	...

080a2138 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2138:	b513      	push	{r0, r1, r4, lr}
 80a213a:	4c04      	ldr	r4, [pc, #16]	; (80a214c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a213c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a213e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a2142:	9400      	str	r4, [sp, #0]
 80a2144:	f7ff ffea 	bl	80a211c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2148:	b002      	add	sp, #8
 80a214a:	bd10      	pop	{r4, pc}
 80a214c:	080a3670 	.word	0x080a3670

080a2150 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2150:	7441      	strb	r1, [r0, #17]
}
 80a2152:	4770      	bx	lr

080a2154 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2154:	4770      	bx	lr

080a2156 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2156:	4770      	bx	lr

080a2158 <_ZN9USBSerial4readEv>:
{
 80a2158:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a215a:	2100      	movs	r1, #0
 80a215c:	7c00      	ldrb	r0, [r0, #16]
 80a215e:	f7ff fc8b 	bl	80a1a78 <HAL_USB_USART_Receive_Data>
}
 80a2162:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2166:	bd08      	pop	{r3, pc}

080a2168 <_ZN9USBSerial4peekEv>:
{
 80a2168:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a216a:	2101      	movs	r1, #1
 80a216c:	7c00      	ldrb	r0, [r0, #16]
 80a216e:	f7ff fc83 	bl	80a1a78 <HAL_USB_USART_Receive_Data>
}
 80a2172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2176:	bd08      	pop	{r3, pc}

080a2178 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2178:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a217a:	7c00      	ldrb	r0, [r0, #16]
 80a217c:	f7ff fc74 	bl	80a1a68 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2184:	bd08      	pop	{r3, pc}

080a2186 <_ZN9USBSerial9availableEv>:
{
 80a2186:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2188:	7c00      	ldrb	r0, [r0, #16]
 80a218a:	f7ff fc65 	bl	80a1a58 <HAL_USB_USART_Available_Data>
}
 80a218e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2192:	bd08      	pop	{r3, pc}

080a2194 <_ZN9USBSerial5writeEh>:
{
 80a2194:	b538      	push	{r3, r4, r5, lr}
 80a2196:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2198:	7c00      	ldrb	r0, [r0, #16]
{
 80a219a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a219c:	f7ff fc64 	bl	80a1a68 <HAL_USB_USART_Available_Data_For_Write>
 80a21a0:	2800      	cmp	r0, #0
 80a21a2:	dc01      	bgt.n	80a21a8 <_ZN9USBSerial5writeEh+0x14>
 80a21a4:	7c60      	ldrb	r0, [r4, #17]
 80a21a6:	b128      	cbz	r0, 80a21b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a21a8:	4629      	mov	r1, r5
 80a21aa:	7c20      	ldrb	r0, [r4, #16]
 80a21ac:	f7ff fc6c 	bl	80a1a88 <HAL_USB_USART_Send_Data>
 80a21b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a21b4:	bd38      	pop	{r3, r4, r5, pc}

080a21b6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a21b6:	7c00      	ldrb	r0, [r0, #16]
 80a21b8:	f7ff bc6e 	b.w	80a1a98 <HAL_USB_USART_Flush_Data>

080a21bc <_ZN9USBSerialD0Ev>:
 80a21bc:	b510      	push	{r4, lr}
 80a21be:	4604      	mov	r4, r0
 80a21c0:	2114      	movs	r1, #20
 80a21c2:	f7fd ff6c 	bl	80a009e <_ZdlPvj>
 80a21c6:	4620      	mov	r0, r4
 80a21c8:	bd10      	pop	{r4, pc}

080a21ca <__tcf_1>:
 80a21ca:	4770      	bx	lr

080a21cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a21cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a21ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a21d2:	4604      	mov	r4, r0
 80a21d4:	4608      	mov	r0, r1
 80a21d6:	2100      	movs	r1, #0
 80a21d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a21dc:	4b04      	ldr	r3, [pc, #16]	; (80a21f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a21de:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a21e0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a21e2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a21e4:	4611      	mov	r1, r2
  _blocking = true;
 80a21e6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a21e8:	f7ff fc26 	bl	80a1a38 <HAL_USB_USART_Init>
}
 80a21ec:	4620      	mov	r0, r4
 80a21ee:	bd10      	pop	{r4, pc}
 80a21f0:	080a3684 	.word	0x080a3684

080a21f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a21f4:	2200      	movs	r2, #0
 80a21f6:	7c00      	ldrb	r0, [r0, #16]
 80a21f8:	f7ff bc26 	b.w	80a1a48 <HAL_USB_USART_Begin>

080a21fc <_Z19acquireSerialBufferv>:
{
 80a21fc:	b510      	push	{r4, lr}
 80a21fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2200:	2214      	movs	r2, #20
 80a2202:	2100      	movs	r1, #0
 80a2204:	f001 f92e 	bl	80a3464 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2208:	4b05      	ldr	r3, [pc, #20]	; (80a2220 <_Z19acquireSerialBufferv+0x24>)
}
 80a220a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a220c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a220e:	4b05      	ldr	r3, [pc, #20]	; (80a2224 <_Z19acquireSerialBufferv+0x28>)
 80a2210:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2212:	f240 1301 	movw	r3, #257	; 0x101
 80a2216:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2218:	2381      	movs	r3, #129	; 0x81
 80a221a:	8223      	strh	r3, [r4, #16]
}
 80a221c:	bd10      	pop	{r4, pc}
 80a221e:	bf00      	nop
 80a2220:	20000114 	.word	0x20000114
 80a2224:	20000215 	.word	0x20000215

080a2228 <_Z16_fetch_usbserialv>:
{
 80a2228:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a222a:	4d0e      	ldr	r5, [pc, #56]	; (80a2264 <_Z16_fetch_usbserialv+0x3c>)
{
 80a222c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a222e:	a801      	add	r0, sp, #4
 80a2230:	f7ff ffe4 	bl	80a21fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2234:	7829      	ldrb	r1, [r5, #0]
 80a2236:	f3bf 8f5b 	dmb	ish
 80a223a:	f011 0401 	ands.w	r4, r1, #1
 80a223e:	d10e      	bne.n	80a225e <_Z16_fetch_usbserialv+0x36>
 80a2240:	4628      	mov	r0, r5
 80a2242:	f7fd ff2e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2246:	b150      	cbz	r0, 80a225e <_Z16_fetch_usbserialv+0x36>
 80a2248:	4621      	mov	r1, r4
 80a224a:	aa01      	add	r2, sp, #4
 80a224c:	4806      	ldr	r0, [pc, #24]	; (80a2268 <_Z16_fetch_usbserialv+0x40>)
 80a224e:	f7ff ffbd 	bl	80a21cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2252:	4628      	mov	r0, r5
 80a2254:	f7fd ff2a 	bl	80a00ac <__cxa_guard_release>
 80a2258:	4804      	ldr	r0, [pc, #16]	; (80a226c <_Z16_fetch_usbserialv+0x44>)
 80a225a:	f001 f8ef 	bl	80a343c <atexit>
	return _usbserial;
}
 80a225e:	4802      	ldr	r0, [pc, #8]	; (80a2268 <_Z16_fetch_usbserialv+0x40>)
 80a2260:	b007      	add	sp, #28
 80a2262:	bd30      	pop	{r4, r5, pc}
 80a2264:	200000e4 	.word	0x200000e4
 80a2268:	200000ec 	.word	0x200000ec
 80a226c:	080a2155 	.word	0x080a2155

080a2270 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2270:	b510      	push	{r4, lr}
 80a2272:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2274:	2214      	movs	r2, #20
 80a2276:	2100      	movs	r1, #0
 80a2278:	f001 f8f4 	bl	80a3464 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a227c:	4b05      	ldr	r3, [pc, #20]	; (80a2294 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a227e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2280:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2282:	4b05      	ldr	r3, [pc, #20]	; (80a2298 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2284:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2286:	f240 1301 	movw	r3, #257	; 0x101
 80a228a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a228c:	2381      	movs	r3, #129	; 0x81
 80a228e:	8223      	strh	r3, [r4, #16]
}
 80a2290:	bd10      	pop	{r4, pc}
 80a2292:	bf00      	nop
 80a2294:	20000296 	.word	0x20000296
 80a2298:	20000397 	.word	0x20000397

080a229c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a229c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a229e:	4c0e      	ldr	r4, [pc, #56]	; (80a22d8 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a22a0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a22a2:	a801      	add	r0, sp, #4
 80a22a4:	f7ff ffe4 	bl	80a2270 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22a8:	7823      	ldrb	r3, [r4, #0]
 80a22aa:	f3bf 8f5b 	dmb	ish
 80a22ae:	07db      	lsls	r3, r3, #31
 80a22b0:	d40e      	bmi.n	80a22d0 <_Z17_fetch_usbserial1v+0x34>
 80a22b2:	4620      	mov	r0, r4
 80a22b4:	f7fd fef5 	bl	80a00a2 <__cxa_guard_acquire>
 80a22b8:	b150      	cbz	r0, 80a22d0 <_Z17_fetch_usbserial1v+0x34>
 80a22ba:	2101      	movs	r1, #1
 80a22bc:	aa01      	add	r2, sp, #4
 80a22be:	4807      	ldr	r0, [pc, #28]	; (80a22dc <_Z17_fetch_usbserial1v+0x40>)
 80a22c0:	f7ff ff84 	bl	80a21cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22c4:	4620      	mov	r0, r4
 80a22c6:	f7fd fef1 	bl	80a00ac <__cxa_guard_release>
 80a22ca:	4805      	ldr	r0, [pc, #20]	; (80a22e0 <_Z17_fetch_usbserial1v+0x44>)
 80a22cc:	f001 f8b6 	bl	80a343c <atexit>
  return _usbserial1;
}
 80a22d0:	4802      	ldr	r0, [pc, #8]	; (80a22dc <_Z17_fetch_usbserial1v+0x40>)
 80a22d2:	b006      	add	sp, #24
 80a22d4:	bd10      	pop	{r4, pc}
 80a22d6:	bf00      	nop
 80a22d8:	200000e8 	.word	0x200000e8
 80a22dc:	20000100 	.word	0x20000100
 80a22e0:	080a21cb 	.word	0x080a21cb

080a22e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a22e4:	4770      	bx	lr

080a22e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a22e6:	7441      	strb	r1, [r0, #17]
}
 80a22e8:	4770      	bx	lr

080a22ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a22ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a22ec:	7c00      	ldrb	r0, [r0, #16]
 80a22ee:	f7ff fb31 	bl	80a1954 <hal_usart_available_data_for_write>
}
 80a22f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a22f6:	bd08      	pop	{r3, pc}

080a22f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a22f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a22fa:	7c00      	ldrb	r0, [r0, #16]
 80a22fc:	f7ff fb02 	bl	80a1904 <hal_usart_available>
}
 80a2300:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2304:	bd08      	pop	{r3, pc}

080a2306 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2306:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2308:	7c00      	ldrb	r0, [r0, #16]
 80a230a:	f7ff fb0b 	bl	80a1924 <hal_usart_peek>
}
 80a230e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2312:	bd08      	pop	{r3, pc}

080a2314 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2314:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2316:	7c00      	ldrb	r0, [r0, #16]
 80a2318:	f7ff fafc 	bl	80a1914 <hal_usart_read>
}
 80a231c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2320:	bd08      	pop	{r3, pc}

080a2322 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2322:	7c00      	ldrb	r0, [r0, #16]
 80a2324:	f7ff bb06 	b.w	80a1934 <hal_usart_flush>

080a2328 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2328:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a232a:	7c46      	ldrb	r6, [r0, #17]
{
 80a232c:	4604      	mov	r4, r0
 80a232e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2330:	b12e      	cbz	r6, 80a233e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2332:	4629      	mov	r1, r5
 80a2334:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a233a:	f7ff badb 	b.w	80a18f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a233e:	7c00      	ldrb	r0, [r0, #16]
 80a2340:	f7ff fb08 	bl	80a1954 <hal_usart_available_data_for_write>
 80a2344:	2800      	cmp	r0, #0
 80a2346:	dcf4      	bgt.n	80a2332 <_ZN11USARTSerial5writeEh+0xa>
}
 80a2348:	4630      	mov	r0, r6
 80a234a:	bd70      	pop	{r4, r5, r6, pc}

080a234c <_ZN11USARTSerialD0Ev>:
 80a234c:	b510      	push	{r4, lr}
 80a234e:	4604      	mov	r4, r0
 80a2350:	2114      	movs	r1, #20
 80a2352:	f7fd fea4 	bl	80a009e <_ZdlPvj>
 80a2356:	4620      	mov	r0, r4
 80a2358:	bd10      	pop	{r4, pc}
	...

080a235c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a235c:	b510      	push	{r4, lr}
 80a235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2362:	4604      	mov	r4, r0
 80a2364:	4608      	mov	r0, r1
 80a2366:	4611      	mov	r1, r2
 80a2368:	2200      	movs	r2, #0
 80a236a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a236e:	4b04      	ldr	r3, [pc, #16]	; (80a2380 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a2370:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2372:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2374:	2301      	movs	r3, #1
 80a2376:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a2378:	f7ff faf4 	bl	80a1964 <hal_usart_init_ex>
}
 80a237c:	4620      	mov	r0, r4
 80a237e:	bd10      	pop	{r4, pc}
 80a2380:	080a36b4 	.word	0x080a36b4

080a2384 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2384:	4770      	bx	lr

080a2386 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2388:	4606      	mov	r6, r0
 80a238a:	4615      	mov	r5, r2
 80a238c:	460c      	mov	r4, r1
 80a238e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2390:	42bc      	cmp	r4, r7
 80a2392:	d006      	beq.n	80a23a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2394:	6833      	ldr	r3, [r6, #0]
 80a2396:	4630      	mov	r0, r6
 80a2398:	689b      	ldr	r3, [r3, #8]
 80a239a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a239e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a23a0:	e7f6      	b.n	80a2390 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a23a2:	4628      	mov	r0, r5
 80a23a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a23a6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a23a6:	2200      	movs	r2, #0
 80a23a8:	7c00      	ldrb	r0, [r0, #16]
 80a23aa:	f7ff bafb 	b.w	80a19a4 <hal_i2c_write>

080a23ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a23ae:	2100      	movs	r1, #0
 80a23b0:	7c00      	ldrb	r0, [r0, #16]
 80a23b2:	f7ff baff 	b.w	80a19b4 <hal_i2c_available>

080a23b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a23b6:	2100      	movs	r1, #0
 80a23b8:	7c00      	ldrb	r0, [r0, #16]
 80a23ba:	f7ff bb03 	b.w	80a19c4 <hal_i2c_read>

080a23be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a23be:	2100      	movs	r1, #0
 80a23c0:	7c00      	ldrb	r0, [r0, #16]
 80a23c2:	f7ff bb07 	b.w	80a19d4 <hal_i2c_peek>

080a23c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a23c6:	2100      	movs	r1, #0
 80a23c8:	7c00      	ldrb	r0, [r0, #16]
 80a23ca:	f7ff bb0b 	b.w	80a19e4 <hal_i2c_flush>

080a23ce <_ZN7TwoWireD0Ev>:
 80a23ce:	b510      	push	{r4, lr}
 80a23d0:	4604      	mov	r4, r0
 80a23d2:	2114      	movs	r1, #20
 80a23d4:	f7fd fe63 	bl	80a009e <_ZdlPvj>
 80a23d8:	4620      	mov	r0, r4
 80a23da:	bd10      	pop	{r4, pc}

080a23dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a23dc:	b510      	push	{r4, lr}
 80a23de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23e2:	4604      	mov	r4, r0
 80a23e4:	4608      	mov	r0, r1
 80a23e6:	2100      	movs	r1, #0
 80a23e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a23ec:	4b03      	ldr	r3, [pc, #12]	; (80a23fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a23ee:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a23f0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a23f2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a23f4:	f7ff fb06 	bl	80a1a04 <hal_i2c_init>
}
 80a23f8:	4620      	mov	r0, r4
 80a23fa:	bd10      	pop	{r4, pc}
 80a23fc:	080a36e4 	.word	0x080a36e4

080a2400 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2400:	2300      	movs	r3, #0
 80a2402:	7c00      	ldrb	r0, [r0, #16]
 80a2404:	461a      	mov	r2, r3
 80a2406:	4619      	mov	r1, r3
 80a2408:	f7ff bab4 	b.w	80a1974 <hal_i2c_begin>

080a240c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a240c:	2200      	movs	r2, #0
 80a240e:	7c00      	ldrb	r0, [r0, #16]
 80a2410:	f7ff bab8 	b.w	80a1984 <hal_i2c_begin_transmission>

080a2414 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a2414:	b2c9      	uxtb	r1, r1
 80a2416:	f7ff bff9 	b.w	80a240c <_ZN7TwoWire17beginTransmissionEh>

080a241a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a241a:	2200      	movs	r2, #0
 80a241c:	7c00      	ldrb	r0, [r0, #16]
 80a241e:	f7ff bab9 	b.w	80a1994 <hal_i2c_end_transmission>

080a2422 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a2422:	2101      	movs	r1, #1
 80a2424:	f7ff bff9 	b.w	80a241a <_ZN7TwoWire15endTransmissionEh>

080a2428 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2428:	2200      	movs	r2, #0
 80a242a:	6840      	ldr	r0, [r0, #4]
 80a242c:	4611      	mov	r1, r2
 80a242e:	f7ff bb7f 	b.w	80a1b30 <network_ready>

080a2432 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2432:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2434:	4615      	mov	r5, r2
 80a2436:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2438:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a243a:	460e      	mov	r6, r1
 80a243c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a243e:	2100      	movs	r1, #0
 80a2440:	a803      	add	r0, sp, #12
 80a2442:	f001 f80f 	bl	80a3464 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2446:	4628      	mov	r0, r5
 80a2448:	f001 f842 	bl	80a34d0 <strlen>
 80a244c:	2700      	movs	r7, #0
 80a244e:	b281      	uxth	r1, r0
 80a2450:	6873      	ldr	r3, [r6, #4]
 80a2452:	4628      	mov	r0, r5
 80a2454:	9700      	str	r7, [sp, #0]
 80a2456:	aa03      	add	r2, sp, #12
 80a2458:	f7ff fb26 	bl	80a1aa8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a245c:	b130      	cbz	r0, 80a246c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a245e:	4639      	mov	r1, r7
 80a2460:	4620      	mov	r0, r4
 80a2462:	f7ff fe53 	bl	80a210c <_ZN9IPAddressC1Em>
    }
 80a2466:	4620      	mov	r0, r4
 80a2468:	b009      	add	sp, #36	; 0x24
 80a246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a246c:	4620      	mov	r0, r4
 80a246e:	a903      	add	r1, sp, #12
 80a2470:	f7ff fe3a 	bl	80a20e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2474:	e7f7      	b.n	80a2466 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2476 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2476:	2200      	movs	r2, #0
 80a2478:	6840      	ldr	r0, [r0, #4]
 80a247a:	4611      	mov	r1, r2
 80a247c:	f7ff bb78 	b.w	80a1b70 <network_listening>

080a2480 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2480:	2200      	movs	r2, #0
 80a2482:	6840      	ldr	r0, [r0, #4]
 80a2484:	4611      	mov	r1, r2
 80a2486:	f7ff bb83 	b.w	80a1b90 <network_get_listen_timeout>

080a248a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a248a:	2200      	movs	r2, #0
 80a248c:	6840      	ldr	r0, [r0, #4]
 80a248e:	f7ff bb77 	b.w	80a1b80 <network_set_listen_timeout>

080a2492 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2492:	2200      	movs	r2, #0
 80a2494:	6840      	ldr	r0, [r0, #4]
 80a2496:	f081 0101 	eor.w	r1, r1, #1
 80a249a:	f7ff bb61 	b.w	80a1b60 <network_listen>

080a249e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a249e:	2300      	movs	r3, #0
 80a24a0:	6840      	ldr	r0, [r0, #4]
 80a24a2:	461a      	mov	r2, r3
 80a24a4:	4619      	mov	r1, r3
 80a24a6:	f7ff bb53 	b.w	80a1b50 <network_off>

080a24aa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a24aa:	2300      	movs	r3, #0
 80a24ac:	6840      	ldr	r0, [r0, #4]
 80a24ae:	461a      	mov	r2, r3
 80a24b0:	4619      	mov	r1, r3
 80a24b2:	f7ff bb45 	b.w	80a1b40 <network_on>

080a24b6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a24b6:	2200      	movs	r2, #0
 80a24b8:	6840      	ldr	r0, [r0, #4]
 80a24ba:	4611      	mov	r1, r2
 80a24bc:	f7ff bb28 	b.w	80a1b10 <network_connecting>

080a24c0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a24c0:	2200      	movs	r2, #0
 80a24c2:	2102      	movs	r1, #2
 80a24c4:	6840      	ldr	r0, [r0, #4]
 80a24c6:	f7ff bb2b 	b.w	80a1b20 <network_disconnect>

080a24ca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a24ca:	2300      	movs	r3, #0
 80a24cc:	6840      	ldr	r0, [r0, #4]
 80a24ce:	461a      	mov	r2, r3
 80a24d0:	f7ff bb16 	b.w	80a1b00 <network_connect>

080a24d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a24d4:	2204      	movs	r2, #4
 80a24d6:	4b02      	ldr	r3, [pc, #8]	; (80a24e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a24d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a24da:	4a02      	ldr	r2, [pc, #8]	; (80a24e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a24dc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a24de:	4770      	bx	lr
 80a24e0:	20000418 	.word	0x20000418
 80a24e4:	080a370c 	.word	0x080a370c

080a24e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a24e8:	2300      	movs	r3, #0
 80a24ea:	6840      	ldr	r0, [r0, #4]
 80a24ec:	461a      	mov	r2, r3
 80a24ee:	f7ff bb07 	b.w	80a1b00 <network_connect>

080a24f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a24f2:	2200      	movs	r2, #0
 80a24f4:	2102      	movs	r1, #2
 80a24f6:	6840      	ldr	r0, [r0, #4]
 80a24f8:	f7ff bb12 	b.w	80a1b20 <network_disconnect>

080a24fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a24fc:	2200      	movs	r2, #0
 80a24fe:	6840      	ldr	r0, [r0, #4]
 80a2500:	4611      	mov	r1, r2
 80a2502:	f7ff bb05 	b.w	80a1b10 <network_connecting>

080a2506 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2506:	2200      	movs	r2, #0
 80a2508:	6840      	ldr	r0, [r0, #4]
 80a250a:	4611      	mov	r1, r2
 80a250c:	f7ff bb10 	b.w	80a1b30 <network_ready>

080a2510 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2510:	2300      	movs	r3, #0
 80a2512:	6840      	ldr	r0, [r0, #4]
 80a2514:	461a      	mov	r2, r3
 80a2516:	4619      	mov	r1, r3
 80a2518:	f7ff bb12 	b.w	80a1b40 <network_on>

080a251c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a251c:	2300      	movs	r3, #0
 80a251e:	6840      	ldr	r0, [r0, #4]
 80a2520:	461a      	mov	r2, r3
 80a2522:	4619      	mov	r1, r3
 80a2524:	f7ff bb14 	b.w	80a1b50 <network_off>

080a2528 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2528:	2100      	movs	r1, #0
 80a252a:	6840      	ldr	r0, [r0, #4]
 80a252c:	f7ff bb38 	b.w	80a1ba0 <network_is_on>

080a2530 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2530:	2100      	movs	r1, #0
 80a2532:	6840      	ldr	r0, [r0, #4]
 80a2534:	f7ff bb3c 	b.w	80a1bb0 <network_is_off>

080a2538 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2538:	2200      	movs	r2, #0
 80a253a:	6840      	ldr	r0, [r0, #4]
 80a253c:	f081 0101 	eor.w	r1, r1, #1
 80a2540:	f7ff bb0e 	b.w	80a1b60 <network_listen>

080a2544 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2544:	2200      	movs	r2, #0
 80a2546:	6840      	ldr	r0, [r0, #4]
 80a2548:	f7ff bb1a 	b.w	80a1b80 <network_set_listen_timeout>

080a254c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a254c:	2200      	movs	r2, #0
 80a254e:	6840      	ldr	r0, [r0, #4]
 80a2550:	4611      	mov	r1, r2
 80a2552:	f7ff bb1d 	b.w	80a1b90 <network_get_listen_timeout>

080a2556 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2556:	2200      	movs	r2, #0
 80a2558:	6840      	ldr	r0, [r0, #4]
 80a255a:	4611      	mov	r1, r2
 80a255c:	f7ff bb08 	b.w	80a1b70 <network_listening>

080a2560 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2560:	b570      	push	{r4, r5, r6, lr}
 80a2562:	4615      	mov	r5, r2
 80a2564:	b08e      	sub	sp, #56	; 0x38
 80a2566:	4604      	mov	r4, r0
    IPAddress addr;
 80a2568:	a808      	add	r0, sp, #32
 80a256a:	f7ff fdaf 	bl	80a20cc <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a256e:	2211      	movs	r2, #17
 80a2570:	2100      	movs	r1, #0
 80a2572:	a803      	add	r0, sp, #12
 80a2574:	f000 ff76 	bl	80a3464 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2578:	2600      	movs	r6, #0
 80a257a:	4628      	mov	r0, r5
 80a257c:	f000 ffa8 	bl	80a34d0 <strlen>
 80a2580:	4b0a      	ldr	r3, [pc, #40]	; (80a25ac <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2582:	9600      	str	r6, [sp, #0]
 80a2584:	b281      	uxth	r1, r0
 80a2586:	685b      	ldr	r3, [r3, #4]
 80a2588:	4628      	mov	r0, r5
 80a258a:	aa03      	add	r2, sp, #12
 80a258c:	f7ff fa8c 	bl	80a1aa8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2590:	b130      	cbz	r0, 80a25a0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2592:	4631      	mov	r1, r6
 80a2594:	4620      	mov	r0, r4
 80a2596:	f7ff fdb9 	bl	80a210c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a259a:	4620      	mov	r0, r4
 80a259c:	b00e      	add	sp, #56	; 0x38
 80a259e:	bd70      	pop	{r4, r5, r6, pc}
 80a25a0:	4620      	mov	r0, r4
 80a25a2:	a903      	add	r1, sp, #12
 80a25a4:	f7ff fda0 	bl	80a20e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a25a8:	e7f7      	b.n	80a259a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a25aa:	bf00      	nop
 80a25ac:	20000418 	.word	0x20000418

080a25b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a25b0:	4b02      	ldr	r3, [pc, #8]	; (80a25bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a25b2:	4a03      	ldr	r2, [pc, #12]	; (80a25c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a25b4:	601a      	str	r2, [r3, #0]
 80a25b6:	2200      	movs	r2, #0
 80a25b8:	605a      	str	r2, [r3, #4]

} // spark
 80a25ba:	4770      	bx	lr
 80a25bc:	20000420 	.word	0x20000420
 80a25c0:	080a3748 	.word	0x080a3748

080a25c4 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a25c4:	4b02      	ldr	r3, [pc, #8]	; (80a25d0 <__tcf_0+0xc>)
 80a25c6:	6898      	ldr	r0, [r3, #8]
 80a25c8:	b108      	cbz	r0, 80a25ce <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a25ca:	f7ff b98b 	b.w	80a18e4 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a25ce:	4770      	bx	lr
 80a25d0:	2000042c 	.word	0x2000042c

080a25d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a25d4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a25d6:	b570      	push	{r4, r5, r6, lr}
 80a25d8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a25da:	d901      	bls.n	80a25e0 <pinAvailable+0xc>
    return false;
 80a25dc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a25de:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a25e0:	f1a0 030d 	sub.w	r3, r0, #13
 80a25e4:	2b02      	cmp	r3, #2
 80a25e6:	d90b      	bls.n	80a2600 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a25e8:	2801      	cmp	r0, #1
 80a25ea:	d824      	bhi.n	80a2636 <pinAvailable+0x62>
 80a25ec:	f000 f8ee 	bl	80a27cc <_Z19__fetch_global_Wirev>
 80a25f0:	2100      	movs	r1, #0
 80a25f2:	7c00      	ldrb	r0, [r0, #16]
 80a25f4:	f7ff f9fe 	bl	80a19f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a25f8:	f080 0001 	eor.w	r0, r0, #1
 80a25fc:	b2c0      	uxtb	r0, r0
 80a25fe:	e7ee      	b.n	80a25de <pinAvailable+0xa>
 80a2600:	4e12      	ldr	r6, [pc, #72]	; (80a264c <pinAvailable+0x78>)
 80a2602:	7831      	ldrb	r1, [r6, #0]
 80a2604:	f3bf 8f5b 	dmb	ish
 80a2608:	f011 0501 	ands.w	r5, r1, #1
 80a260c:	d10d      	bne.n	80a262a <pinAvailable+0x56>
 80a260e:	4630      	mov	r0, r6
 80a2610:	f7fd fd47 	bl	80a00a2 <__cxa_guard_acquire>
 80a2614:	b148      	cbz	r0, 80a262a <pinAvailable+0x56>
 80a2616:	4629      	mov	r1, r5
 80a2618:	480d      	ldr	r0, [pc, #52]	; (80a2650 <pinAvailable+0x7c>)
 80a261a:	f7ff faf9 	bl	80a1c10 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a261e:	4630      	mov	r0, r6
 80a2620:	f7fd fd44 	bl	80a00ac <__cxa_guard_release>
 80a2624:	480b      	ldr	r0, [pc, #44]	; (80a2654 <pinAvailable+0x80>)
 80a2626:	f000 ff09 	bl	80a343c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a262a:	4b09      	ldr	r3, [pc, #36]	; (80a2650 <pinAvailable+0x7c>)
 80a262c:	7818      	ldrb	r0, [r3, #0]
 80a262e:	f7ff f9fb 	bl	80a1a28 <hal_spi_is_enabled>
 80a2632:	2800      	cmp	r0, #0
 80a2634:	d1d2      	bne.n	80a25dc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2636:	3c12      	subs	r4, #18
 80a2638:	2c01      	cmp	r4, #1
 80a263a:	d805      	bhi.n	80a2648 <pinAvailable+0x74>
 80a263c:	f000 f87c 	bl	80a2738 <_Z22__fetch_global_Serial1v>
 80a2640:	7c00      	ldrb	r0, [r0, #16]
 80a2642:	f7ff f97f 	bl	80a1944 <hal_usart_is_enabled>
 80a2646:	e7d7      	b.n	80a25f8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2648:	2001      	movs	r0, #1
 80a264a:	e7c8      	b.n	80a25de <pinAvailable+0xa>
 80a264c:	20000428 	.word	0x20000428
 80a2650:	2000042c 	.word	0x2000042c
 80a2654:	080a25c5 	.word	0x080a25c5

080a2658 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2658:	2817      	cmp	r0, #23
{
 80a265a:	b538      	push	{r3, r4, r5, lr}
 80a265c:	4604      	mov	r4, r0
 80a265e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2660:	d80a      	bhi.n	80a2678 <pinMode+0x20>
 80a2662:	29ff      	cmp	r1, #255	; 0xff
 80a2664:	d008      	beq.n	80a2678 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2666:	f7ff ffb5 	bl	80a25d4 <pinAvailable>
 80a266a:	b128      	cbz	r0, 80a2678 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a266c:	4629      	mov	r1, r5
 80a266e:	4620      	mov	r0, r4
}
 80a2670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2674:	f7ff b8e6 	b.w	80a1844 <HAL_Pin_Mode>
}
 80a2678:	bd38      	pop	{r3, r4, r5, pc}

080a267a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a267a:	b538      	push	{r3, r4, r5, lr}
 80a267c:	4604      	mov	r4, r0
 80a267e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2680:	f7ff f8e8 	bl	80a1854 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2684:	28ff      	cmp	r0, #255	; 0xff
 80a2686:	d010      	beq.n	80a26aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2688:	2806      	cmp	r0, #6
 80a268a:	d804      	bhi.n	80a2696 <digitalWrite+0x1c>
 80a268c:	234d      	movs	r3, #77	; 0x4d
 80a268e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2692:	07c3      	lsls	r3, r0, #31
 80a2694:	d409      	bmi.n	80a26aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2696:	4620      	mov	r0, r4
 80a2698:	f7ff ff9c 	bl	80a25d4 <pinAvailable>
 80a269c:	b128      	cbz	r0, 80a26aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a269e:	4629      	mov	r1, r5
 80a26a0:	4620      	mov	r0, r4
}
 80a26a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a26a6:	f7ff b8dd 	b.w	80a1864 <HAL_GPIO_Write>
}
 80a26aa:	bd38      	pop	{r3, r4, r5, pc}

080a26ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a26ac:	b510      	push	{r4, lr}
 80a26ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a26b0:	f7ff f8d0 	bl	80a1854 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a26b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a26b6:	b2db      	uxtb	r3, r3
 80a26b8:	2b01      	cmp	r3, #1
 80a26ba:	d908      	bls.n	80a26ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a26bc:	4620      	mov	r0, r4
 80a26be:	f7ff ff89 	bl	80a25d4 <pinAvailable>
 80a26c2:	b120      	cbz	r0, 80a26ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a26c4:	4620      	mov	r0, r4
}
 80a26c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a26ca:	f7ff b8d3 	b.w	80a1874 <HAL_GPIO_Read>
}
 80a26ce:	2000      	movs	r0, #0
 80a26d0:	bd10      	pop	{r4, pc}

080a26d2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a26d2:	b510      	push	{r4, lr}
 80a26d4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a26d6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a26d8:	bf9c      	itt	ls
 80a26da:	340a      	addls	r4, #10
 80a26dc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a26de:	4620      	mov	r0, r4
 80a26e0:	f7ff ff78 	bl	80a25d4 <pinAvailable>
 80a26e4:	b150      	cbz	r0, 80a26fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a26e6:	2103      	movs	r1, #3
 80a26e8:	4620      	mov	r0, r4
 80a26ea:	f7ff f8a3 	bl	80a1834 <HAL_Validate_Pin_Function>
 80a26ee:	2803      	cmp	r0, #3
 80a26f0:	d104      	bne.n	80a26fc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a26f2:	4620      	mov	r0, r4
}
 80a26f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a26f8:	f7ff b8c4 	b.w	80a1884 <hal_adc_read>
}
 80a26fc:	2000      	movs	r0, #0
 80a26fe:	bd10      	pop	{r4, pc}

080a2700 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2700:	4770      	bx	lr
	...

080a2704 <_Z20acquireSerial1Bufferv>:
{
 80a2704:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2706:	2514      	movs	r5, #20
{
 80a2708:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a270a:	462a      	mov	r2, r5
 80a270c:	2100      	movs	r1, #0
 80a270e:	f000 fea9 	bl	80a3464 <memset>
 80a2712:	8025      	strh	r5, [r4, #0]
 80a2714:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2716:	4e07      	ldr	r6, [pc, #28]	; (80a2734 <_Z20acquireSerial1Bufferv+0x30>)
 80a2718:	4628      	mov	r0, r5
 80a271a:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a271c:	8125      	strh	r5, [r4, #8]
 80a271e:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2720:	f000 f878 	bl	80a2814 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2724:	4631      	mov	r1, r6
    };
 80a2726:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2728:	4628      	mov	r0, r5
 80a272a:	f000 f873 	bl	80a2814 <_ZnajRKSt9nothrow_t>
    };
 80a272e:	60e0      	str	r0, [r4, #12]
}
 80a2730:	4620      	mov	r0, r4
 80a2732:	bd70      	pop	{r4, r5, r6, pc}
 80a2734:	080a377c 	.word	0x080a377c

080a2738 <_Z22__fetch_global_Serial1v>:
{
 80a2738:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a273a:	4d0e      	ldr	r5, [pc, #56]	; (80a2774 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a273c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a273e:	7829      	ldrb	r1, [r5, #0]
 80a2740:	f3bf 8f5b 	dmb	ish
 80a2744:	f011 0401 	ands.w	r4, r1, #1
 80a2748:	d111      	bne.n	80a276e <_Z22__fetch_global_Serial1v+0x36>
 80a274a:	4628      	mov	r0, r5
 80a274c:	f7fd fca9 	bl	80a00a2 <__cxa_guard_acquire>
 80a2750:	b168      	cbz	r0, 80a276e <_Z22__fetch_global_Serial1v+0x36>
 80a2752:	a801      	add	r0, sp, #4
 80a2754:	f7ff ffd6 	bl	80a2704 <_Z20acquireSerial1Bufferv>
 80a2758:	4621      	mov	r1, r4
 80a275a:	aa01      	add	r2, sp, #4
 80a275c:	4806      	ldr	r0, [pc, #24]	; (80a2778 <_Z22__fetch_global_Serial1v+0x40>)
 80a275e:	f7ff fdfd 	bl	80a235c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2762:	4628      	mov	r0, r5
 80a2764:	f7fd fca2 	bl	80a00ac <__cxa_guard_release>
 80a2768:	4804      	ldr	r0, [pc, #16]	; (80a277c <_Z22__fetch_global_Serial1v+0x44>)
 80a276a:	f000 fe67 	bl	80a343c <atexit>
    return serial1;
}
 80a276e:	4802      	ldr	r0, [pc, #8]	; (80a2778 <_Z22__fetch_global_Serial1v+0x40>)
 80a2770:	b007      	add	sp, #28
 80a2772:	bd30      	pop	{r4, r5, pc}
 80a2774:	20000438 	.word	0x20000438
 80a2778:	2000043c 	.word	0x2000043c
 80a277c:	080a2701 	.word	0x080a2701

080a2780 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2780:	2300      	movs	r3, #0
 80a2782:	b507      	push	{r0, r1, r2, lr}
 80a2784:	461a      	mov	r2, r3
 80a2786:	4619      	mov	r1, r3
 80a2788:	9300      	str	r3, [sp, #0]
 80a278a:	4803      	ldr	r0, [pc, #12]	; (80a2798 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a278c:	f7ff fcd4 	bl	80a2138 <_ZN9IPAddressC1Ehhhh>
 80a2790:	b003      	add	sp, #12
 80a2792:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2796:	bf00      	nop
 80a2798:	20000454 	.word	0x20000454

080a279c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a279c:	4770      	bx	lr
	...

080a27a0 <_Z17acquireWireBufferv>:
{
 80a27a0:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a27a2:	2314      	movs	r3, #20
 80a27a4:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a27a6:	4e08      	ldr	r6, [pc, #32]	; (80a27c8 <_Z17acquireWireBufferv+0x28>)
{
 80a27a8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a27aa:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a27ac:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a27ae:	6085      	str	r5, [r0, #8]
 80a27b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a27b2:	4628      	mov	r0, r5
 80a27b4:	f000 f82e 	bl	80a2814 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a27b8:	4631      	mov	r1, r6
	};
 80a27ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a27bc:	4628      	mov	r0, r5
 80a27be:	f000 f829 	bl	80a2814 <_ZnajRKSt9nothrow_t>
	};
 80a27c2:	60e0      	str	r0, [r4, #12]
}
 80a27c4:	4620      	mov	r0, r4
 80a27c6:	bd70      	pop	{r4, r5, r6, pc}
 80a27c8:	080a377c 	.word	0x080a377c

080a27cc <_Z19__fetch_global_Wirev>:
{
 80a27cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a27ce:	4d0e      	ldr	r5, [pc, #56]	; (80a2808 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a27d0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a27d2:	7829      	ldrb	r1, [r5, #0]
 80a27d4:	f3bf 8f5b 	dmb	ish
 80a27d8:	f011 0401 	ands.w	r4, r1, #1
 80a27dc:	d111      	bne.n	80a2802 <_Z19__fetch_global_Wirev+0x36>
 80a27de:	4628      	mov	r0, r5
 80a27e0:	f7fd fc5f 	bl	80a00a2 <__cxa_guard_acquire>
 80a27e4:	b168      	cbz	r0, 80a2802 <_Z19__fetch_global_Wirev+0x36>
 80a27e6:	a801      	add	r0, sp, #4
 80a27e8:	f7ff ffda 	bl	80a27a0 <_Z17acquireWireBufferv>
 80a27ec:	4621      	mov	r1, r4
 80a27ee:	aa01      	add	r2, sp, #4
 80a27f0:	4806      	ldr	r0, [pc, #24]	; (80a280c <_Z19__fetch_global_Wirev+0x40>)
 80a27f2:	f7ff fdf3 	bl	80a23dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a27f6:	4628      	mov	r0, r5
 80a27f8:	f7fd fc58 	bl	80a00ac <__cxa_guard_release>
 80a27fc:	4804      	ldr	r0, [pc, #16]	; (80a2810 <_Z19__fetch_global_Wirev+0x44>)
 80a27fe:	f000 fe1d 	bl	80a343c <atexit>
	return wire;
}
 80a2802:	4802      	ldr	r0, [pc, #8]	; (80a280c <_Z19__fetch_global_Wirev+0x40>)
 80a2804:	b007      	add	sp, #28
 80a2806:	bd30      	pop	{r4, r5, pc}
 80a2808:	2000046c 	.word	0x2000046c
 80a280c:	20000470 	.word	0x20000470
 80a2810:	080a279d 	.word	0x080a279d

080a2814 <_ZnajRKSt9nothrow_t>:
 80a2814:	f7fd bc41 	b.w	80a009a <_Znaj>

080a2818 <__aeabi_drsub>:
 80a2818:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a281c:	e002      	b.n	80a2824 <__adddf3>
 80a281e:	bf00      	nop

080a2820 <__aeabi_dsub>:
 80a2820:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2824 <__adddf3>:
 80a2824:	b530      	push	{r4, r5, lr}
 80a2826:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a282a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a282e:	ea94 0f05 	teq	r4, r5
 80a2832:	bf08      	it	eq
 80a2834:	ea90 0f02 	teqeq	r0, r2
 80a2838:	bf1f      	itttt	ne
 80a283a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a283e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2842:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2846:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a284a:	f000 80e2 	beq.w	80a2a12 <__adddf3+0x1ee>
 80a284e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2852:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2856:	bfb8      	it	lt
 80a2858:	426d      	neglt	r5, r5
 80a285a:	dd0c      	ble.n	80a2876 <__adddf3+0x52>
 80a285c:	442c      	add	r4, r5
 80a285e:	ea80 0202 	eor.w	r2, r0, r2
 80a2862:	ea81 0303 	eor.w	r3, r1, r3
 80a2866:	ea82 0000 	eor.w	r0, r2, r0
 80a286a:	ea83 0101 	eor.w	r1, r3, r1
 80a286e:	ea80 0202 	eor.w	r2, r0, r2
 80a2872:	ea81 0303 	eor.w	r3, r1, r3
 80a2876:	2d36      	cmp	r5, #54	; 0x36
 80a2878:	bf88      	it	hi
 80a287a:	bd30      	pophi	{r4, r5, pc}
 80a287c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2884:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2888:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a288c:	d002      	beq.n	80a2894 <__adddf3+0x70>
 80a288e:	4240      	negs	r0, r0
 80a2890:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2894:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a289c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a28a0:	d002      	beq.n	80a28a8 <__adddf3+0x84>
 80a28a2:	4252      	negs	r2, r2
 80a28a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a28a8:	ea94 0f05 	teq	r4, r5
 80a28ac:	f000 80a7 	beq.w	80a29fe <__adddf3+0x1da>
 80a28b0:	f1a4 0401 	sub.w	r4, r4, #1
 80a28b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a28b8:	db0d      	blt.n	80a28d6 <__adddf3+0xb2>
 80a28ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a28be:	fa22 f205 	lsr.w	r2, r2, r5
 80a28c2:	1880      	adds	r0, r0, r2
 80a28c4:	f141 0100 	adc.w	r1, r1, #0
 80a28c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a28cc:	1880      	adds	r0, r0, r2
 80a28ce:	fa43 f305 	asr.w	r3, r3, r5
 80a28d2:	4159      	adcs	r1, r3
 80a28d4:	e00e      	b.n	80a28f4 <__adddf3+0xd0>
 80a28d6:	f1a5 0520 	sub.w	r5, r5, #32
 80a28da:	f10e 0e20 	add.w	lr, lr, #32
 80a28de:	2a01      	cmp	r2, #1
 80a28e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a28e4:	bf28      	it	cs
 80a28e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a28ea:	fa43 f305 	asr.w	r3, r3, r5
 80a28ee:	18c0      	adds	r0, r0, r3
 80a28f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a28f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28f8:	d507      	bpl.n	80a290a <__adddf3+0xe6>
 80a28fa:	f04f 0e00 	mov.w	lr, #0
 80a28fe:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2902:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2906:	eb6e 0101 	sbc.w	r1, lr, r1
 80a290a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a290e:	d31b      	bcc.n	80a2948 <__adddf3+0x124>
 80a2910:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2914:	d30c      	bcc.n	80a2930 <__adddf3+0x10c>
 80a2916:	0849      	lsrs	r1, r1, #1
 80a2918:	ea5f 0030 	movs.w	r0, r0, rrx
 80a291c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2920:	f104 0401 	add.w	r4, r4, #1
 80a2924:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2928:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a292c:	f080 809a 	bcs.w	80a2a64 <__adddf3+0x240>
 80a2930:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2934:	bf08      	it	eq
 80a2936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a293a:	f150 0000 	adcs.w	r0, r0, #0
 80a293e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2942:	ea41 0105 	orr.w	r1, r1, r5
 80a2946:	bd30      	pop	{r4, r5, pc}
 80a2948:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a294c:	4140      	adcs	r0, r0
 80a294e:	eb41 0101 	adc.w	r1, r1, r1
 80a2952:	3c01      	subs	r4, #1
 80a2954:	bf28      	it	cs
 80a2956:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a295a:	d2e9      	bcs.n	80a2930 <__adddf3+0x10c>
 80a295c:	f091 0f00 	teq	r1, #0
 80a2960:	bf04      	itt	eq
 80a2962:	4601      	moveq	r1, r0
 80a2964:	2000      	moveq	r0, #0
 80a2966:	fab1 f381 	clz	r3, r1
 80a296a:	bf08      	it	eq
 80a296c:	3320      	addeq	r3, #32
 80a296e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2972:	f1b3 0220 	subs.w	r2, r3, #32
 80a2976:	da0c      	bge.n	80a2992 <__adddf3+0x16e>
 80a2978:	320c      	adds	r2, #12
 80a297a:	dd08      	ble.n	80a298e <__adddf3+0x16a>
 80a297c:	f102 0c14 	add.w	ip, r2, #20
 80a2980:	f1c2 020c 	rsb	r2, r2, #12
 80a2984:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2988:	fa21 f102 	lsr.w	r1, r1, r2
 80a298c:	e00c      	b.n	80a29a8 <__adddf3+0x184>
 80a298e:	f102 0214 	add.w	r2, r2, #20
 80a2992:	bfd8      	it	le
 80a2994:	f1c2 0c20 	rsble	ip, r2, #32
 80a2998:	fa01 f102 	lsl.w	r1, r1, r2
 80a299c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a29a0:	bfdc      	itt	le
 80a29a2:	ea41 010c 	orrle.w	r1, r1, ip
 80a29a6:	4090      	lslle	r0, r2
 80a29a8:	1ae4      	subs	r4, r4, r3
 80a29aa:	bfa2      	ittt	ge
 80a29ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a29b0:	4329      	orrge	r1, r5
 80a29b2:	bd30      	popge	{r4, r5, pc}
 80a29b4:	ea6f 0404 	mvn.w	r4, r4
 80a29b8:	3c1f      	subs	r4, #31
 80a29ba:	da1c      	bge.n	80a29f6 <__adddf3+0x1d2>
 80a29bc:	340c      	adds	r4, #12
 80a29be:	dc0e      	bgt.n	80a29de <__adddf3+0x1ba>
 80a29c0:	f104 0414 	add.w	r4, r4, #20
 80a29c4:	f1c4 0220 	rsb	r2, r4, #32
 80a29c8:	fa20 f004 	lsr.w	r0, r0, r4
 80a29cc:	fa01 f302 	lsl.w	r3, r1, r2
 80a29d0:	ea40 0003 	orr.w	r0, r0, r3
 80a29d4:	fa21 f304 	lsr.w	r3, r1, r4
 80a29d8:	ea45 0103 	orr.w	r1, r5, r3
 80a29dc:	bd30      	pop	{r4, r5, pc}
 80a29de:	f1c4 040c 	rsb	r4, r4, #12
 80a29e2:	f1c4 0220 	rsb	r2, r4, #32
 80a29e6:	fa20 f002 	lsr.w	r0, r0, r2
 80a29ea:	fa01 f304 	lsl.w	r3, r1, r4
 80a29ee:	ea40 0003 	orr.w	r0, r0, r3
 80a29f2:	4629      	mov	r1, r5
 80a29f4:	bd30      	pop	{r4, r5, pc}
 80a29f6:	fa21 f004 	lsr.w	r0, r1, r4
 80a29fa:	4629      	mov	r1, r5
 80a29fc:	bd30      	pop	{r4, r5, pc}
 80a29fe:	f094 0f00 	teq	r4, #0
 80a2a02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2a06:	bf06      	itte	eq
 80a2a08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2a0c:	3401      	addeq	r4, #1
 80a2a0e:	3d01      	subne	r5, #1
 80a2a10:	e74e      	b.n	80a28b0 <__adddf3+0x8c>
 80a2a12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a16:	bf18      	it	ne
 80a2a18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2a1c:	d029      	beq.n	80a2a72 <__adddf3+0x24e>
 80a2a1e:	ea94 0f05 	teq	r4, r5
 80a2a22:	bf08      	it	eq
 80a2a24:	ea90 0f02 	teqeq	r0, r2
 80a2a28:	d005      	beq.n	80a2a36 <__adddf3+0x212>
 80a2a2a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2a2e:	bf04      	itt	eq
 80a2a30:	4619      	moveq	r1, r3
 80a2a32:	4610      	moveq	r0, r2
 80a2a34:	bd30      	pop	{r4, r5, pc}
 80a2a36:	ea91 0f03 	teq	r1, r3
 80a2a3a:	bf1e      	ittt	ne
 80a2a3c:	2100      	movne	r1, #0
 80a2a3e:	2000      	movne	r0, #0
 80a2a40:	bd30      	popne	{r4, r5, pc}
 80a2a42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2a46:	d105      	bne.n	80a2a54 <__adddf3+0x230>
 80a2a48:	0040      	lsls	r0, r0, #1
 80a2a4a:	4149      	adcs	r1, r1
 80a2a4c:	bf28      	it	cs
 80a2a4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2a52:	bd30      	pop	{r4, r5, pc}
 80a2a54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2a58:	bf3c      	itt	cc
 80a2a5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2a5e:	bd30      	popcc	{r4, r5, pc}
 80a2a60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a6c:	f04f 0000 	mov.w	r0, #0
 80a2a70:	bd30      	pop	{r4, r5, pc}
 80a2a72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a76:	bf1a      	itte	ne
 80a2a78:	4619      	movne	r1, r3
 80a2a7a:	4610      	movne	r0, r2
 80a2a7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a80:	bf1c      	itt	ne
 80a2a82:	460b      	movne	r3, r1
 80a2a84:	4602      	movne	r2, r0
 80a2a86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a8a:	bf06      	itte	eq
 80a2a8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a90:	ea91 0f03 	teqeq	r1, r3
 80a2a94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a98:	bd30      	pop	{r4, r5, pc}
 80a2a9a:	bf00      	nop

080a2a9c <__aeabi_ui2d>:
 80a2a9c:	f090 0f00 	teq	r0, #0
 80a2aa0:	bf04      	itt	eq
 80a2aa2:	2100      	moveq	r1, #0
 80a2aa4:	4770      	bxeq	lr
 80a2aa6:	b530      	push	{r4, r5, lr}
 80a2aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2ab0:	f04f 0500 	mov.w	r5, #0
 80a2ab4:	f04f 0100 	mov.w	r1, #0
 80a2ab8:	e750      	b.n	80a295c <__adddf3+0x138>
 80a2aba:	bf00      	nop

080a2abc <__aeabi_i2d>:
 80a2abc:	f090 0f00 	teq	r0, #0
 80a2ac0:	bf04      	itt	eq
 80a2ac2:	2100      	moveq	r1, #0
 80a2ac4:	4770      	bxeq	lr
 80a2ac6:	b530      	push	{r4, r5, lr}
 80a2ac8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2acc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2ad0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2ad4:	bf48      	it	mi
 80a2ad6:	4240      	negmi	r0, r0
 80a2ad8:	f04f 0100 	mov.w	r1, #0
 80a2adc:	e73e      	b.n	80a295c <__adddf3+0x138>
 80a2ade:	bf00      	nop

080a2ae0 <__aeabi_f2d>:
 80a2ae0:	0042      	lsls	r2, r0, #1
 80a2ae2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2ae6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2aea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2aee:	bf1f      	itttt	ne
 80a2af0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2af4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2af8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2afc:	4770      	bxne	lr
 80a2afe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2b02:	bf08      	it	eq
 80a2b04:	4770      	bxeq	lr
 80a2b06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2b0a:	bf04      	itt	eq
 80a2b0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2b10:	4770      	bxeq	lr
 80a2b12:	b530      	push	{r4, r5, lr}
 80a2b14:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2b1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2b20:	e71c      	b.n	80a295c <__adddf3+0x138>
 80a2b22:	bf00      	nop

080a2b24 <__aeabi_ul2d>:
 80a2b24:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b28:	bf08      	it	eq
 80a2b2a:	4770      	bxeq	lr
 80a2b2c:	b530      	push	{r4, r5, lr}
 80a2b2e:	f04f 0500 	mov.w	r5, #0
 80a2b32:	e00a      	b.n	80a2b4a <__aeabi_l2d+0x16>

080a2b34 <__aeabi_l2d>:
 80a2b34:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b38:	bf08      	it	eq
 80a2b3a:	4770      	bxeq	lr
 80a2b3c:	b530      	push	{r4, r5, lr}
 80a2b3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2b42:	d502      	bpl.n	80a2b4a <__aeabi_l2d+0x16>
 80a2b44:	4240      	negs	r0, r0
 80a2b46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2b56:	f43f aed8 	beq.w	80a290a <__adddf3+0xe6>
 80a2b5a:	f04f 0203 	mov.w	r2, #3
 80a2b5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b62:	bf18      	it	ne
 80a2b64:	3203      	addne	r2, #3
 80a2b66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b6a:	bf18      	it	ne
 80a2b6c:	3203      	addne	r2, #3
 80a2b6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b72:	f1c2 0320 	rsb	r3, r2, #32
 80a2b76:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b7a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b7e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b82:	ea40 000e 	orr.w	r0, r0, lr
 80a2b86:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b8a:	4414      	add	r4, r2
 80a2b8c:	e6bd      	b.n	80a290a <__adddf3+0xe6>
 80a2b8e:	bf00      	nop

080a2b90 <__aeabi_dmul>:
 80a2b90:	b570      	push	{r4, r5, r6, lr}
 80a2b92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b9e:	bf1d      	ittte	ne
 80a2ba0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ba4:	ea94 0f0c 	teqne	r4, ip
 80a2ba8:	ea95 0f0c 	teqne	r5, ip
 80a2bac:	f000 f8de 	bleq	80a2d6c <__aeabi_dmul+0x1dc>
 80a2bb0:	442c      	add	r4, r5
 80a2bb2:	ea81 0603 	eor.w	r6, r1, r3
 80a2bb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2bba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2bbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2bc2:	bf18      	it	ne
 80a2bc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2bd0:	d038      	beq.n	80a2c44 <__aeabi_dmul+0xb4>
 80a2bd2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2bd6:	f04f 0500 	mov.w	r5, #0
 80a2bda:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2bde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2be2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2be6:	f04f 0600 	mov.w	r6, #0
 80a2bea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2bee:	f09c 0f00 	teq	ip, #0
 80a2bf2:	bf18      	it	ne
 80a2bf4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2bf8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2bfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2c00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2c04:	d204      	bcs.n	80a2c10 <__aeabi_dmul+0x80>
 80a2c06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2c0a:	416d      	adcs	r5, r5
 80a2c0c:	eb46 0606 	adc.w	r6, r6, r6
 80a2c10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2c14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2c18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2c1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2c20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2c24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2c28:	bf88      	it	hi
 80a2c2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2c2e:	d81e      	bhi.n	80a2c6e <__aeabi_dmul+0xde>
 80a2c30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2c34:	bf08      	it	eq
 80a2c36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2c3a:	f150 0000 	adcs.w	r0, r0, #0
 80a2c3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c42:	bd70      	pop	{r4, r5, r6, pc}
 80a2c44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2c48:	ea46 0101 	orr.w	r1, r6, r1
 80a2c4c:	ea40 0002 	orr.w	r0, r0, r2
 80a2c50:	ea81 0103 	eor.w	r1, r1, r3
 80a2c54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2c58:	bfc2      	ittt	gt
 80a2c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2c62:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c68:	f04f 0e00 	mov.w	lr, #0
 80a2c6c:	3c01      	subs	r4, #1
 80a2c6e:	f300 80ab 	bgt.w	80a2dc8 <__aeabi_dmul+0x238>
 80a2c72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c76:	bfde      	ittt	le
 80a2c78:	2000      	movle	r0, #0
 80a2c7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c7e:	bd70      	pople	{r4, r5, r6, pc}
 80a2c80:	f1c4 0400 	rsb	r4, r4, #0
 80a2c84:	3c20      	subs	r4, #32
 80a2c86:	da35      	bge.n	80a2cf4 <__aeabi_dmul+0x164>
 80a2c88:	340c      	adds	r4, #12
 80a2c8a:	dc1b      	bgt.n	80a2cc4 <__aeabi_dmul+0x134>
 80a2c8c:	f104 0414 	add.w	r4, r4, #20
 80a2c90:	f1c4 0520 	rsb	r5, r4, #32
 80a2c94:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c98:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c9c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2ca0:	ea40 0002 	orr.w	r0, r0, r2
 80a2ca4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2ca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2cac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2cb0:	fa21 f604 	lsr.w	r6, r1, r4
 80a2cb4:	eb42 0106 	adc.w	r1, r2, r6
 80a2cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cbc:	bf08      	it	eq
 80a2cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cc2:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc4:	f1c4 040c 	rsb	r4, r4, #12
 80a2cc8:	f1c4 0520 	rsb	r5, r4, #32
 80a2ccc:	fa00 f304 	lsl.w	r3, r0, r4
 80a2cd0:	fa20 f005 	lsr.w	r0, r0, r5
 80a2cd4:	fa01 f204 	lsl.w	r2, r1, r4
 80a2cd8:	ea40 0002 	orr.w	r0, r0, r2
 80a2cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ce0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2ce4:	f141 0100 	adc.w	r1, r1, #0
 80a2ce8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cec:	bf08      	it	eq
 80a2cee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cf2:	bd70      	pop	{r4, r5, r6, pc}
 80a2cf4:	f1c4 0520 	rsb	r5, r4, #32
 80a2cf8:	fa00 f205 	lsl.w	r2, r0, r5
 80a2cfc:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2d00:	fa20 f304 	lsr.w	r3, r0, r4
 80a2d04:	fa01 f205 	lsl.w	r2, r1, r5
 80a2d08:	ea43 0302 	orr.w	r3, r3, r2
 80a2d0c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2d10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d14:	fa21 f204 	lsr.w	r2, r1, r4
 80a2d18:	ea20 0002 	bic.w	r0, r0, r2
 80a2d1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2d20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2d24:	bf08      	it	eq
 80a2d26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2d2a:	bd70      	pop	{r4, r5, r6, pc}
 80a2d2c:	f094 0f00 	teq	r4, #0
 80a2d30:	d10f      	bne.n	80a2d52 <__aeabi_dmul+0x1c2>
 80a2d32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2d36:	0040      	lsls	r0, r0, #1
 80a2d38:	eb41 0101 	adc.w	r1, r1, r1
 80a2d3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2d40:	bf08      	it	eq
 80a2d42:	3c01      	subeq	r4, #1
 80a2d44:	d0f7      	beq.n	80a2d36 <__aeabi_dmul+0x1a6>
 80a2d46:	ea41 0106 	orr.w	r1, r1, r6
 80a2d4a:	f095 0f00 	teq	r5, #0
 80a2d4e:	bf18      	it	ne
 80a2d50:	4770      	bxne	lr
 80a2d52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2d56:	0052      	lsls	r2, r2, #1
 80a2d58:	eb43 0303 	adc.w	r3, r3, r3
 80a2d5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2d60:	bf08      	it	eq
 80a2d62:	3d01      	subeq	r5, #1
 80a2d64:	d0f7      	beq.n	80a2d56 <__aeabi_dmul+0x1c6>
 80a2d66:	ea43 0306 	orr.w	r3, r3, r6
 80a2d6a:	4770      	bx	lr
 80a2d6c:	ea94 0f0c 	teq	r4, ip
 80a2d70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d74:	bf18      	it	ne
 80a2d76:	ea95 0f0c 	teqne	r5, ip
 80a2d7a:	d00c      	beq.n	80a2d96 <__aeabi_dmul+0x206>
 80a2d7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d80:	bf18      	it	ne
 80a2d82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d86:	d1d1      	bne.n	80a2d2c <__aeabi_dmul+0x19c>
 80a2d88:	ea81 0103 	eor.w	r1, r1, r3
 80a2d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d90:	f04f 0000 	mov.w	r0, #0
 80a2d94:	bd70      	pop	{r4, r5, r6, pc}
 80a2d96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d9a:	bf06      	itte	eq
 80a2d9c:	4610      	moveq	r0, r2
 80a2d9e:	4619      	moveq	r1, r3
 80a2da0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2da4:	d019      	beq.n	80a2dda <__aeabi_dmul+0x24a>
 80a2da6:	ea94 0f0c 	teq	r4, ip
 80a2daa:	d102      	bne.n	80a2db2 <__aeabi_dmul+0x222>
 80a2dac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2db0:	d113      	bne.n	80a2dda <__aeabi_dmul+0x24a>
 80a2db2:	ea95 0f0c 	teq	r5, ip
 80a2db6:	d105      	bne.n	80a2dc4 <__aeabi_dmul+0x234>
 80a2db8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2dbc:	bf1c      	itt	ne
 80a2dbe:	4610      	movne	r0, r2
 80a2dc0:	4619      	movne	r1, r3
 80a2dc2:	d10a      	bne.n	80a2dda <__aeabi_dmul+0x24a>
 80a2dc4:	ea81 0103 	eor.w	r1, r1, r3
 80a2dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2dcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2dd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2dd4:	f04f 0000 	mov.w	r0, #0
 80a2dd8:	bd70      	pop	{r4, r5, r6, pc}
 80a2dda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2dde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2de2:	bd70      	pop	{r4, r5, r6, pc}

080a2de4 <__aeabi_ddiv>:
 80a2de4:	b570      	push	{r4, r5, r6, lr}
 80a2de6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2dea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2dee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2df2:	bf1d      	ittte	ne
 80a2df4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2df8:	ea94 0f0c 	teqne	r4, ip
 80a2dfc:	ea95 0f0c 	teqne	r5, ip
 80a2e00:	f000 f8a7 	bleq	80a2f52 <__aeabi_ddiv+0x16e>
 80a2e04:	eba4 0405 	sub.w	r4, r4, r5
 80a2e08:	ea81 0e03 	eor.w	lr, r1, r3
 80a2e0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2e10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2e14:	f000 8088 	beq.w	80a2f28 <__aeabi_ddiv+0x144>
 80a2e18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2e1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2e20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2e24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2e28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2e2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2e30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2e34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2e38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2e3c:	429d      	cmp	r5, r3
 80a2e3e:	bf08      	it	eq
 80a2e40:	4296      	cmpeq	r6, r2
 80a2e42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2e46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2e4a:	d202      	bcs.n	80a2e52 <__aeabi_ddiv+0x6e>
 80a2e4c:	085b      	lsrs	r3, r3, #1
 80a2e4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e52:	1ab6      	subs	r6, r6, r2
 80a2e54:	eb65 0503 	sbc.w	r5, r5, r3
 80a2e58:	085b      	lsrs	r3, r3, #1
 80a2e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2e62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2e66:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e6e:	bf22      	ittt	cs
 80a2e70:	1ab6      	subcs	r6, r6, r2
 80a2e72:	4675      	movcs	r5, lr
 80a2e74:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e78:	085b      	lsrs	r3, r3, #1
 80a2e7a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e86:	bf22      	ittt	cs
 80a2e88:	1ab6      	subcs	r6, r6, r2
 80a2e8a:	4675      	movcs	r5, lr
 80a2e8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e90:	085b      	lsrs	r3, r3, #1
 80a2e92:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e96:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e9e:	bf22      	ittt	cs
 80a2ea0:	1ab6      	subcs	r6, r6, r2
 80a2ea2:	4675      	movcs	r5, lr
 80a2ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2ea8:	085b      	lsrs	r3, r3, #1
 80a2eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2eae:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2eb6:	bf22      	ittt	cs
 80a2eb8:	1ab6      	subcs	r6, r6, r2
 80a2eba:	4675      	movcs	r5, lr
 80a2ebc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2ec0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2ec4:	d018      	beq.n	80a2ef8 <__aeabi_ddiv+0x114>
 80a2ec6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2eca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2ece:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2ed2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2ed6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2eda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2ede:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2ee2:	d1c0      	bne.n	80a2e66 <__aeabi_ddiv+0x82>
 80a2ee4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ee8:	d10b      	bne.n	80a2f02 <__aeabi_ddiv+0x11e>
 80a2eea:	ea41 0100 	orr.w	r1, r1, r0
 80a2eee:	f04f 0000 	mov.w	r0, #0
 80a2ef2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2ef6:	e7b6      	b.n	80a2e66 <__aeabi_ddiv+0x82>
 80a2ef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2efc:	bf04      	itt	eq
 80a2efe:	4301      	orreq	r1, r0
 80a2f00:	2000      	moveq	r0, #0
 80a2f02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2f06:	bf88      	it	hi
 80a2f08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2f0c:	f63f aeaf 	bhi.w	80a2c6e <__aeabi_dmul+0xde>
 80a2f10:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2f14:	bf04      	itt	eq
 80a2f16:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2f1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2f1e:	f150 0000 	adcs.w	r0, r0, #0
 80a2f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f26:	bd70      	pop	{r4, r5, r6, pc}
 80a2f28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2f2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2f30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2f34:	bfc2      	ittt	gt
 80a2f36:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2f3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2f3e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f44:	f04f 0e00 	mov.w	lr, #0
 80a2f48:	3c01      	subs	r4, #1
 80a2f4a:	e690      	b.n	80a2c6e <__aeabi_dmul+0xde>
 80a2f4c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2f50:	e68d      	b.n	80a2c6e <__aeabi_dmul+0xde>
 80a2f52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2f56:	ea94 0f0c 	teq	r4, ip
 80a2f5a:	bf08      	it	eq
 80a2f5c:	ea95 0f0c 	teqeq	r5, ip
 80a2f60:	f43f af3b 	beq.w	80a2dda <__aeabi_dmul+0x24a>
 80a2f64:	ea94 0f0c 	teq	r4, ip
 80a2f68:	d10a      	bne.n	80a2f80 <__aeabi_ddiv+0x19c>
 80a2f6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f6e:	f47f af34 	bne.w	80a2dda <__aeabi_dmul+0x24a>
 80a2f72:	ea95 0f0c 	teq	r5, ip
 80a2f76:	f47f af25 	bne.w	80a2dc4 <__aeabi_dmul+0x234>
 80a2f7a:	4610      	mov	r0, r2
 80a2f7c:	4619      	mov	r1, r3
 80a2f7e:	e72c      	b.n	80a2dda <__aeabi_dmul+0x24a>
 80a2f80:	ea95 0f0c 	teq	r5, ip
 80a2f84:	d106      	bne.n	80a2f94 <__aeabi_ddiv+0x1b0>
 80a2f86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f8a:	f43f aefd 	beq.w	80a2d88 <__aeabi_dmul+0x1f8>
 80a2f8e:	4610      	mov	r0, r2
 80a2f90:	4619      	mov	r1, r3
 80a2f92:	e722      	b.n	80a2dda <__aeabi_dmul+0x24a>
 80a2f94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f98:	bf18      	it	ne
 80a2f9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f9e:	f47f aec5 	bne.w	80a2d2c <__aeabi_dmul+0x19c>
 80a2fa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2fa6:	f47f af0d 	bne.w	80a2dc4 <__aeabi_dmul+0x234>
 80a2faa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2fae:	f47f aeeb 	bne.w	80a2d88 <__aeabi_dmul+0x1f8>
 80a2fb2:	e712      	b.n	80a2dda <__aeabi_dmul+0x24a>

080a2fb4 <__gedf2>:
 80a2fb4:	f04f 3cff 	mov.w	ip, #4294967295
 80a2fb8:	e006      	b.n	80a2fc8 <__cmpdf2+0x4>
 80a2fba:	bf00      	nop

080a2fbc <__ledf2>:
 80a2fbc:	f04f 0c01 	mov.w	ip, #1
 80a2fc0:	e002      	b.n	80a2fc8 <__cmpdf2+0x4>
 80a2fc2:	bf00      	nop

080a2fc4 <__cmpdf2>:
 80a2fc4:	f04f 0c01 	mov.w	ip, #1
 80a2fc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2fcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fd8:	bf18      	it	ne
 80a2fda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2fde:	d01b      	beq.n	80a3018 <__cmpdf2+0x54>
 80a2fe0:	b001      	add	sp, #4
 80a2fe2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2fe6:	bf0c      	ite	eq
 80a2fe8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2fec:	ea91 0f03 	teqne	r1, r3
 80a2ff0:	bf02      	ittt	eq
 80a2ff2:	ea90 0f02 	teqeq	r0, r2
 80a2ff6:	2000      	moveq	r0, #0
 80a2ff8:	4770      	bxeq	lr
 80a2ffa:	f110 0f00 	cmn.w	r0, #0
 80a2ffe:	ea91 0f03 	teq	r1, r3
 80a3002:	bf58      	it	pl
 80a3004:	4299      	cmppl	r1, r3
 80a3006:	bf08      	it	eq
 80a3008:	4290      	cmpeq	r0, r2
 80a300a:	bf2c      	ite	cs
 80a300c:	17d8      	asrcs	r0, r3, #31
 80a300e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3012:	f040 0001 	orr.w	r0, r0, #1
 80a3016:	4770      	bx	lr
 80a3018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a301c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3020:	d102      	bne.n	80a3028 <__cmpdf2+0x64>
 80a3022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3026:	d107      	bne.n	80a3038 <__cmpdf2+0x74>
 80a3028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a302c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3030:	d1d6      	bne.n	80a2fe0 <__cmpdf2+0x1c>
 80a3032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3036:	d0d3      	beq.n	80a2fe0 <__cmpdf2+0x1c>
 80a3038:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a303c:	4770      	bx	lr
 80a303e:	bf00      	nop

080a3040 <__aeabi_cdrcmple>:
 80a3040:	4684      	mov	ip, r0
 80a3042:	4610      	mov	r0, r2
 80a3044:	4662      	mov	r2, ip
 80a3046:	468c      	mov	ip, r1
 80a3048:	4619      	mov	r1, r3
 80a304a:	4663      	mov	r3, ip
 80a304c:	e000      	b.n	80a3050 <__aeabi_cdcmpeq>
 80a304e:	bf00      	nop

080a3050 <__aeabi_cdcmpeq>:
 80a3050:	b501      	push	{r0, lr}
 80a3052:	f7ff ffb7 	bl	80a2fc4 <__cmpdf2>
 80a3056:	2800      	cmp	r0, #0
 80a3058:	bf48      	it	mi
 80a305a:	f110 0f00 	cmnmi.w	r0, #0
 80a305e:	bd01      	pop	{r0, pc}

080a3060 <__aeabi_dcmpeq>:
 80a3060:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3064:	f7ff fff4 	bl	80a3050 <__aeabi_cdcmpeq>
 80a3068:	bf0c      	ite	eq
 80a306a:	2001      	moveq	r0, #1
 80a306c:	2000      	movne	r0, #0
 80a306e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3072:	bf00      	nop

080a3074 <__aeabi_dcmplt>:
 80a3074:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3078:	f7ff ffea 	bl	80a3050 <__aeabi_cdcmpeq>
 80a307c:	bf34      	ite	cc
 80a307e:	2001      	movcc	r0, #1
 80a3080:	2000      	movcs	r0, #0
 80a3082:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3086:	bf00      	nop

080a3088 <__aeabi_dcmple>:
 80a3088:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a308c:	f7ff ffe0 	bl	80a3050 <__aeabi_cdcmpeq>
 80a3090:	bf94      	ite	ls
 80a3092:	2001      	movls	r0, #1
 80a3094:	2000      	movhi	r0, #0
 80a3096:	f85d fb08 	ldr.w	pc, [sp], #8
 80a309a:	bf00      	nop

080a309c <__aeabi_dcmpge>:
 80a309c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30a0:	f7ff ffce 	bl	80a3040 <__aeabi_cdrcmple>
 80a30a4:	bf94      	ite	ls
 80a30a6:	2001      	movls	r0, #1
 80a30a8:	2000      	movhi	r0, #0
 80a30aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30ae:	bf00      	nop

080a30b0 <__aeabi_dcmpgt>:
 80a30b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a30b4:	f7ff ffc4 	bl	80a3040 <__aeabi_cdrcmple>
 80a30b8:	bf34      	ite	cc
 80a30ba:	2001      	movcc	r0, #1
 80a30bc:	2000      	movcs	r0, #0
 80a30be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a30c2:	bf00      	nop

080a30c4 <__aeabi_dcmpun>:
 80a30c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30cc:	d102      	bne.n	80a30d4 <__aeabi_dcmpun+0x10>
 80a30ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a30d2:	d10a      	bne.n	80a30ea <__aeabi_dcmpun+0x26>
 80a30d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a30d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30dc:	d102      	bne.n	80a30e4 <__aeabi_dcmpun+0x20>
 80a30de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a30e2:	d102      	bne.n	80a30ea <__aeabi_dcmpun+0x26>
 80a30e4:	f04f 0000 	mov.w	r0, #0
 80a30e8:	4770      	bx	lr
 80a30ea:	f04f 0001 	mov.w	r0, #1
 80a30ee:	4770      	bx	lr

080a30f0 <__aeabi_d2iz>:
 80a30f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a30f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30f8:	d215      	bcs.n	80a3126 <__aeabi_d2iz+0x36>
 80a30fa:	d511      	bpl.n	80a3120 <__aeabi_d2iz+0x30>
 80a30fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3100:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3104:	d912      	bls.n	80a312c <__aeabi_d2iz+0x3c>
 80a3106:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a310a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a310e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3116:	fa23 f002 	lsr.w	r0, r3, r2
 80a311a:	bf18      	it	ne
 80a311c:	4240      	negne	r0, r0
 80a311e:	4770      	bx	lr
 80a3120:	f04f 0000 	mov.w	r0, #0
 80a3124:	4770      	bx	lr
 80a3126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a312a:	d105      	bne.n	80a3138 <__aeabi_d2iz+0x48>
 80a312c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3130:	bf08      	it	eq
 80a3132:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3136:	4770      	bx	lr
 80a3138:	f04f 0000 	mov.w	r0, #0
 80a313c:	4770      	bx	lr
 80a313e:	bf00      	nop

080a3140 <__aeabi_d2uiz>:
 80a3140:	004a      	lsls	r2, r1, #1
 80a3142:	d211      	bcs.n	80a3168 <__aeabi_d2uiz+0x28>
 80a3144:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3148:	d211      	bcs.n	80a316e <__aeabi_d2uiz+0x2e>
 80a314a:	d50d      	bpl.n	80a3168 <__aeabi_d2uiz+0x28>
 80a314c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3150:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3154:	d40e      	bmi.n	80a3174 <__aeabi_d2uiz+0x34>
 80a3156:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a315a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a315e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3162:	fa23 f002 	lsr.w	r0, r3, r2
 80a3166:	4770      	bx	lr
 80a3168:	f04f 0000 	mov.w	r0, #0
 80a316c:	4770      	bx	lr
 80a316e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3172:	d102      	bne.n	80a317a <__aeabi_d2uiz+0x3a>
 80a3174:	f04f 30ff 	mov.w	r0, #4294967295
 80a3178:	4770      	bx	lr
 80a317a:	f04f 0000 	mov.w	r0, #0
 80a317e:	4770      	bx	lr

080a3180 <__aeabi_d2f>:
 80a3180:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3184:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3188:	bf24      	itt	cs
 80a318a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a318e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3192:	d90d      	bls.n	80a31b0 <__aeabi_d2f+0x30>
 80a3194:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3198:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a319c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a31a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a31a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a31a8:	bf08      	it	eq
 80a31aa:	f020 0001 	biceq.w	r0, r0, #1
 80a31ae:	4770      	bx	lr
 80a31b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a31b4:	d121      	bne.n	80a31fa <__aeabi_d2f+0x7a>
 80a31b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a31ba:	bfbc      	itt	lt
 80a31bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a31c0:	4770      	bxlt	lr
 80a31c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a31c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a31ca:	f1c2 0218 	rsb	r2, r2, #24
 80a31ce:	f1c2 0c20 	rsb	ip, r2, #32
 80a31d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a31d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a31da:	bf18      	it	ne
 80a31dc:	f040 0001 	orrne.w	r0, r0, #1
 80a31e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a31e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a31e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a31ec:	ea40 000c 	orr.w	r0, r0, ip
 80a31f0:	fa23 f302 	lsr.w	r3, r3, r2
 80a31f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a31f8:	e7cc      	b.n	80a3194 <__aeabi_d2f+0x14>
 80a31fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a31fe:	d107      	bne.n	80a3210 <__aeabi_d2f+0x90>
 80a3200:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3204:	bf1e      	ittt	ne
 80a3206:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a320a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a320e:	4770      	bxne	lr
 80a3210:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3214:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a321c:	4770      	bx	lr
 80a321e:	bf00      	nop

080a3220 <__aeabi_frsub>:
 80a3220:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3224:	e002      	b.n	80a322c <__addsf3>
 80a3226:	bf00      	nop

080a3228 <__aeabi_fsub>:
 80a3228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a322c <__addsf3>:
 80a322c:	0042      	lsls	r2, r0, #1
 80a322e:	bf1f      	itttt	ne
 80a3230:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3234:	ea92 0f03 	teqne	r2, r3
 80a3238:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a323c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3240:	d06a      	beq.n	80a3318 <__addsf3+0xec>
 80a3242:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3246:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a324a:	bfc1      	itttt	gt
 80a324c:	18d2      	addgt	r2, r2, r3
 80a324e:	4041      	eorgt	r1, r0
 80a3250:	4048      	eorgt	r0, r1
 80a3252:	4041      	eorgt	r1, r0
 80a3254:	bfb8      	it	lt
 80a3256:	425b      	neglt	r3, r3
 80a3258:	2b19      	cmp	r3, #25
 80a325a:	bf88      	it	hi
 80a325c:	4770      	bxhi	lr
 80a325e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3262:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3266:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a326a:	bf18      	it	ne
 80a326c:	4240      	negne	r0, r0
 80a326e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3272:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3276:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a327a:	bf18      	it	ne
 80a327c:	4249      	negne	r1, r1
 80a327e:	ea92 0f03 	teq	r2, r3
 80a3282:	d03f      	beq.n	80a3304 <__addsf3+0xd8>
 80a3284:	f1a2 0201 	sub.w	r2, r2, #1
 80a3288:	fa41 fc03 	asr.w	ip, r1, r3
 80a328c:	eb10 000c 	adds.w	r0, r0, ip
 80a3290:	f1c3 0320 	rsb	r3, r3, #32
 80a3294:	fa01 f103 	lsl.w	r1, r1, r3
 80a3298:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a329c:	d502      	bpl.n	80a32a4 <__addsf3+0x78>
 80a329e:	4249      	negs	r1, r1
 80a32a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a32a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a32a8:	d313      	bcc.n	80a32d2 <__addsf3+0xa6>
 80a32aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a32ae:	d306      	bcc.n	80a32be <__addsf3+0x92>
 80a32b0:	0840      	lsrs	r0, r0, #1
 80a32b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a32b6:	f102 0201 	add.w	r2, r2, #1
 80a32ba:	2afe      	cmp	r2, #254	; 0xfe
 80a32bc:	d251      	bcs.n	80a3362 <__addsf3+0x136>
 80a32be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a32c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a32c6:	bf08      	it	eq
 80a32c8:	f020 0001 	biceq.w	r0, r0, #1
 80a32cc:	ea40 0003 	orr.w	r0, r0, r3
 80a32d0:	4770      	bx	lr
 80a32d2:	0049      	lsls	r1, r1, #1
 80a32d4:	eb40 0000 	adc.w	r0, r0, r0
 80a32d8:	3a01      	subs	r2, #1
 80a32da:	bf28      	it	cs
 80a32dc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a32e0:	d2ed      	bcs.n	80a32be <__addsf3+0x92>
 80a32e2:	fab0 fc80 	clz	ip, r0
 80a32e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a32ea:	ebb2 020c 	subs.w	r2, r2, ip
 80a32ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80a32f2:	bfaa      	itet	ge
 80a32f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a32f8:	4252      	neglt	r2, r2
 80a32fa:	4318      	orrge	r0, r3
 80a32fc:	bfbc      	itt	lt
 80a32fe:	40d0      	lsrlt	r0, r2
 80a3300:	4318      	orrlt	r0, r3
 80a3302:	4770      	bx	lr
 80a3304:	f092 0f00 	teq	r2, #0
 80a3308:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a330c:	bf06      	itte	eq
 80a330e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3312:	3201      	addeq	r2, #1
 80a3314:	3b01      	subne	r3, #1
 80a3316:	e7b5      	b.n	80a3284 <__addsf3+0x58>
 80a3318:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a331c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3320:	bf18      	it	ne
 80a3322:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3326:	d021      	beq.n	80a336c <__addsf3+0x140>
 80a3328:	ea92 0f03 	teq	r2, r3
 80a332c:	d004      	beq.n	80a3338 <__addsf3+0x10c>
 80a332e:	f092 0f00 	teq	r2, #0
 80a3332:	bf08      	it	eq
 80a3334:	4608      	moveq	r0, r1
 80a3336:	4770      	bx	lr
 80a3338:	ea90 0f01 	teq	r0, r1
 80a333c:	bf1c      	itt	ne
 80a333e:	2000      	movne	r0, #0
 80a3340:	4770      	bxne	lr
 80a3342:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3346:	d104      	bne.n	80a3352 <__addsf3+0x126>
 80a3348:	0040      	lsls	r0, r0, #1
 80a334a:	bf28      	it	cs
 80a334c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3350:	4770      	bx	lr
 80a3352:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3356:	bf3c      	itt	cc
 80a3358:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a335c:	4770      	bxcc	lr
 80a335e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3362:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3366:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a336a:	4770      	bx	lr
 80a336c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3370:	bf16      	itet	ne
 80a3372:	4608      	movne	r0, r1
 80a3374:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3378:	4601      	movne	r1, r0
 80a337a:	0242      	lsls	r2, r0, #9
 80a337c:	bf06      	itte	eq
 80a337e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3382:	ea90 0f01 	teqeq	r0, r1
 80a3386:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a338a:	4770      	bx	lr

080a338c <__aeabi_ui2f>:
 80a338c:	f04f 0300 	mov.w	r3, #0
 80a3390:	e004      	b.n	80a339c <__aeabi_i2f+0x8>
 80a3392:	bf00      	nop

080a3394 <__aeabi_i2f>:
 80a3394:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3398:	bf48      	it	mi
 80a339a:	4240      	negmi	r0, r0
 80a339c:	ea5f 0c00 	movs.w	ip, r0
 80a33a0:	bf08      	it	eq
 80a33a2:	4770      	bxeq	lr
 80a33a4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a33a8:	4601      	mov	r1, r0
 80a33aa:	f04f 0000 	mov.w	r0, #0
 80a33ae:	e01c      	b.n	80a33ea <__aeabi_l2f+0x2a>

080a33b0 <__aeabi_ul2f>:
 80a33b0:	ea50 0201 	orrs.w	r2, r0, r1
 80a33b4:	bf08      	it	eq
 80a33b6:	4770      	bxeq	lr
 80a33b8:	f04f 0300 	mov.w	r3, #0
 80a33bc:	e00a      	b.n	80a33d4 <__aeabi_l2f+0x14>
 80a33be:	bf00      	nop

080a33c0 <__aeabi_l2f>:
 80a33c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a33c4:	bf08      	it	eq
 80a33c6:	4770      	bxeq	lr
 80a33c8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a33cc:	d502      	bpl.n	80a33d4 <__aeabi_l2f+0x14>
 80a33ce:	4240      	negs	r0, r0
 80a33d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a33d4:	ea5f 0c01 	movs.w	ip, r1
 80a33d8:	bf02      	ittt	eq
 80a33da:	4684      	moveq	ip, r0
 80a33dc:	4601      	moveq	r1, r0
 80a33de:	2000      	moveq	r0, #0
 80a33e0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a33e4:	bf08      	it	eq
 80a33e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a33ea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a33ee:	fabc f28c 	clz	r2, ip
 80a33f2:	3a08      	subs	r2, #8
 80a33f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a33f8:	db10      	blt.n	80a341c <__aeabi_l2f+0x5c>
 80a33fa:	fa01 fc02 	lsl.w	ip, r1, r2
 80a33fe:	4463      	add	r3, ip
 80a3400:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3404:	f1c2 0220 	rsb	r2, r2, #32
 80a3408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a340c:	fa20 f202 	lsr.w	r2, r0, r2
 80a3410:	eb43 0002 	adc.w	r0, r3, r2
 80a3414:	bf08      	it	eq
 80a3416:	f020 0001 	biceq.w	r0, r0, #1
 80a341a:	4770      	bx	lr
 80a341c:	f102 0220 	add.w	r2, r2, #32
 80a3420:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3424:	f1c2 0220 	rsb	r2, r2, #32
 80a3428:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a342c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3430:	eb43 0002 	adc.w	r0, r3, r2
 80a3434:	bf08      	it	eq
 80a3436:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a343a:	4770      	bx	lr

080a343c <atexit>:
 80a343c:	2300      	movs	r3, #0
 80a343e:	4601      	mov	r1, r0
 80a3440:	461a      	mov	r2, r3
 80a3442:	4618      	mov	r0, r3
 80a3444:	f000 b84c 	b.w	80a34e0 <__register_exitproc>

080a3448 <memcpy>:
 80a3448:	440a      	add	r2, r1
 80a344a:	4291      	cmp	r1, r2
 80a344c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3450:	d100      	bne.n	80a3454 <memcpy+0xc>
 80a3452:	4770      	bx	lr
 80a3454:	b510      	push	{r4, lr}
 80a3456:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a345a:	4291      	cmp	r1, r2
 80a345c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3460:	d1f9      	bne.n	80a3456 <memcpy+0xe>
 80a3462:	bd10      	pop	{r4, pc}

080a3464 <memset>:
 80a3464:	4603      	mov	r3, r0
 80a3466:	4402      	add	r2, r0
 80a3468:	4293      	cmp	r3, r2
 80a346a:	d100      	bne.n	80a346e <memset+0xa>
 80a346c:	4770      	bx	lr
 80a346e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3472:	e7f9      	b.n	80a3468 <memset+0x4>

080a3474 <srand>:
 80a3474:	b538      	push	{r3, r4, r5, lr}
 80a3476:	4b10      	ldr	r3, [pc, #64]	; (80a34b8 <srand+0x44>)
 80a3478:	4604      	mov	r4, r0
 80a347a:	681d      	ldr	r5, [r3, #0]
 80a347c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a347e:	b9b3      	cbnz	r3, 80a34ae <srand+0x3a>
 80a3480:	2018      	movs	r0, #24
 80a3482:	f7fe fba5 	bl	80a1bd0 <malloc>
 80a3486:	4602      	mov	r2, r0
 80a3488:	63a8      	str	r0, [r5, #56]	; 0x38
 80a348a:	b920      	cbnz	r0, 80a3496 <srand+0x22>
 80a348c:	2142      	movs	r1, #66	; 0x42
 80a348e:	4b0b      	ldr	r3, [pc, #44]	; (80a34bc <srand+0x48>)
 80a3490:	480b      	ldr	r0, [pc, #44]	; (80a34c0 <srand+0x4c>)
 80a3492:	f7fe fbad 	bl	80a1bf0 <__assert_func>
 80a3496:	490b      	ldr	r1, [pc, #44]	; (80a34c4 <srand+0x50>)
 80a3498:	4b0b      	ldr	r3, [pc, #44]	; (80a34c8 <srand+0x54>)
 80a349a:	e9c0 1300 	strd	r1, r3, [r0]
 80a349e:	4b0b      	ldr	r3, [pc, #44]	; (80a34cc <srand+0x58>)
 80a34a0:	2100      	movs	r1, #0
 80a34a2:	6083      	str	r3, [r0, #8]
 80a34a4:	230b      	movs	r3, #11
 80a34a6:	8183      	strh	r3, [r0, #12]
 80a34a8:	2001      	movs	r0, #1
 80a34aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a34ae:	2200      	movs	r2, #0
 80a34b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a34b2:	611c      	str	r4, [r3, #16]
 80a34b4:	615a      	str	r2, [r3, #20]
 80a34b6:	bd38      	pop	{r3, r4, r5, pc}
 80a34b8:	20000008 	.word	0x20000008
 80a34bc:	080a377d 	.word	0x080a377d
 80a34c0:	080a3794 	.word	0x080a3794
 80a34c4:	abcd330e 	.word	0xabcd330e
 80a34c8:	e66d1234 	.word	0xe66d1234
 80a34cc:	0005deec 	.word	0x0005deec

080a34d0 <strlen>:
 80a34d0:	4603      	mov	r3, r0
 80a34d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a34d6:	2a00      	cmp	r2, #0
 80a34d8:	d1fb      	bne.n	80a34d2 <strlen+0x2>
 80a34da:	1a18      	subs	r0, r3, r0
 80a34dc:	3801      	subs	r0, #1
 80a34de:	4770      	bx	lr

080a34e0 <__register_exitproc>:
 80a34e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a34e4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a3594 <__register_exitproc+0xb4>
 80a34e8:	4606      	mov	r6, r0
 80a34ea:	f8d8 0000 	ldr.w	r0, [r8]
 80a34ee:	461f      	mov	r7, r3
 80a34f0:	460d      	mov	r5, r1
 80a34f2:	4691      	mov	r9, r2
 80a34f4:	f000 f858 	bl	80a35a8 <__retarget_lock_acquire_recursive>
 80a34f8:	4b27      	ldr	r3, [pc, #156]	; (80a3598 <__register_exitproc+0xb8>)
 80a34fa:	681c      	ldr	r4, [r3, #0]
 80a34fc:	b934      	cbnz	r4, 80a350c <__register_exitproc+0x2c>
 80a34fe:	4c27      	ldr	r4, [pc, #156]	; (80a359c <__register_exitproc+0xbc>)
 80a3500:	601c      	str	r4, [r3, #0]
 80a3502:	4b27      	ldr	r3, [pc, #156]	; (80a35a0 <__register_exitproc+0xc0>)
 80a3504:	b113      	cbz	r3, 80a350c <__register_exitproc+0x2c>
 80a3506:	681b      	ldr	r3, [r3, #0]
 80a3508:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a350c:	6863      	ldr	r3, [r4, #4]
 80a350e:	2b1f      	cmp	r3, #31
 80a3510:	dd07      	ble.n	80a3522 <__register_exitproc+0x42>
 80a3512:	f8d8 0000 	ldr.w	r0, [r8]
 80a3516:	f000 f849 	bl	80a35ac <__retarget_lock_release_recursive>
 80a351a:	f04f 30ff 	mov.w	r0, #4294967295
 80a351e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3522:	b35e      	cbz	r6, 80a357c <__register_exitproc+0x9c>
 80a3524:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3528:	b988      	cbnz	r0, 80a354e <__register_exitproc+0x6e>
 80a352a:	4b1e      	ldr	r3, [pc, #120]	; (80a35a4 <__register_exitproc+0xc4>)
 80a352c:	b923      	cbnz	r3, 80a3538 <__register_exitproc+0x58>
 80a352e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3532:	f000 f83a 	bl	80a35aa <__retarget_lock_release>
 80a3536:	e7f0      	b.n	80a351a <__register_exitproc+0x3a>
 80a3538:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a353c:	f7fe fb48 	bl	80a1bd0 <malloc>
 80a3540:	2800      	cmp	r0, #0
 80a3542:	d0f4      	beq.n	80a352e <__register_exitproc+0x4e>
 80a3544:	2300      	movs	r3, #0
 80a3546:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a354a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a354e:	2201      	movs	r2, #1
 80a3550:	6863      	ldr	r3, [r4, #4]
 80a3552:	2e02      	cmp	r6, #2
 80a3554:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3558:	fa02 f203 	lsl.w	r2, r2, r3
 80a355c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3560:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3564:	ea43 0302 	orr.w	r3, r3, r2
 80a3568:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a356c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3570:	bf02      	ittt	eq
 80a3572:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a3576:	4313      	orreq	r3, r2
 80a3578:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a357c:	6863      	ldr	r3, [r4, #4]
 80a357e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3582:	1c5a      	adds	r2, r3, #1
 80a3584:	3302      	adds	r3, #2
 80a3586:	6062      	str	r2, [r4, #4]
 80a3588:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a358c:	f000 f80e 	bl	80a35ac <__retarget_lock_release_recursive>
 80a3590:	2000      	movs	r0, #0
 80a3592:	e7c4      	b.n	80a351e <__register_exitproc+0x3e>
 80a3594:	2000006c 	.word	0x2000006c
 80a3598:	20000510 	.word	0x20000510
 80a359c:	20000484 	.word	0x20000484
 80a35a0:	00000000 	.word	0x00000000
 80a35a4:	080a1bd1 	.word	0x080a1bd1

080a35a8 <__retarget_lock_acquire_recursive>:
 80a35a8:	4770      	bx	lr

080a35aa <__retarget_lock_release>:
 80a35aa:	4770      	bx	lr

080a35ac <__retarget_lock_release_recursive>:
 80a35ac:	4770      	bx	lr

080a35ae <link_code_end>:
	...

080a35b0 <dynalib_user>:
 80a35b0:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a35c0:	0000 0000 4142 0043 514d 322d 5320 6e65     ....BAC.MQ-2 Sen
 80a35d0:	6f73 2072 6144 6174 0a3a 5200 7761 5620     sor Data:..Raw V
 80a35e0:	6c61 6575 203a 5600 6c6f 6174 6567 203a     alue: .Voltage: 
 80a35f0:	2000 0056 5050 3a4d 0020 7020 6d70 4200     . V.PPM: . ppm.B
 80a3600:	7475 6f74 206e 7270 7365 0073               utton press.

080a360c <CSWTCH.215>:
 80a360c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a361c:	0050 0000                                   P...

080a3620 <_ZTV7rgb_lcd>:
	...
 80a3628:	163d 080a 163f 080a 167f 080a 1c55 080a     =...?.......U...
 80a3638:	616e 006e 6e69 0066 766f 0066 002e 7061     nan.inf.ovf...ap
 80a3648:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
 80a3658:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a3668 <_ZTV9IPAddress>:
	...
 80a3670:	208b 080a 2089 080a 20bd 080a               . ... ... ..

080a367c <_ZTV9USBSerial>:
	...
 80a3684:	2157 080a 21bd 080a 2195 080a 1c55 080a     W!...!...!..U...
 80a3694:	2187 080a 2159 080a 2169 080a 21b7 080a     .!..Y!..i!...!..
 80a36a4:	2179 080a 2151 080a                         y!..Q!..

080a36ac <_ZTV11USARTSerial>:
	...
 80a36b4:	22e5 080a 234d 080a 2329 080a 1c55 080a     ."..M#..)#..U...
 80a36c4:	22f9 080a 2315 080a 2307 080a 2323 080a     ."...#...#..##..
 80a36d4:	22e7 080a 22eb 080a                         ."..."..

080a36dc <_ZTV7TwoWire>:
	...
 80a36e4:	2385 080a 23cf 080a 23a7 080a 2387 080a     .#...#...#...#..
 80a36f4:	23af 080a 23b7 080a 23bf 080a 23c7 080a     .#...#...#...#..

080a3704 <_ZTVN5spark9WiFiClassE>:
	...
 80a370c:	24cb 080a 24c1 080a 24b7 080a 2429 080a     .$...$...$..)$..
 80a371c:	24ab 080a 249f 080a 2529 080a 2531 080a     .$...$..)%..1%..
 80a372c:	2493 080a 248b 080a 2481 080a 2477 080a     .$...$...$..w$..
 80a373c:	2433 080a                                   3$..

080a3740 <_ZTVN5spark12NetworkClassE>:
	...
 80a3748:	24e9 080a 24f3 080a 24fd 080a 2507 080a     .$...$...$...%..
 80a3758:	2511 080a 251d 080a 2529 080a 2531 080a     .%...%..)%..1%..
 80a3768:	2539 080a 2545 080a 254d 080a 2557 080a     9%..E%..M%..W%..
 80a3778:	2561 080a                                   a%..

080a377c <_ZSt7nothrow>:
 80a377c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a378c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a379c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a37ac:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a37bc:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a37cc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a37dc:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a37ec:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a37fc:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a380c:	646e 632e                                    nd.c.

080a3811 <link_const_variable_data_end>:
 80a3811:	00          	.byte	0x00
	...

080a3814 <link_constructors_location>:
 80a3814:	080a0381 	.word	0x080a0381
 80a3818:	080a162d 	.word	0x080a162d
 80a381c:	080a1c31 	.word	0x080a1c31
 80a3820:	080a1ef1 	.word	0x080a1ef1
 80a3824:	080a1f01 	.word	0x080a1f01
 80a3828:	080a1f1d 	.word	0x080a1f1d
 80a382c:	080a24d5 	.word	0x080a24d5
 80a3830:	080a25b1 	.word	0x080a25b1
 80a3834:	080a2781 	.word	0x080a2781

080a3838 <link_constructors_end>:
	...
