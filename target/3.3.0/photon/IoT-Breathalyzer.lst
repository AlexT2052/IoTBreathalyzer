
c:/Users/alext/gitRepositories/IoT-Breathalyzer/target/3.3.0/photon/IoT-Breathalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004930  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4950  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a4954  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000508  20000074  20000074  00040074  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a49c8  080a49c8  000349c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a49f0  080a49f0  000349f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cb92c  00000000  00000000  000349f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012094  00000000  00000000  00100320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001ce29  00000000  00000000  001123b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002190  00000000  00000000  0012f1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005290  00000000  00000000  0013136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002a905  00000000  00000000  001365fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00031714  00000000  00000000  00160f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000bbaf3  00000000  00000000  00192616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00005988  00000000  00000000  0024e10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fa47 	bl	80a44c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fa4f 	bl	80a44e0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4954 	.word	0x080a4954
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000074 	.word	0x20000074
 80a0058:	20000579 	.word	0x20000579
 80a005c:	20000579 	.word	0x20000579

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fbf3 	bl	80a284c <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a4928 	.word	0x080a4928
 80a0084:	080a494c 	.word	0x080a494c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b852 	b.w	80a0130 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f977 	bl	80a0380 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 bb91 	b.w	80a27bc <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f002 b8cb 	b.w	80a2234 <malloc>

080a009e <_Znaj>:
 80a009e:	f002 b8c9 	b.w	80a2234 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f002 b8cf 	b.w	80a2244 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z9handleLEDii.part.0>:
    lcd.setCursor(8, AVG_ROW);
    lcd.print(avgBAC);
  }
}

void handleLED(int timeDifference, int color) {
 80a00b8:	b410      	push	{r4}

  if(timeDifference != SOLID) {
    if(currentTime > nextLedFlashTime) {
 80a00ba:	4b0b      	ldr	r3, [pc, #44]	; (80a00e8 <_Z9handleLEDii.part.0+0x30>)
 80a00bc:	4c0b      	ldr	r4, [pc, #44]	; (80a00ec <_Z9handleLEDii.part.0+0x34>)
 80a00be:	681b      	ldr	r3, [r3, #0]
 80a00c0:	6821      	ldr	r1, [r4, #0]
 80a00c2:	4a0b      	ldr	r2, [pc, #44]	; (80a00f0 <_Z9handleLEDii.part.0+0x38>)
 80a00c4:	428b      	cmp	r3, r1
 80a00c6:	d906      	bls.n	80a00d6 <_Z9handleLEDii.part.0+0x1e>
      ledFlashOn = !ledFlashOn;
 80a00c8:	6813      	ldr	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00ca:	31c8      	adds	r1, #200	; 0xc8
      ledFlashOn = !ledFlashOn;
 80a00cc:	fab3 f383 	clz	r3, r3
 80a00d0:	095b      	lsrs	r3, r3, #5
 80a00d2:	6013      	str	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00d4:	6021      	str	r1, [r4, #0]
    }

    if (ledFlashOn) {
 80a00d6:	6812      	ldr	r2, [r2, #0]
 80a00d8:	b102      	cbz	r2, 80a00dc <_Z9handleLEDii.part.0+0x24>
      strip.setPixelColor(LED_INDEX, color);
 80a00da:	4602      	mov	r2, r0
 80a00dc:	2100      	movs	r1, #0
 80a00de:	4805      	ldr	r0, [pc, #20]	; (80a00f4 <_Z9handleLEDii.part.0+0x3c>)
      strip.setPixelColor(LED_INDEX, 0);
    }
  } else {
    strip.setPixelColor(LED_INDEX, color);
  }
}
 80a00e0:	bc10      	pop	{r4}
      strip.setPixelColor(LED_INDEX, color);
 80a00e2:	f001 bd65 	b.w	80a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00e6:	bf00      	nop
 80a00e8:	200000ac 	.word	0x200000ac
 80a00ec:	200000e8 	.word	0x200000e8
 80a00f0:	200000d8 	.word	0x200000d8
 80a00f4:	200000fc 	.word	0x200000fc

080a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00f8:	b570      	push	{r4, r5, r6, lr}
 80a00fa:	4606      	mov	r6, r0
 80a00fc:	460c      	mov	r4, r1
{
    if (base == 0) {
 80a00fe:	4615      	mov	r5, r2
 80a0100:	b92a      	cbnz	r2, 80a010e <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 80a0102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 80a0106:	6803      	ldr	r3, [r0, #0]
 80a0108:	b2c9      	uxtb	r1, r1
 80a010a:	689b      	ldr	r3, [r3, #8]
 80a010c:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80a010e:	2900      	cmp	r1, #0
 80a0110:	da0b      	bge.n	80a012a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
 80a0112:	2a0a      	cmp	r2, #10
 80a0114:	d109      	bne.n	80a012a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 80a0116:	212d      	movs	r1, #45	; 0x2d
 80a0118:	f002 f9c9 	bl	80a24ae <_ZN5Print5printEc>
            val = -n;
 80a011c:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a011e:	4630      	mov	r0, r6
 80a0120:	b2ea      	uxtb	r2, r5
}
 80a0122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 80a0126:	f002 b9d1 	b.w	80a24cc <_ZN5Print11printNumberEmh>
            val = n;
 80a012a:	4621      	mov	r1, r4
 80a012c:	e7f7      	b.n	80a011e <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>
	...

080a0130 <setup>:
void setup() {
 80a0130:	b510      	push	{r4, lr}
  Serial.begin(9600);     // Initialize the Serial communication
 80a0132:	f002 ff29 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a0136:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a013a:	f002 ff0b 	bl	80a2f54 <_ZN9USBSerial5beginEl>
  lcd.begin(16, 2);
 80a013e:	4c1c      	ldr	r4, [pc, #112]	; (80a01b0 <setup+0x80>)
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a0140:	2103      	movs	r1, #3
 80a0142:	2002      	movs	r0, #2
 80a0144:	f003 f94c 	bl	80a33e0 <pinMode>
  strip.begin();
 80a0148:	481a      	ldr	r0, [pc, #104]	; (80a01b4 <setup+0x84>)
 80a014a:	f000 fc4f 	bl	80a09ec <_ZN17Adafruit_NeoPixel5beginEv>
  lcd.begin(16, 2);
 80a014e:	4620      	mov	r0, r4
 80a0150:	2300      	movs	r3, #0
 80a0152:	2202      	movs	r2, #2
 80a0154:	2110      	movs	r1, #16
 80a0156:	f001 fe12 	bl	80a1d7e <_ZN7rgb_lcd5beginEhhh>
  lcd.setRGB(displayBacklightR, displayBacklightG, displayBacklightB);
 80a015a:	2300      	movs	r3, #0
 80a015c:	4620      	mov	r0, r4
 80a015e:	461a      	mov	r2, r3
 80a0160:	21ff      	movs	r1, #255	; 0xff
 80a0162:	f001 fdf8 	bl	80a1d56 <_ZN7rgb_lcd6setRGBEhhh>
  lcd.setCursor(0, 0);
 80a0166:	2200      	movs	r2, #0
 80a0168:	4620      	mov	r0, r4
 80a016a:	4611      	mov	r1, r2
 80a016c:	f001 fdbe 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
  lcd.print("WARMING UP...");
 80a0170:	4620      	mov	r0, r4
  deviceMode = WARMING_UP;
 80a0172:	2400      	movs	r4, #0
  lcd.print("WARMING UP...");
 80a0174:	4910      	ldr	r1, [pc, #64]	; (80a01b8 <setup+0x88>)
 80a0176:	f002 f996 	bl	80a24a6 <_ZN5Print5printEPKc>
  deviceMode = WARMING_UP;
 80a017a:	4b10      	ldr	r3, [pc, #64]	; (80a01bc <setup+0x8c>)
 80a017c:	701c      	strb	r4, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017e:	f001 feab 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
  stateChangeTime = millis() + WARMING_UP_MODE_TIME;
 80a0182:	4b0f      	ldr	r3, [pc, #60]	; (80a01c0 <setup+0x90>)
 80a0184:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80a0188:	3008      	adds	r0, #8
 80a018a:	6018      	str	r0, [r3, #0]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a018c:	2202      	movs	r2, #2
 80a018e:	4623      	mov	r3, r4
 80a0190:	490c      	ldr	r1, [pc, #48]	; (80a01c4 <setup+0x94>)
 80a0192:	480d      	ldr	r0, [pc, #52]	; (80a01c8 <setup+0x98>)
 80a0194:	f002 f82e 	bl	80a21f4 <spark_variable>
 80a0198:	4623      	mov	r3, r4
 80a019a:	2202      	movs	r2, #2
 80a019c:	490b      	ldr	r1, [pc, #44]	; (80a01cc <setup+0x9c>)
 80a019e:	480c      	ldr	r0, [pc, #48]	; (80a01d0 <setup+0xa0>)
 80a01a0:	f002 f828 	bl	80a21f4 <spark_variable>
}
 80a01a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(100);
 80a01a8:	2064      	movs	r0, #100	; 0x64
 80a01aa:	f002 baad 	b.w	80a2708 <delay>
 80a01ae:	bf00      	nop
 80a01b0:	200000c8 	.word	0x200000c8
 80a01b4:	200000fc 	.word	0x200000fc
 80a01b8:	080a4678 	.word	0x080a4678
 80a01bc:	200000b4 	.word	0x200000b4
 80a01c0:	200000f8 	.word	0x200000f8
 80a01c4:	20000094 	.word	0x20000094
 80a01c8:	080a4686 	.word	0x080a4686
 80a01cc:	200000e0 	.word	0x200000e0
 80a01d0:	080a468d 	.word	0x080a468d

080a01d4 <_Z13updateDisplayv>:
void updateDisplay() {
 80a01d4:	b510      	push	{r4, lr}
  lcd.clear();
 80a01d6:	482d      	ldr	r0, [pc, #180]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a01d8:	f001 fd7e 	bl	80a1cd8 <_ZN7rgb_lcd5clearEv>
  if(displayMode == PPM) {
 80a01dc:	4b2c      	ldr	r3, [pc, #176]	; (80a0290 <_Z13updateDisplayv+0xbc>)
 80a01de:	781c      	ldrb	r4, [r3, #0]
 80a01e0:	bb4c      	cbnz	r4, 80a0236 <_Z13updateDisplayv+0x62>
    lcd.setCursor(0, MAX_ROW);
 80a01e2:	4622      	mov	r2, r4
 80a01e4:	4621      	mov	r1, r4
 80a01e6:	4829      	ldr	r0, [pc, #164]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a01e8:	f001 fd80 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX PPM:");
 80a01ec:	4929      	ldr	r1, [pc, #164]	; (80a0294 <_Z13updateDisplayv+0xc0>)
 80a01ee:	4827      	ldr	r0, [pc, #156]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a01f0:	f002 f959 	bl	80a24a6 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a01f4:	4622      	mov	r2, r4
 80a01f6:	2108      	movs	r1, #8
 80a01f8:	4824      	ldr	r0, [pc, #144]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a01fa:	f001 fd77 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxPPM);
 80a01fe:	4b26      	ldr	r3, [pc, #152]	; (80a0298 <_Z13updateDisplayv+0xc4>)
 80a0200:	220a      	movs	r2, #10
 80a0202:	6819      	ldr	r1, [r3, #0]
 80a0204:	4821      	ldr	r0, [pc, #132]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0206:	f7ff ff77 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, AVG_ROW);
 80a020a:	2201      	movs	r2, #1
 80a020c:	4621      	mov	r1, r4
 80a020e:	481f      	ldr	r0, [pc, #124]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0210:	f001 fd6c 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG PPM:");
 80a0214:	4921      	ldr	r1, [pc, #132]	; (80a029c <_Z13updateDisplayv+0xc8>)
 80a0216:	481d      	ldr	r0, [pc, #116]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0218:	f002 f945 	bl	80a24a6 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a021c:	2201      	movs	r2, #1
 80a021e:	2108      	movs	r1, #8
 80a0220:	481a      	ldr	r0, [pc, #104]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0222:	f001 fd63 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
}
 80a0226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(avgPPM);
 80a022a:	4b1d      	ldr	r3, [pc, #116]	; (80a02a0 <_Z13updateDisplayv+0xcc>)
 80a022c:	220a      	movs	r2, #10
 80a022e:	6819      	ldr	r1, [r3, #0]
 80a0230:	4816      	ldr	r0, [pc, #88]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0232:	f7ff bf61 	b.w	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, MAX_ROW);
 80a0236:	2200      	movs	r2, #0
 80a0238:	4814      	ldr	r0, [pc, #80]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a023a:	4611      	mov	r1, r2
 80a023c:	f001 fd56 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX BAC:");
 80a0240:	4918      	ldr	r1, [pc, #96]	; (80a02a4 <_Z13updateDisplayv+0xd0>)
 80a0242:	4812      	ldr	r0, [pc, #72]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0244:	f002 f92f 	bl	80a24a6 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a0248:	2200      	movs	r2, #0
 80a024a:	2108      	movs	r1, #8
 80a024c:	480f      	ldr	r0, [pc, #60]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a024e:	f001 fd4d 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxBAC);
 80a0252:	4b15      	ldr	r3, [pc, #84]	; (80a02a8 <_Z13updateDisplayv+0xd4>)
 80a0254:	2202      	movs	r2, #2
 80a0256:	6819      	ldr	r1, [r3, #0]
 80a0258:	480c      	ldr	r0, [pc, #48]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a025a:	f002 fa17 	bl	80a268c <_ZN5Print5printEfi>
    lcd.setCursor(0, AVG_ROW);
 80a025e:	2201      	movs	r2, #1
 80a0260:	2100      	movs	r1, #0
 80a0262:	480a      	ldr	r0, [pc, #40]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0264:	f001 fd42 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG BAC:");
 80a0268:	4910      	ldr	r1, [pc, #64]	; (80a02ac <_Z13updateDisplayv+0xd8>)
 80a026a:	4808      	ldr	r0, [pc, #32]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a026c:	f002 f91b 	bl	80a24a6 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a0270:	2201      	movs	r2, #1
 80a0272:	2108      	movs	r1, #8
 80a0274:	4805      	ldr	r0, [pc, #20]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0276:	f001 fd39 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
}
 80a027a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(avgBAC);
 80a027e:	4b0c      	ldr	r3, [pc, #48]	; (80a02b0 <_Z13updateDisplayv+0xdc>)
 80a0280:	2202      	movs	r2, #2
 80a0282:	6819      	ldr	r1, [r3, #0]
 80a0284:	4801      	ldr	r0, [pc, #4]	; (80a028c <_Z13updateDisplayv+0xb8>)
 80a0286:	f002 ba01 	b.w	80a268c <_ZN5Print5printEfi>
 80a028a:	bf00      	nop
 80a028c:	200000c8 	.word	0x200000c8
 80a0290:	200000b5 	.word	0x200000b5
 80a0294:	080a4694 	.word	0x080a4694
 80a0298:	200000e0 	.word	0x200000e0
 80a029c:	080a469d 	.word	0x080a469d
 80a02a0:	20000094 	.word	0x20000094
 80a02a4:	080a46a6 	.word	0x080a46a6
 80a02a8:	200000dc 	.word	0x200000dc
 80a02ac:	080a46af 	.word	0x080a46af
 80a02b0:	20000090 	.word	0x20000090

080a02b4 <_Z9handleLEDii>:
void handleLED(int timeDifference, int color) {
 80a02b4:	460a      	mov	r2, r1
  if(timeDifference != SOLID) {
 80a02b6:	4601      	mov	r1, r0
 80a02b8:	b110      	cbz	r0, 80a02c0 <_Z9handleLEDii+0xc>
 80a02ba:	4610      	mov	r0, r2
 80a02bc:	f7ff befc 	b.w	80a00b8 <_Z9handleLEDii.part.0>
    strip.setPixelColor(LED_INDEX, color);
 80a02c0:	4801      	ldr	r0, [pc, #4]	; (80a02c8 <_Z9handleLEDii+0x14>)
 80a02c2:	f001 bc75 	b.w	80a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a02c6:	bf00      	nop
 80a02c8:	200000fc 	.word	0x200000fc

080a02cc <_Z11checkButtoni>:

// Return true if falling edge of button press
BUTTON_ACTION checkButton(int buttonReading) {
 80a02cc:	b538      	push	{r3, r4, r5, lr}
  // Serial.print("Reading: ");
  // Serial.println(buttonReading);
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a02ce:	4d1c      	ldr	r5, [pc, #112]	; (80a0340 <_Z11checkButtoni+0x74>)
BUTTON_ACTION checkButton(int buttonReading) {
 80a02d0:	4604      	mov	r4, r0
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a02d2:	782b      	ldrb	r3, [r5, #0]
 80a02d4:	b96b      	cbnz	r3, 80a02f2 <_Z11checkButtoni+0x26>
 80a02d6:	2801      	cmp	r0, #1
 80a02d8:	d12c      	bne.n	80a0334 <_Z11checkButtoni+0x68>
 80a02da:	4b1a      	ldr	r3, [pc, #104]	; (80a0344 <_Z11checkButtoni+0x78>)
 80a02dc:	681b      	ldr	r3, [r3, #0]
 80a02de:	bb4b      	cbnz	r3, 80a0334 <_Z11checkButtoni+0x68>
 80a02e0:	f001 fdfa 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
    buttonHoldBeginTime = millis();
 80a02e4:	4b18      	ldr	r3, [pc, #96]	; (80a0348 <_Z11checkButtoni+0x7c>)
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02e6:	4a19      	ldr	r2, [pc, #100]	; (80a034c <_Z11checkButtoni+0x80>)
    buttonHoldBeginTime = millis();
 80a02e8:	6018      	str	r0, [r3, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02ea:	6813      	ldr	r3, [r2, #0]
    watchingButton = true;
 80a02ec:	702c      	strb	r4, [r5, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02ee:	3332      	adds	r3, #50	; 0x32
 80a02f0:	6013      	str	r3, [r2, #0]

// Serial.println(watchingButton);
// Serial.println(buttonHoldBeginTime);
  
  if (watchingButton) {
    if (currentTime > debounceEndWaitTime) {
 80a02f2:	4b17      	ldr	r3, [pc, #92]	; (80a0350 <_Z11checkButtoni+0x84>)
 80a02f4:	681a      	ldr	r2, [r3, #0]
 80a02f6:	4b15      	ldr	r3, [pc, #84]	; (80a034c <_Z11checkButtoni+0x80>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	429a      	cmp	r2, r3
 80a02fc:	d90f      	bls.n	80a031e <_Z11checkButtoni+0x52>
 80a02fe:	f001 fdeb 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>

      if(millis() - buttonHoldBeginTime > DOUBLE_CLICK_WAIT_TIME) {
 80a0302:	4b11      	ldr	r3, [pc, #68]	; (80a0348 <_Z11checkButtoni+0x7c>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	1ac0      	subs	r0, r0, r3
 80a0308:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80a030c:	d909      	bls.n	80a0322 <_Z11checkButtoni+0x56>
        if(buttonReading == HIGH){
 80a030e:	2c01      	cmp	r4, #1
 80a0310:	d103      	bne.n	80a031a <_Z11checkButtoni+0x4e>
          lastButtonReading = buttonReading;
          return HOLD;
 80a0312:	2002      	movs	r0, #2
          lastButtonReading = buttonReading;
 80a0314:	4b0b      	ldr	r3, [pc, #44]	; (80a0344 <_Z11checkButtoni+0x78>)
 80a0316:	601c      	str	r4, [r3, #0]
  } 

  lastButtonReading = buttonReading;

  return buttonReading == HIGH ? PRESSED : UNPRESSED;
}
 80a0318:	bd38      	pop	{r3, r4, r5, pc}
        } else if (buttonReading == LOW) {
 80a031a:	b95c      	cbnz	r4, 80a0334 <_Z11checkButtoni+0x68>
          watchingButton = false;
 80a031c:	702c      	strb	r4, [r5, #0]
      return UNPRESSED;
 80a031e:	2000      	movs	r0, #0
 80a0320:	e7fa      	b.n	80a0318 <_Z11checkButtoni+0x4c>
      } else if (lastButtonReading == LOW && buttonReading == HIGH) {
 80a0322:	4b08      	ldr	r3, [pc, #32]	; (80a0344 <_Z11checkButtoni+0x78>)
 80a0324:	681a      	ldr	r2, [r3, #0]
 80a0326:	b92a      	cbnz	r2, 80a0334 <_Z11checkButtoni+0x68>
 80a0328:	2c01      	cmp	r4, #1
 80a032a:	d103      	bne.n	80a0334 <_Z11checkButtoni+0x68>
        return DOUBLE_CLICK;
 80a032c:	2003      	movs	r0, #3
        watchingButton = false;
 80a032e:	702a      	strb	r2, [r5, #0]
        lastButtonReading = buttonReading;
 80a0330:	601c      	str	r4, [r3, #0]
        return DOUBLE_CLICK;
 80a0332:	e7f1      	b.n	80a0318 <_Z11checkButtoni+0x4c>
  lastButtonReading = buttonReading;
 80a0334:	4b03      	ldr	r3, [pc, #12]	; (80a0344 <_Z11checkButtoni+0x78>)
 80a0336:	601c      	str	r4, [r3, #0]
          return HOLD;
 80a0338:	1e63      	subs	r3, r4, #1
 80a033a:	4258      	negs	r0, r3
 80a033c:	4158      	adcs	r0, r3
 80a033e:	e7eb      	b.n	80a0318 <_Z11checkButtoni+0x4c>
 80a0340:	20000110 	.word	0x20000110
 80a0344:	200000c0 	.word	0x200000c0
 80a0348:	20000098 	.word	0x20000098
 80a034c:	200000b0 	.word	0x200000b0
 80a0350:	200000ac 	.word	0x200000ac

080a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0354:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0356:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0358:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a035a:	b17c      	cbz	r4, 80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a035c:	6863      	ldr	r3, [r4, #4]
 80a035e:	3b01      	subs	r3, #1
 80a0360:	6063      	str	r3, [r4, #4]
 80a0362:	b95b      	cbnz	r3, 80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0364:	6823      	ldr	r3, [r4, #0]
 80a0366:	4620      	mov	r0, r4
 80a0368:	689b      	ldr	r3, [r3, #8]
 80a036a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a036c:	68a3      	ldr	r3, [r4, #8]
 80a036e:	3b01      	subs	r3, #1
 80a0370:	60a3      	str	r3, [r4, #8]
 80a0372:	b91b      	cbnz	r3, 80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0374:	6823      	ldr	r3, [r4, #0]
 80a0376:	4620      	mov	r0, r4
 80a0378:	68db      	ldr	r3, [r3, #12]
 80a037a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a037c:	4628      	mov	r0, r5
 80a037e:	bd38      	pop	{r3, r4, r5, pc}

080a0380 <loop>:
void loop() {
 80a0380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0384:	b08c      	sub	sp, #48	; 0x30
 80a0386:	f001 fda7 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();  // get the current time
 80a038a:	4da1      	ldr	r5, [pc, #644]	; (80a0610 <loop+0x290>)
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a038c:	4ea1      	ldr	r6, [pc, #644]	; (80a0614 <loop+0x294>)
  currentTime = millis();  // get the current time
 80a038e:	6028      	str	r0, [r5, #0]
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a0390:	2002      	movs	r0, #2
 80a0392:	f003 f84f 	bl	80a3434 <digitalRead>
 80a0396:	f7ff ff99 	bl	80a02cc <_Z11checkButtoni>
 80a039a:	7030      	strb	r0, [r6, #0]
  Serial.println(buttonState);
 80a039c:	f002 fdf4 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a03a0:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a03a2:	220a      	movs	r2, #10
 80a03a4:	7831      	ldrb	r1, [r6, #0]
 80a03a6:	f002 f891 	bl	80a24cc <_ZN5Print11printNumberEmh>
        n += println();
 80a03aa:	4620      	mov	r0, r4
 80a03ac:	f002 f882 	bl	80a24b4 <_ZN5Print7printlnEv>
  Serial.print("Device Mode: ");
 80a03b0:	f002 fdea 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a03b4:	4998      	ldr	r1, [pc, #608]	; (80a0618 <loop+0x298>)
 80a03b6:	f002 f876 	bl	80a24a6 <_ZN5Print5printEPKc>
  Serial.println(deviceMode);
 80a03ba:	f002 fde5 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a03be:	4607      	mov	r7, r0
 80a03c0:	4c96      	ldr	r4, [pc, #600]	; (80a061c <loop+0x29c>)
        return printNumber(val, base) + t;
 80a03c2:	220a      	movs	r2, #10
 80a03c4:	7821      	ldrb	r1, [r4, #0]
 80a03c6:	f002 f881 	bl	80a24cc <_ZN5Print11printNumberEmh>
        n += println();
 80a03ca:	4638      	mov	r0, r7
 80a03cc:	f002 f872 	bl	80a24b4 <_ZN5Print7printlnEv>
  switch (deviceMode) {
 80a03d0:	7823      	ldrb	r3, [r4, #0]
 80a03d2:	2b04      	cmp	r3, #4
 80a03d4:	d863      	bhi.n	80a049e <loop+0x11e>
 80a03d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a03da:	0005      	.short	0x0005
 80a03dc:	00870065 	.word	0x00870065
 80a03e0:	02520062 	.word	0x02520062
      static unsigned long int readingLastCalled = millis();
 80a03e4:	4f8e      	ldr	r7, [pc, #568]	; (80a0620 <loop+0x2a0>)
 80a03e6:	4e8f      	ldr	r6, [pc, #572]	; (80a0624 <loop+0x2a4>)
 80a03e8:	783b      	ldrb	r3, [r7, #0]
 80a03ea:	f3bf 8f5b 	dmb	ish
 80a03ee:	f013 0f01 	tst.w	r3, #1
 80a03f2:	d109      	bne.n	80a0408 <loop+0x88>
 80a03f4:	4638      	mov	r0, r7
 80a03f6:	f7ff fe56 	bl	80a00a6 <__cxa_guard_acquire>
 80a03fa:	b128      	cbz	r0, 80a0408 <loop+0x88>
 80a03fc:	f001 fd6c 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
 80a0400:	6030      	str	r0, [r6, #0]
 80a0402:	4638      	mov	r0, r7
 80a0404:	f7ff fe54 	bl	80a00b0 <__cxa_guard_release>
      if(currentTime > stateChangeTime) {
 80a0408:	4b87      	ldr	r3, [pc, #540]	; (80a0628 <loop+0x2a8>)
 80a040a:	682a      	ldr	r2, [r5, #0]
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	429a      	cmp	r2, r3
 80a0410:	d90d      	bls.n	80a042e <loop+0xae>
        deviceMode = IDLE;
 80a0412:	2301      	movs	r3, #1
        lcd.clear();
 80a0414:	4885      	ldr	r0, [pc, #532]	; (80a062c <loop+0x2ac>)
        deviceMode = IDLE;
 80a0416:	7023      	strb	r3, [r4, #0]
        lcd.clear();
 80a0418:	f001 fc5e 	bl	80a1cd8 <_ZN7rgb_lcd5clearEv>
        lcd.setCursor(0, 0);
 80a041c:	2200      	movs	r2, #0
 80a041e:	4883      	ldr	r0, [pc, #524]	; (80a062c <loop+0x2ac>)
 80a0420:	4611      	mov	r1, r2
 80a0422:	f001 fc63 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READY...");
 80a0426:	4982      	ldr	r1, [pc, #520]	; (80a0630 <loop+0x2b0>)
 80a0428:	4880      	ldr	r0, [pc, #512]	; (80a062c <loop+0x2ac>)
 80a042a:	f002 f83c 	bl	80a24a6 <_ZN5Print5printEPKc>
      if(currentTime > nextLedFlashTime) {
 80a042e:	4981      	ldr	r1, [pc, #516]	; (80a0634 <loop+0x2b4>)
 80a0430:	682b      	ldr	r3, [r5, #0]
 80a0432:	680a      	ldr	r2, [r1, #0]
 80a0434:	4c80      	ldr	r4, [pc, #512]	; (80a0638 <loop+0x2b8>)
 80a0436:	4293      	cmp	r3, r2
 80a0438:	d907      	bls.n	80a044a <loop+0xca>
        ledFlashOn = !ledFlashOn;
 80a043a:	6823      	ldr	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a043c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
        ledFlashOn = !ledFlashOn;
 80a0440:	fab3 f383 	clz	r3, r3
 80a0444:	095b      	lsrs	r3, r3, #5
 80a0446:	6023      	str	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a0448:	600a      	str	r2, [r1, #0]
      Serial.print(ledFlashOn);
 80a044a:	f002 fd9d 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a044e:	220a      	movs	r2, #10
 80a0450:	6821      	ldr	r1, [r4, #0]
 80a0452:	f7ff fe51 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a0456:	f001 fd3f 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - readingLastCalled > 1000) {
 80a045a:	6833      	ldr	r3, [r6, #0]
 80a045c:	1ac0      	subs	r0, r0, r3
 80a045e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0462:	d91c      	bls.n	80a049e <loop+0x11e>
        if(countdown <= 9) {
 80a0464:	4c75      	ldr	r4, [pc, #468]	; (80a063c <loop+0x2bc>)
        lcd.setCursor(14, 0);
 80a0466:	2200      	movs	r2, #0
 80a0468:	210e      	movs	r1, #14
 80a046a:	4870      	ldr	r0, [pc, #448]	; (80a062c <loop+0x2ac>)
 80a046c:	f001 fc3e 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        if(countdown <= 9) {
 80a0470:	6823      	ldr	r3, [r4, #0]
 80a0472:	2b09      	cmp	r3, #9
 80a0474:	dc09      	bgt.n	80a048a <loop+0x10a>
          lcd.print(0);
 80a0476:	220a      	movs	r2, #10
 80a0478:	2100      	movs	r1, #0
 80a047a:	486c      	ldr	r0, [pc, #432]	; (80a062c <loop+0x2ac>)
 80a047c:	f7ff fe3c 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a0480:	2200      	movs	r2, #0
 80a0482:	210f      	movs	r1, #15
 80a0484:	4869      	ldr	r0, [pc, #420]	; (80a062c <loop+0x2ac>)
 80a0486:	f001 fc31 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(--countdown);
 80a048a:	6821      	ldr	r1, [r4, #0]
 80a048c:	220a      	movs	r2, #10
 80a048e:	3901      	subs	r1, #1
 80a0490:	4866      	ldr	r0, [pc, #408]	; (80a062c <loop+0x2ac>)
 80a0492:	6021      	str	r1, [r4, #0]
 80a0494:	f7ff fe30 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a0498:	f001 fd1e 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        readingLastCalled = millis();
 80a049c:	6030      	str	r0, [r6, #0]
      handleLED(READING_LED_TIME_DIFFERENCE, PixelColorRed);
 80a049e:	4b68      	ldr	r3, [pc, #416]	; (80a0640 <loop+0x2c0>)
 80a04a0:	6818      	ldr	r0, [r3, #0]
 80a04a2:	e1ae      	b.n	80a0802 <loop+0x482>
      if (buttonState == PRESSED || buttonState == HOLD) {
 80a04a4:	7833      	ldrb	r3, [r6, #0]
 80a04a6:	3b01      	subs	r3, #1
 80a04a8:	2b01      	cmp	r3, #1
 80a04aa:	d817      	bhi.n	80a04dc <loop+0x15c>
        deviceMode = READING;
 80a04ac:	2302      	movs	r3, #2
 80a04ae:	7023      	strb	r3, [r4, #0]
 80a04b0:	f001 fd12 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        stateChangeTime = millis() + READING_MODE_TIME;
 80a04b4:	4b5c      	ldr	r3, [pc, #368]	; (80a0628 <loop+0x2a8>)
 80a04b6:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a04ba:	3010      	adds	r0, #16
 80a04bc:	6018      	str	r0, [r3, #0]
 80a04be:	f001 fd0b 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        countdown1 = READING_MODE_TIME / 1000;
 80a04c2:	220a      	movs	r2, #10
        readingLastCalled = millis();
 80a04c4:	4b5f      	ldr	r3, [pc, #380]	; (80a0644 <loop+0x2c4>)
 80a04c6:	6018      	str	r0, [r3, #0]
        countdown1 = READING_MODE_TIME / 1000;
 80a04c8:	4b5f      	ldr	r3, [pc, #380]	; (80a0648 <loop+0x2c8>)
        lcd.clear();
 80a04ca:	4858      	ldr	r0, [pc, #352]	; (80a062c <loop+0x2ac>)
        countdown1 = READING_MODE_TIME / 1000;
 80a04cc:	601a      	str	r2, [r3, #0]
        lcd.clear();
 80a04ce:	f001 fc03 	bl	80a1cd8 <_ZN7rgb_lcd5clearEv>
        Serial.print("Button press");
 80a04d2:	f002 fd59 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a04d6:	495d      	ldr	r1, [pc, #372]	; (80a064c <loop+0x2cc>)
 80a04d8:	f001 ffe5 	bl	80a24a6 <_ZN5Print5printEPKc>
  strip.show();
 80a04dc:	485c      	ldr	r0, [pc, #368]	; (80a0650 <loop+0x2d0>)
}
 80a04de:	b00c      	add	sp, #48	; 0x30
 80a04e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  strip.show();
 80a04e4:	f000 bab8 	b.w	80a0a58 <_ZN17Adafruit_NeoPixel4showEv>
      if (currentTime > stateChangeTime) {
 80a04e8:	4b4f      	ldr	r3, [pc, #316]	; (80a0628 <loop+0x2a8>)
 80a04ea:	682a      	ldr	r2, [r5, #0]
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	4e59      	ldr	r6, [pc, #356]	; (80a0654 <loop+0x2d4>)
 80a04f0:	429a      	cmp	r2, r3
 80a04f2:	f240 80da 	bls.w	80a06aa <loop+0x32a>
        deviceMode = COOLDOWN;
 80a04f6:	2304      	movs	r3, #4
 80a04f8:	7023      	strb	r3, [r4, #0]
        float avgRawValue = fullSampleTotal / fullSampleCount;
 80a04fa:	4b57      	ldr	r3, [pc, #348]	; (80a0658 <loop+0x2d8>)
        countdown2 = COOLDOWN_TIME / 1000;
 80a04fc:	f04f 080a 	mov.w	r8, #10
        float avgRawValue = fullSampleTotal / fullSampleCount;
 80a0500:	6818      	ldr	r0, [r3, #0]
 80a0502:	f003 fe0f 	bl	80a4124 <__aeabi_i2f>
 80a0506:	4b55      	ldr	r3, [pc, #340]	; (80a065c <loop+0x2dc>)
 80a0508:	4601      	mov	r1, r0
 80a050a:	6818      	ldr	r0, [r3, #0]
 80a050c:	f003 ff12 	bl	80a4334 <__aeabi_fdiv>
 80a0510:	4607      	mov	r7, r0
 80a0512:	f001 fce1 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        cooldownLastCalled = millis();
 80a0516:	4b52      	ldr	r3, [pc, #328]	; (80a0660 <loop+0x2e0>)
 80a0518:	6018      	str	r0, [r3, #0]
        countdown2 = COOLDOWN_TIME / 1000;
 80a051a:	4b52      	ldr	r3, [pc, #328]	; (80a0664 <loop+0x2e4>)
 80a051c:	f8c3 8000 	str.w	r8, [r3]
        maxPPM = getPPM(maxRawValue);
 80a0520:	4b51      	ldr	r3, [pc, #324]	; (80a0668 <loop+0x2e8>)
 80a0522:	6818      	ldr	r0, [r3, #0]
 80a0524:	f003 fdfe 	bl	80a4124 <__aeabi_i2f>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a0528:	f003 f9a2 	bl	80a3870 <__aeabi_f2d>
 80a052c:	a334      	add	r3, pc, #208	; (adr r3, 80a0600 <loop+0x280>)
 80a052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0532:	f003 f9f5 	bl	80a3920 <__aeabi_dmul>
 80a0536:	f003 fceb 	bl	80a3f10 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a053a:	f003 f999 	bl	80a3870 <__aeabi_f2d>
 80a053e:	a332      	add	r3, pc, #200	; (adr r3, 80a0608 <loop+0x288>)
 80a0540:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0544:	f003 f9ec 	bl	80a3920 <__aeabi_dmul>
 80a0548:	f003 fce2 	bl	80a3f10 <__aeabi_d2f>
 80a054c:	4682      	mov	sl, r0
        maxPPM = getPPM(maxRawValue);
 80a054e:	f003 ff8d 	bl	80a446c <__aeabi_f2iz>
 80a0552:	4b46      	ldr	r3, [pc, #280]	; (80a066c <loop+0x2ec>)
 80a0554:	4604      	mov	r4, r0
 80a0556:	6018      	str	r0, [r3, #0]
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a0558:	4638      	mov	r0, r7
 80a055a:	f003 f989 	bl	80a3870 <__aeabi_f2d>
 80a055e:	a328      	add	r3, pc, #160	; (adr r3, 80a0600 <loop+0x280>)
 80a0560:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0564:	f003 f9dc 	bl	80a3920 <__aeabi_dmul>
 80a0568:	f003 fcd2 	bl	80a3f10 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a056c:	f003 f980 	bl	80a3870 <__aeabi_f2d>
 80a0570:	a325      	add	r3, pc, #148	; (adr r3, 80a0608 <loop+0x288>)
 80a0572:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0576:	f003 f9d3 	bl	80a3920 <__aeabi_dmul>
 80a057a:	f003 fcc9 	bl	80a3f10 <__aeabi_d2f>
 80a057e:	4681      	mov	r9, r0
        avgPPM = getPPM(avgRawValue);
 80a0580:	f003 ff74 	bl	80a446c <__aeabi_f2iz>
 80a0584:	4f3a      	ldr	r7, [pc, #232]	; (80a0670 <loop+0x2f0>)
  return ppm / 4600.0;
 80a0586:	493b      	ldr	r1, [pc, #236]	; (80a0674 <loop+0x2f4>)
        avgPPM = getPPM(avgRawValue);
 80a0588:	6038      	str	r0, [r7, #0]
  return ppm / 4600.0;
 80a058a:	4650      	mov	r0, sl
 80a058c:	f003 fed2 	bl	80a4334 <__aeabi_fdiv>
        maxBAC = getBAC(maxRawValue);
 80a0590:	4b39      	ldr	r3, [pc, #228]	; (80a0678 <loop+0x2f8>)
  return ppm / 4600.0;
 80a0592:	4938      	ldr	r1, [pc, #224]	; (80a0674 <loop+0x2f4>)
        maxBAC = getBAC(maxRawValue);
 80a0594:	6018      	str	r0, [r3, #0]
  return ppm / 4600.0;
 80a0596:	4648      	mov	r0, r9
 80a0598:	f003 fecc 	bl	80a4334 <__aeabi_fdiv>
        avgBAC = getBAC(avgRawValue);
 80a059c:	4b37      	ldr	r3, [pc, #220]	; (80a067c <loop+0x2fc>)
        String StringMaxPPM = String(maxPPM);
 80a059e:	4621      	mov	r1, r4
        avgBAC = getBAC(avgRawValue);
 80a05a0:	6018      	str	r0, [r3, #0]
        String StringMaxPPM = String(maxPPM);
 80a05a2:	4642      	mov	r2, r8
 80a05a4:	4c36      	ldr	r4, [pc, #216]	; (80a0680 <loop+0x300>)
 80a05a6:	a804      	add	r0, sp, #16
 80a05a8:	f001 ff44 	bl	80a2434 <_ZN6StringC1Eih>
        String StringAvgPPM = String(avgPPM);
 80a05ac:	4642      	mov	r2, r8
 80a05ae:	6839      	ldr	r1, [r7, #0]
 80a05b0:	a808      	add	r0, sp, #32
 80a05b2:	f001 ff3f 	bl	80a2434 <_ZN6StringC1Eih>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a05b6:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a05b8:	9a04      	ldr	r2, [sp, #16]
 80a05ba:	4932      	ldr	r1, [pc, #200]	; (80a0684 <loop+0x304>)
 80a05bc:	f88d 3000 	strb.w	r3, [sp]
 80a05c0:	a802      	add	r0, sp, #8
 80a05c2:	233c      	movs	r3, #60	; 0x3c
 80a05c4:	f002 faa0 	bl	80a2b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a05c8:	a803      	add	r0, sp, #12
 80a05ca:	f7ff fec3 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a05ce:	7823      	ldrb	r3, [r4, #0]
 80a05d0:	9a08      	ldr	r2, [sp, #32]
 80a05d2:	492d      	ldr	r1, [pc, #180]	; (80a0688 <loop+0x308>)
 80a05d4:	f88d 3000 	strb.w	r3, [sp]
 80a05d8:	a802      	add	r0, sp, #8
 80a05da:	233c      	movs	r3, #60	; 0x3c
 80a05dc:	f002 fa94 	bl	80a2b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a05e0:	a803      	add	r0, sp, #12
 80a05e2:	f7ff feb7 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        updateDisplay();
 80a05e6:	f7ff fdf5 	bl	80a01d4 <_Z13updateDisplayv>
        if(avgPPM >= HIGH_PPM) {
 80a05ea:	f643 2297 	movw	r2, #14999	; 0x3a97
 80a05ee:	683b      	ldr	r3, [r7, #0]
 80a05f0:	4293      	cmp	r3, r2
 80a05f2:	dd4b      	ble.n	80a068c <loop+0x30c>
          handleLED(SOLID, PixelColorRed);
 80a05f4:	4b12      	ldr	r3, [pc, #72]	; (80a0640 <loop+0x2c0>)
          handleLED(SOLID, PixelColorGreen);
 80a05f6:	6819      	ldr	r1, [r3, #0]
 80a05f8:	e04e      	b.n	80a0698 <loop+0x318>
 80a05fa:	bf00      	nop
 80a05fc:	f3af 8000 	nop.w
 80a0600:	13bacbaf 	.word	0x13bacbaf
 80a0604:	3f540140 	.word	0x3f540140
 80a0608:	2e8ba608 	.word	0x2e8ba608
 80a060c:	408c68ba 	.word	0x408c68ba
 80a0610:	200000ac 	.word	0x200000ac
 80a0614:	2000009c 	.word	0x2000009c
 80a0618:	080a46b8 	.word	0x080a46b8
 80a061c:	200000b4 	.word	0x200000b4
 80a0620:	20000084 	.word	0x20000084
 80a0624:	2000008c 	.word	0x2000008c
 80a0628:	200000f8 	.word	0x200000f8
 80a062c:	200000c8 	.word	0x200000c8
 80a0630:	080a46c6 	.word	0x080a46c6
 80a0634:	200000e8 	.word	0x200000e8
 80a0638:	200000d8 	.word	0x200000d8
 80a063c:	20000000 	.word	0x20000000
 80a0640:	2000007c 	.word	0x2000007c
 80a0644:	200000ec 	.word	0x200000ec
 80a0648:	200000a4 	.word	0x200000a4
 80a064c:	080a46cf 	.word	0x080a46cf
 80a0650:	200000fc 	.word	0x200000fc
 80a0654:	20000080 	.word	0x20000080
 80a0658:	200000b8 	.word	0x200000b8
 80a065c:	200000bc 	.word	0x200000bc
 80a0660:	200000a0 	.word	0x200000a0
 80a0664:	200000a8 	.word	0x200000a8
 80a0668:	200000e4 	.word	0x200000e4
 80a066c:	200000e0 	.word	0x200000e0
 80a0670:	20000094 	.word	0x20000094
 80a0674:	458fc000 	.word	0x458fc000
 80a0678:	200000dc 	.word	0x200000dc
 80a067c:	20000090 	.word	0x20000090
 80a0680:	20000088 	.word	0x20000088
 80a0684:	080a46dc 	.word	0x080a46dc
 80a0688:	080a46e5 	.word	0x080a46e5
        } else if (avgPPM >= MEDIUM_PPM) {
 80a068c:	f242 720f 	movw	r2, #9999	; 0x270f
 80a0690:	4293      	cmp	r3, r2
 80a0692:	f340 80b9 	ble.w	80a0808 <loop+0x488>
          handleLED(SOLID, PixelColorYellow);
 80a0696:	6831      	ldr	r1, [r6, #0]
          handleLED(SOLID, PixelColorGreen);
 80a0698:	2000      	movs	r0, #0
 80a069a:	f7ff fe0b 	bl	80a02b4 <_Z9handleLEDii>
        String StringAvgPPM = String(avgPPM);
 80a069e:	a808      	add	r0, sp, #32
 80a06a0:	f001 fe6d 	bl	80a237e <_ZN6StringD1Ev>
        String StringMaxPPM = String(maxPPM);
 80a06a4:	a804      	add	r0, sp, #16
 80a06a6:	f001 fe6a 	bl	80a237e <_ZN6StringD1Ev>
      if (currentTime - lastSensorReadTime > MS_BETWEEN_SAMPLES) {
 80a06aa:	4c91      	ldr	r4, [pc, #580]	; (80a08f0 <loop+0x570>)
 80a06ac:	682b      	ldr	r3, [r5, #0]
 80a06ae:	6822      	ldr	r2, [r4, #0]
 80a06b0:	4f90      	ldr	r7, [pc, #576]	; (80a08f4 <loop+0x574>)
 80a06b2:	1a9b      	subs	r3, r3, r2
 80a06b4:	2b14      	cmp	r3, #20
 80a06b6:	d911      	bls.n	80a06dc <loop+0x35c>
        smallSampleTotal += analogRead(MQ3_PIN);
 80a06b8:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80a08f8 <loop+0x578>
 80a06bc:	200b      	movs	r0, #11
 80a06be:	f002 fecc 	bl	80a345a <analogRead>
 80a06c2:	f003 fd2f 	bl	80a4124 <__aeabi_i2f>
 80a06c6:	f8d8 1000 	ldr.w	r1, [r8]
 80a06ca:	f003 fc77 	bl	80a3fbc <__addsf3>
        smallSampleCount++;
 80a06ce:	683b      	ldr	r3, [r7, #0]
        smallSampleTotal += analogRead(MQ3_PIN);
 80a06d0:	f8c8 0000 	str.w	r0, [r8]
        smallSampleCount++;
 80a06d4:	3301      	adds	r3, #1
 80a06d6:	603b      	str	r3, [r7, #0]
        lastSensorReadTime = currentTime;
 80a06d8:	682b      	ldr	r3, [r5, #0]
 80a06da:	6023      	str	r3, [r4, #0]
      if (smallSampleCount == 10) { 
 80a06dc:	683b      	ldr	r3, [r7, #0]
 80a06de:	2b0a      	cmp	r3, #10
 80a06e0:	f040 808e 	bne.w	80a0800 <loop+0x480>
        smallSampleAvg = smallSampleTotal * 0.1;
 80a06e4:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80a08f8 <loop+0x578>
        fullSampleTotal += smallSampleAvg;
 80a06e8:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80a08fc <loop+0x57c>
        smallSampleAvg = smallSampleTotal * 0.1;
 80a06ec:	f8d8 0000 	ldr.w	r0, [r8]
 80a06f0:	f003 f8be 	bl	80a3870 <__aeabi_f2d>
 80a06f4:	a378      	add	r3, pc, #480	; (adr r3, 80a08d8 <loop+0x558>)
 80a06f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06fa:	f003 f911 	bl	80a3920 <__aeabi_dmul>
 80a06fe:	f003 fbbf 	bl	80a3e80 <__aeabi_d2iz>
 80a0702:	4604      	mov	r4, r0
        fullSampleTotal += smallSampleAvg;
 80a0704:	f003 fd0e 	bl	80a4124 <__aeabi_i2f>
 80a0708:	4601      	mov	r1, r0
 80a070a:	4605      	mov	r5, r0
 80a070c:	f8d9 0000 	ldr.w	r0, [r9]
 80a0710:	f003 fc54 	bl	80a3fbc <__addsf3>
        fullSampleCount++;
 80a0714:	4a7a      	ldr	r2, [pc, #488]	; (80a0900 <loop+0x580>)
        fullSampleTotal += smallSampleAvg;
 80a0716:	f8c9 0000 	str.w	r0, [r9]
        fullSampleCount++;
 80a071a:	6813      	ldr	r3, [r2, #0]
        lcd.setCursor(0, 0);
 80a071c:	4879      	ldr	r0, [pc, #484]	; (80a0904 <loop+0x584>)
        fullSampleCount++;
 80a071e:	3301      	adds	r3, #1
 80a0720:	6013      	str	r3, [r2, #0]
        if(smallSampleAvg > maxRawValue) {
 80a0722:	4b79      	ldr	r3, [pc, #484]	; (80a0908 <loop+0x588>)
 80a0724:	681a      	ldr	r2, [r3, #0]
 80a0726:	42a2      	cmp	r2, r4
          maxRawValue = smallSampleAvg;
 80a0728:	bfb8      	it	lt
 80a072a:	601c      	strlt	r4, [r3, #0]
        smallSampleCount = 0;
 80a072c:	2400      	movs	r4, #0
        smallSampleTotal = 0;
 80a072e:	2300      	movs	r3, #0
        lcd.setCursor(0, 0);
 80a0730:	4622      	mov	r2, r4
 80a0732:	4621      	mov	r1, r4
        smallSampleTotal = 0;
 80a0734:	f8c8 3000 	str.w	r3, [r8]
        smallSampleCount = 0;
 80a0738:	603c      	str	r4, [r7, #0]
        lcd.setCursor(0, 0);
 80a073a:	f001 fad7 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READING...");
 80a073e:	4973      	ldr	r1, [pc, #460]	; (80a090c <loop+0x58c>)
 80a0740:	4870      	ldr	r0, [pc, #448]	; (80a0904 <loop+0x584>)
 80a0742:	f001 feb0 	bl	80a24a6 <_ZN5Print5printEPKc>
 80a0746:	f001 fbc7 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - readingLastCalled > 1000) {
 80a074a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80a0910 <loop+0x590>
 80a074e:	f8d8 3000 	ldr.w	r3, [r8]
 80a0752:	1ac0      	subs	r0, r0, r3
 80a0754:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0758:	d91d      	bls.n	80a0796 <loop+0x416>
          if(countdown1 <= 9) {
 80a075a:	4f6e      	ldr	r7, [pc, #440]	; (80a0914 <loop+0x594>)
          lcd.setCursor(14, 0);
 80a075c:	4622      	mov	r2, r4
 80a075e:	210e      	movs	r1, #14
 80a0760:	4868      	ldr	r0, [pc, #416]	; (80a0904 <loop+0x584>)
 80a0762:	f001 fac3 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
          if(countdown1 <= 9) {
 80a0766:	683b      	ldr	r3, [r7, #0]
 80a0768:	2b09      	cmp	r3, #9
 80a076a:	dc09      	bgt.n	80a0780 <loop+0x400>
            lcd.print(0);
 80a076c:	220a      	movs	r2, #10
 80a076e:	4621      	mov	r1, r4
 80a0770:	4864      	ldr	r0, [pc, #400]	; (80a0904 <loop+0x584>)
 80a0772:	f7ff fcc1 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
            lcd.setCursor(15, 0);
 80a0776:	4622      	mov	r2, r4
 80a0778:	210f      	movs	r1, #15
 80a077a:	4862      	ldr	r0, [pc, #392]	; (80a0904 <loop+0x584>)
 80a077c:	f001 fab6 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
          lcd.print(--countdown1);
 80a0780:	6839      	ldr	r1, [r7, #0]
 80a0782:	220a      	movs	r2, #10
 80a0784:	3901      	subs	r1, #1
 80a0786:	485f      	ldr	r0, [pc, #380]	; (80a0904 <loop+0x584>)
 80a0788:	6039      	str	r1, [r7, #0]
 80a078a:	f7ff fcb5 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a078e:	f001 fba3 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
          readingLastCalled = millis();
 80a0792:	f8c8 0000 	str.w	r0, [r8]
        lcd.setCursor(0, 1);
 80a0796:	2201      	movs	r2, #1
 80a0798:	2100      	movs	r1, #0
 80a079a:	485a      	ldr	r0, [pc, #360]	; (80a0904 <loop+0x584>)
 80a079c:	f001 faa6 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        if (displayMode == PPM) {
 80a07a0:	4b5d      	ldr	r3, [pc, #372]	; (80a0918 <loop+0x598>)
 80a07a2:	781c      	ldrb	r4, [r3, #0]
 80a07a4:	bb94      	cbnz	r4, 80a080c <loop+0x48c>
          lcd.print("PPM:");
 80a07a6:	495d      	ldr	r1, [pc, #372]	; (80a091c <loop+0x59c>)
 80a07a8:	4856      	ldr	r0, [pc, #344]	; (80a0904 <loop+0x584>)
 80a07aa:	f001 fe7c 	bl	80a24a6 <_ZN5Print5printEPKc>
          Serial.print("PPM: ");
 80a07ae:	f002 fbeb 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a07b2:	495b      	ldr	r1, [pc, #364]	; (80a0920 <loop+0x5a0>)
 80a07b4:	f001 fe77 	bl	80a24a6 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a07b8:	2201      	movs	r2, #1
 80a07ba:	2104      	movs	r1, #4
 80a07bc:	4851      	ldr	r0, [pc, #324]	; (80a0904 <loop+0x584>)
 80a07be:	f001 fa95 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a07c2:	4628      	mov	r0, r5
 80a07c4:	f003 f854 	bl	80a3870 <__aeabi_f2d>
 80a07c8:	a345      	add	r3, pc, #276	; (adr r3, 80a08e0 <loop+0x560>)
 80a07ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07ce:	f003 f8a7 	bl	80a3920 <__aeabi_dmul>
 80a07d2:	f003 fb9d 	bl	80a3f10 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a07d6:	f003 f84b 	bl	80a3870 <__aeabi_f2d>
 80a07da:	a343      	add	r3, pc, #268	; (adr r3, 80a08e8 <loop+0x568>)
 80a07dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07e0:	f003 f89e 	bl	80a3920 <__aeabi_dmul>
 80a07e4:	f003 fb94 	bl	80a3f10 <__aeabi_d2f>
  return ppm / 4600.0;
 80a07e8:	4604      	mov	r4, r0
          lcd.print(bac);
 80a07ea:	4601      	mov	r1, r0
 80a07ec:	2202      	movs	r2, #2
 80a07ee:	4845      	ldr	r0, [pc, #276]	; (80a0904 <loop+0x584>)
 80a07f0:	f001 ff4c 	bl	80a268c <_ZN5Print5printEfi>
          Serial.println(bac);
 80a07f4:	f002 fbc8 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a07f8:	2202      	movs	r2, #2
 80a07fa:	4621      	mov	r1, r4
 80a07fc:	f001 ff63 	bl	80a26c6 <_ZN5Print7printlnEfi>
  if(timeDifference != SOLID) {
 80a0800:	6830      	ldr	r0, [r6, #0]
 80a0802:	f7ff fc59 	bl	80a00b8 <_Z9handleLEDii.part.0>
 80a0806:	e669      	b.n	80a04dc <loop+0x15c>
          handleLED(SOLID, PixelColorGreen);
 80a0808:	4b46      	ldr	r3, [pc, #280]	; (80a0924 <loop+0x5a4>)
 80a080a:	e6f4      	b.n	80a05f6 <loop+0x276>
        } else if (displayMode == BAC) {
 80a080c:	2c01      	cmp	r4, #1
 80a080e:	d1f7      	bne.n	80a0800 <loop+0x480>
          lcd.print("BAC:");
 80a0810:	4945      	ldr	r1, [pc, #276]	; (80a0928 <loop+0x5a8>)
 80a0812:	483c      	ldr	r0, [pc, #240]	; (80a0904 <loop+0x584>)
 80a0814:	f001 fe47 	bl	80a24a6 <_ZN5Print5printEPKc>
          Serial.print("BAC: ");
 80a0818:	f002 fbb6 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a081c:	4943      	ldr	r1, [pc, #268]	; (80a092c <loop+0x5ac>)
 80a081e:	f001 fe42 	bl	80a24a6 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a0822:	4622      	mov	r2, r4
 80a0824:	2104      	movs	r1, #4
 80a0826:	4837      	ldr	r0, [pc, #220]	; (80a0904 <loop+0x584>)
 80a0828:	f001 fa60 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a082c:	4628      	mov	r0, r5
 80a082e:	f003 f81f 	bl	80a3870 <__aeabi_f2d>
 80a0832:	a32b      	add	r3, pc, #172	; (adr r3, 80a08e0 <loop+0x560>)
 80a0834:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0838:	f003 f872 	bl	80a3920 <__aeabi_dmul>
 80a083c:	f003 fb68 	bl	80a3f10 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a0840:	f003 f816 	bl	80a3870 <__aeabi_f2d>
 80a0844:	a328      	add	r3, pc, #160	; (adr r3, 80a08e8 <loop+0x568>)
 80a0846:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a084a:	f003 f869 	bl	80a3920 <__aeabi_dmul>
 80a084e:	f003 fb5f 	bl	80a3f10 <__aeabi_d2f>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a0852:	f003 f80d 	bl	80a3870 <__aeabi_f2d>
 80a0856:	a322      	add	r3, pc, #136	; (adr r3, 80a08e0 <loop+0x560>)
 80a0858:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a085c:	f003 f860 	bl	80a3920 <__aeabi_dmul>
 80a0860:	f003 fb56 	bl	80a3f10 <__aeabi_d2f>
  float ppm = voltage * 909.090909091;
 80a0864:	f003 f804 	bl	80a3870 <__aeabi_f2d>
 80a0868:	a31f      	add	r3, pc, #124	; (adr r3, 80a08e8 <loop+0x568>)
 80a086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a086e:	f003 f857 	bl	80a3920 <__aeabi_dmul>
 80a0872:	f003 fb4d 	bl	80a3f10 <__aeabi_d2f>
  return ppm / 4600.0;
 80a0876:	492e      	ldr	r1, [pc, #184]	; (80a0930 <loop+0x5b0>)
 80a0878:	f003 fd5c 	bl	80a4334 <__aeabi_fdiv>
 80a087c:	e7b4      	b.n	80a07e8 <loop+0x468>
      if (countdown2 == 0) {
 80a087e:	4d2d      	ldr	r5, [pc, #180]	; (80a0934 <loop+0x5b4>)
 80a0880:	682b      	ldr	r3, [r5, #0]
 80a0882:	b90b      	cbnz	r3, 80a0888 <loop+0x508>
        deviceMode = IDLE;
 80a0884:	2301      	movs	r3, #1
 80a0886:	7023      	strb	r3, [r4, #0]
 80a0888:	f001 fb26 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - cooldownLastCalled > 1000) {
 80a088c:	4c2a      	ldr	r4, [pc, #168]	; (80a0938 <loop+0x5b8>)
 80a088e:	6823      	ldr	r3, [r4, #0]
 80a0890:	1ac0      	subs	r0, r0, r3
 80a0892:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0896:	f67f ae21 	bls.w	80a04dc <loop+0x15c>
        lcd.setCursor(14, 0);
 80a089a:	2200      	movs	r2, #0
 80a089c:	210e      	movs	r1, #14
 80a089e:	4819      	ldr	r0, [pc, #100]	; (80a0904 <loop+0x584>)
 80a08a0:	f001 fa24 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        if(countdown2 <= 9) {
 80a08a4:	682b      	ldr	r3, [r5, #0]
 80a08a6:	2b09      	cmp	r3, #9
 80a08a8:	dc09      	bgt.n	80a08be <loop+0x53e>
          lcd.print(0);
 80a08aa:	220a      	movs	r2, #10
 80a08ac:	2100      	movs	r1, #0
 80a08ae:	4815      	ldr	r0, [pc, #84]	; (80a0904 <loop+0x584>)
 80a08b0:	f7ff fc22 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a08b4:	2200      	movs	r2, #0
 80a08b6:	210f      	movs	r1, #15
 80a08b8:	4812      	ldr	r0, [pc, #72]	; (80a0904 <loop+0x584>)
 80a08ba:	f001 fa17 	bl	80a1cec <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(--countdown2);
 80a08be:	6829      	ldr	r1, [r5, #0]
 80a08c0:	220a      	movs	r2, #10
 80a08c2:	3901      	subs	r1, #1
 80a08c4:	480f      	ldr	r0, [pc, #60]	; (80a0904 <loop+0x584>)
 80a08c6:	6029      	str	r1, [r5, #0]
 80a08c8:	f7ff fc16 	bl	80a00f8 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a08cc:	f001 fb04 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
        cooldownLastCalled = millis();
 80a08d0:	6020      	str	r0, [r4, #0]
 80a08d2:	e603      	b.n	80a04dc <loop+0x15c>
 80a08d4:	f3af 8000 	nop.w
 80a08d8:	9999999a 	.word	0x9999999a
 80a08dc:	3fb99999 	.word	0x3fb99999
 80a08e0:	13bacbaf 	.word	0x13bacbaf
 80a08e4:	3f540140 	.word	0x3f540140
 80a08e8:	2e8ba608 	.word	0x2e8ba608
 80a08ec:	408c68ba 	.word	0x408c68ba
 80a08f0:	200000c4 	.word	0x200000c4
 80a08f4:	200000f0 	.word	0x200000f0
 80a08f8:	200000f4 	.word	0x200000f4
 80a08fc:	200000bc 	.word	0x200000bc
 80a0900:	200000b8 	.word	0x200000b8
 80a0904:	200000c8 	.word	0x200000c8
 80a0908:	200000e4 	.word	0x200000e4
 80a090c:	080a46ef 	.word	0x080a46ef
 80a0910:	200000ec 	.word	0x200000ec
 80a0914:	200000a4 	.word	0x200000a4
 80a0918:	200000b5 	.word	0x200000b5
 80a091c:	080a46a1 	.word	0x080a46a1
 80a0920:	080a46fa 	.word	0x080a46fa
 80a0924:	20000074 	.word	0x20000074
 80a0928:	080a46b3 	.word	0x080a46b3
 80a092c:	080a4700 	.word	0x080a4700
 80a0930:	458fc000 	.word	0x458fc000
 80a0934:	200000a8 	.word	0x200000a8
 80a0938:	200000a0 	.word	0x200000a0

080a093c <_GLOBAL__sub_I_lcd>:
}
 80a093c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
 80a093e:	2400      	movs	r4, #0
 80a0940:	4b14      	ldr	r3, [pc, #80]	; (80a0994 <_GLOBAL__sub_I_lcd+0x58>)
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0942:	4d15      	ldr	r5, [pc, #84]	; (80a0998 <_GLOBAL__sub_I_lcd+0x5c>)
 80a0944:	701c      	strb	r4, [r3, #0]
rgb_lcd lcd;
 80a0946:	4815      	ldr	r0, [pc, #84]	; (80a099c <_GLOBAL__sub_I_lcd+0x60>)
 80a0948:	f001 f9be 	bl	80a1cc8 <_ZN7rgb_lcdC1Ev>
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a094c:	2302      	movs	r3, #2
 80a094e:	2203      	movs	r2, #3
 80a0950:	2101      	movs	r1, #1
 80a0952:	4813      	ldr	r0, [pc, #76]	; (80a09a0 <_GLOBAL__sub_I_lcd+0x64>)
 80a0954:	f000 f86f 	bl	80a0a36 <_ZN17Adafruit_NeoPixelC1Ethh>
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0958:	4622      	mov	r2, r4
 80a095a:	7829      	ldrb	r1, [r5, #0]
 80a095c:	4620      	mov	r0, r4
 80a095e:	f001 f96a 	bl	80a1c36 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0962:	4b10      	ldr	r3, [pc, #64]	; (80a09a4 <_GLOBAL__sub_I_lcd+0x68>)
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0964:	4622      	mov	r2, r4
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0966:	6018      	str	r0, [r3, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0968:	4621      	mov	r1, r4
 80a096a:	7828      	ldrb	r0, [r5, #0]
 80a096c:	f001 f963 	bl	80a1c36 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0970:	4b0d      	ldr	r3, [pc, #52]	; (80a09a8 <_GLOBAL__sub_I_lcd+0x6c>)
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0972:	7829      	ldrb	r1, [r5, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0974:	6018      	str	r0, [r3, #0]
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0976:	4622      	mov	r2, r4
 80a0978:	4608      	mov	r0, r1
 80a097a:	f001 f95c 	bl	80a1c36 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a097e:	4b0b      	ldr	r3, [pc, #44]	; (80a09ac <_GLOBAL__sub_I_lcd+0x70>)
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0980:	4622      	mov	r2, r4
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0982:	6018      	str	r0, [r3, #0]
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0984:	4621      	mov	r1, r4
 80a0986:	4620      	mov	r0, r4
 80a0988:	f001 f955 	bl	80a1c36 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a098c:	4b08      	ldr	r3, [pc, #32]	; (80a09b0 <_GLOBAL__sub_I_lcd+0x74>)
 80a098e:	6018      	str	r0, [r3, #0]
}
 80a0990:	bd38      	pop	{r3, r4, r5, pc}
 80a0992:	bf00      	nop
 80a0994:	20000088 	.word	0x20000088
 80a0998:	20000004 	.word	0x20000004
 80a099c:	200000c8 	.word	0x200000c8
 80a09a0:	200000fc 	.word	0x200000fc
 80a09a4:	2000007c 	.word	0x2000007c
 80a09a8:	20000074 	.word	0x20000074
 80a09ac:	20000080 	.word	0x20000080
 80a09b0:	20000078 	.word	0x20000078

080a09b4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a09b4:	b538      	push	{r3, r4, r5, lr}
 80a09b6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a09b8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a09ba:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a09bc:	b108      	cbz	r0, 80a09c2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a09be:	f001 fc41 	bl	80a2244 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a09c2:	79a3      	ldrb	r3, [r4, #6]
 80a09c4:	2b06      	cmp	r3, #6
 80a09c6:	bf0c      	ite	eq
 80a09c8:	2004      	moveq	r0, #4
 80a09ca:	2003      	movne	r0, #3
 80a09cc:	4368      	muls	r0, r5
 80a09ce:	b280      	uxth	r0, r0
 80a09d0:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a09d2:	f001 fc2f 	bl	80a2234 <malloc>
 80a09d6:	60e0      	str	r0, [r4, #12]
 80a09d8:	b128      	cbz	r0, 80a09e6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a09da:	2100      	movs	r1, #0
 80a09dc:	88a2      	ldrh	r2, [r4, #4]
 80a09de:	f003 fd7f 	bl	80a44e0 <memset>
    numLEDs = n;
 80a09e2:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a09e4:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a09e6:	80a0      	strh	r0, [r4, #4]
 80a09e8:	8060      	strh	r0, [r4, #2]
}
 80a09ea:	e7fb      	b.n	80a09e4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a09ec <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a09ec:	b510      	push	{r4, lr}
 80a09ee:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a09f0:	2101      	movs	r1, #1
 80a09f2:	79c0      	ldrb	r0, [r0, #7]
 80a09f4:	f002 fcf4 	bl	80a33e0 <pinMode>
  digitalWrite(pin, LOW);
 80a09f8:	2100      	movs	r1, #0
 80a09fa:	79e0      	ldrb	r0, [r4, #7]
 80a09fc:	f002 fd01 	bl	80a3402 <digitalWrite>
  begun = true;
 80a0a00:	2301      	movs	r3, #1
 80a0a02:	7023      	strb	r3, [r4, #0]
}
 80a0a04:	bd10      	pop	{r4, pc}

080a0a06 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0a06:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0a08:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0a0a:	4605      	mov	r5, r0
 80a0a0c:	460c      	mov	r4, r1
    if (begun) {
 80a0a0e:	b11b      	cbz	r3, 80a0a18 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0a10:	2100      	movs	r1, #0
 80a0a12:	79c0      	ldrb	r0, [r0, #7]
 80a0a14:	f002 fce4 	bl	80a33e0 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0a18:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0a1a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0a1c:	b153      	cbz	r3, 80a0a34 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0a1e:	b2a4      	uxth	r4, r4
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	2101      	movs	r1, #1
 80a0a24:	f002 fcdc 	bl	80a33e0 <pinMode>
        digitalWrite(p, LOW);
 80a0a28:	4620      	mov	r0, r4
    }
}
 80a0a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0a2e:	2100      	movs	r1, #0
 80a0a30:	f002 bce7 	b.w	80a3402 <digitalWrite>
}
 80a0a34:	bd38      	pop	{r3, r4, r5, pc}

080a0a36 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0a36:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0a38:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0a3a:	4604      	mov	r4, r0
 80a0a3c:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0a3e:	7183      	strb	r3, [r0, #6]
 80a0a40:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0a44:	7005      	strb	r5, [r0, #0]
 80a0a46:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0a48:	f7ff ffb4 	bl	80a09b4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0a4c:	4620      	mov	r0, r4
 80a0a4e:	4631      	mov	r1, r6
 80a0a50:	f7ff ffd9 	bl	80a0a06 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0a54:	4620      	mov	r0, r4
 80a0a56:	bd70      	pop	{r4, r5, r6, pc}

080a0a58 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0a58:	68c3      	ldr	r3, [r0, #12]
 80a0a5a:	2b00      	cmp	r3, #0
 80a0a5c:	f000 8441 	beq.w	80a12e2 <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a62:	7983      	ldrb	r3, [r0, #6]
 80a0a64:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0a66:	3b02      	subs	r3, #2
 80a0a68:	b2db      	uxtb	r3, r3
 80a0a6a:	2b04      	cmp	r3, #4
 80a0a6c:	bf8c      	ite	hi
 80a0a6e:	2532      	movhi	r5, #50	; 0x32
 80a0a70:	4a28      	ldrls	r2, [pc, #160]	; (80a0b14 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0a72:	b087      	sub	sp, #28
 80a0a74:	bf98      	it	ls
 80a0a76:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0a7a:	f001 fa25 	bl	80a1ec8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0a7e:	6923      	ldr	r3, [r4, #16]
 80a0a80:	1ac0      	subs	r0, r0, r3
 80a0a82:	42a8      	cmp	r0, r5
 80a0a84:	d3f9      	bcc.n	80a0a7a <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0a86:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a88:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a8a:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a8c:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a94:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0a96:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a98:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a9a:	f000 826e 	beq.w	80a0f7a <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0a9e:	2d07      	cmp	r5, #7
 80a0aa0:	f000 826b 	beq.w	80a0f7a <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0aa4:	2d06      	cmp	r5, #6
 80a0aa6:	f000 841d 	beq.w	80a12e4 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0aaa:	2d05      	cmp	r5, #5
 80a0aac:	f000 83a1 	beq.w	80a11f2 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0ab0:	2d08      	cmp	r5, #8
 80a0ab2:	f000 839e 	beq.w	80a11f2 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0ab6:	2d00      	cmp	r5, #0
 80a0ab8:	f040 854f 	bne.w	80a155a <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0abc:	2b00      	cmp	r3, #0
 80a0abe:	f000 8392 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0ac2:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a0ac6:	4a14      	ldr	r2, [pc, #80]	; (80a0b18 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0ac8:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0aca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0ace:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0ad0:	3b03      	subs	r3, #3
 80a0ad2:	b29b      	uxth	r3, r3
 80a0ad4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ad8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0adc:	b2db      	uxtb	r3, r3
 80a0ade:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ae2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0ae6:	b2db      	uxtb	r3, r3
 80a0ae8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0aec:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0af0:	b2db      	uxtb	r3, r3
 80a0af2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0af6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0afa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0afe:	021b      	lsls	r3, r3, #8
 80a0b00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0b04:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0b08:	4303      	orrs	r3, r0
 80a0b0a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b0c:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0b10:	e11b      	b.n	80a0d4a <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a0b12:	bf00      	nop
 80a0b14:	080a4708 	.word	0x080a4708
 80a0b18:	20000114 	.word	0x20000114
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a0b1c:	4600      	mov	r0, r0
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0c24:	79e3      	ldrb	r3, [r4, #7]
 80a0c26:	6810      	ldr	r0, [r2, #0]
 80a0c28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c2c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c34:	88b8      	ldrh	r0, [r7, #4]
 80a0c36:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0c38:	4600      	mov	r0, r0
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d32:	9b04      	ldr	r3, [sp, #16]
 80a0d34:	085b      	lsrs	r3, r3, #1
 80a0d36:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0d38:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d3c:	3301      	adds	r3, #1
 80a0d3e:	b2db      	uxtb	r3, r3
 80a0d40:	2b17      	cmp	r3, #23
 80a0d42:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d46:	f200 8723 	bhi.w	80a1b90 <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a0d4a:	79e3      	ldrb	r3, [r4, #7]
 80a0d4c:	6810      	ldr	r0, [r2, #0]
 80a0d4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d52:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d5a:	88b8      	ldrh	r0, [r7, #4]
 80a0d5c:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d5e:	9803      	ldr	r0, [sp, #12]
 80a0d60:	9b04      	ldr	r3, [sp, #16]
 80a0d62:	4218      	tst	r0, r3
 80a0d64:	f47f aeda 	bne.w	80a0b1c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a0d68:	4600      	mov	r0, r0
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0dba:	79e3      	ldrb	r3, [r4, #7]
 80a0dbc:	6810      	ldr	r0, [r2, #0]
 80a0dbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0dc2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0dc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dca:	88b8      	ldrh	r0, [r7, #4]
 80a0dcc:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0dce:	4600      	mov	r0, r0
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	e6db      	b.n	80a0d32 <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f7a:	2b00      	cmp	r3, #0
 80a0f7c:	f000 8133 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0f80:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0f84:	f04f 0c00 	mov.w	ip, #0
 80a0f88:	4a12      	ldr	r2, [pc, #72]	; (80a0fd4 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0f8a:	4608      	mov	r0, r1
 80a0f8c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f92:	3103      	adds	r1, #3
 80a0f94:	3b03      	subs	r3, #3
 80a0f96:	b29b      	uxth	r3, r3
 80a0f98:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0f9c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0fa0:	b2db      	uxtb	r3, r3
 80a0fa2:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0fa6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0faa:	b2db      	uxtb	r3, r3
 80a0fac:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0fb0:	7883      	ldrb	r3, [r0, #2]
 80a0fb2:	b2db      	uxtb	r3, r3
 80a0fb4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0fb8:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a0fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0fc0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0fc4:	021b      	lsls	r3, r3, #8
 80a0fc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a0fca:	4303      	orrs	r3, r0
 80a0fcc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fce:	f88d c005 	strb.w	ip, [sp, #5]
 80a0fd2:	e07f      	b.n	80a10d4 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a0fd4:	20000114 	.word	0x20000114
          asm volatile(
 80a0fd8:	4600      	mov	r0, r0
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1072:	79e3      	ldrb	r3, [r4, #7]
 80a1074:	6810      	ldr	r0, [r2, #0]
 80a1076:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a107a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a107e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1082:	88b0      	ldrh	r0, [r6, #4]
 80a1084:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1086:	4600      	mov	r0, r0
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
        mask >>= 1;
 80a10bc:	9b04      	ldr	r3, [sp, #16]
 80a10be:	085b      	lsrs	r3, r3, #1
 80a10c0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a10c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10c6:	3301      	adds	r3, #1
 80a10c8:	b2db      	uxtb	r3, r3
 80a10ca:	2b17      	cmp	r3, #23
 80a10cc:	f88d 3005 	strb.w	r3, [sp, #5]
 80a10d0:	f200 8083 	bhi.w	80a11da <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a10d4:	79e3      	ldrb	r3, [r4, #7]
 80a10d6:	6810      	ldr	r0, [r2, #0]
 80a10d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10dc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a10e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e4:	88b0      	ldrh	r0, [r6, #4]
 80a10e6:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a10e8:	9803      	ldr	r0, [sp, #12]
 80a10ea:	9b04      	ldr	r3, [sp, #16]
 80a10ec:	4218      	tst	r0, r3
 80a10ee:	f47f af73 	bne.w	80a0fd8 <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a10f2:	4600      	mov	r0, r0
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a111a:	79e3      	ldrb	r3, [r4, #7]
 80a111c:	6810      	ldr	r0, [r2, #0]
 80a111e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1122:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a1126:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a112a:	88b0      	ldrh	r0, [r6, #4]
 80a112c:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a112e:	4600      	mov	r0, r0
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	e770      	b.n	80a10bc <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11de:	b29b      	uxth	r3, r3
 80a11e0:	2b00      	cmp	r3, #0
 80a11e2:	f47f aed2 	bne.w	80a0f8a <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a11e6:	b662      	cpsie	i
 80a11e8:	f000 fe6e 	bl	80a1ec8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a11ec:	6120      	str	r0, [r4, #16]
}
 80a11ee:	b007      	add	sp, #28
 80a11f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11f2:	2b00      	cmp	r3, #0
 80a11f4:	d0f7      	beq.n	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a11f6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a11fa:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a11fe:	4b54      	ldr	r3, [pc, #336]	; (80a1350 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a1200:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a1202:	4b54      	ldr	r3, [pc, #336]	; (80a1354 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a1204:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1206:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a120a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a120c:	3a03      	subs	r2, #3
 80a120e:	b292      	uxth	r2, r2
 80a1210:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1214:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a1218:	b2d2      	uxtb	r2, r2
 80a121a:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a121e:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a1222:	b2d2      	uxtb	r2, r2
 80a1224:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1228:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a122c:	b2d2      	uxtb	r2, r2
 80a122e:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1232:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a1236:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a123a:	0212      	lsls	r2, r2, #8
 80a123c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a1240:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a1244:	4332      	orrs	r2, r6
 80a1246:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1248:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a124c:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a124e:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1250:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1254:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1258:	88b6      	ldrh	r6, [r6, #4]
 80a125a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a125e:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1260:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1262:	9e03      	ldr	r6, [sp, #12]
 80a1264:	9a04      	ldr	r2, [sp, #16]
 80a1266:	4216      	tst	r6, r2
 80a1268:	d025      	beq.n	80a12b6 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a126a:	685a      	ldr	r2, [r3, #4]
 80a126c:	9e05      	ldr	r6, [sp, #20]
 80a126e:	1b92      	subs	r2, r2, r6
 80a1270:	2a4f      	cmp	r2, #79	; 0x4f
 80a1272:	d9fa      	bls.n	80a126a <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1274:	79e2      	ldrb	r2, [r4, #7]
 80a1276:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a127a:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a127e:	88b6      	ldrh	r6, [r6, #4]
 80a1280:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1284:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1286:	685a      	ldr	r2, [r3, #4]
 80a1288:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a128a:	685a      	ldr	r2, [r3, #4]
 80a128c:	9e05      	ldr	r6, [sp, #20]
 80a128e:	1b92      	subs	r2, r2, r6
 80a1290:	2a07      	cmp	r2, #7
 80a1292:	d9fa      	bls.n	80a128a <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a1294:	9a04      	ldr	r2, [sp, #16]
 80a1296:	0852      	lsrs	r2, r2, #1
 80a1298:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a129a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a129e:	3201      	adds	r2, #1
 80a12a0:	b2d2      	uxtb	r2, r2
 80a12a2:	2a17      	cmp	r2, #23
 80a12a4:	f88d 2005 	strb.w	r2, [sp, #5]
 80a12a8:	d9d0      	bls.n	80a124c <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a12aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a12ae:	b292      	uxth	r2, r2
 80a12b0:	2a00      	cmp	r2, #0
 80a12b2:	d1a7      	bne.n	80a1204 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a12b4:	e797      	b.n	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a12b6:	685a      	ldr	r2, [r3, #4]
 80a12b8:	9e05      	ldr	r6, [sp, #20]
 80a12ba:	1b92      	subs	r2, r2, r6
 80a12bc:	2a18      	cmp	r2, #24
 80a12be:	d9fa      	bls.n	80a12b6 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a12c0:	79e2      	ldrb	r2, [r4, #7]
 80a12c2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a12c6:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a12ca:	88b6      	ldrh	r6, [r6, #4]
 80a12cc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a12d0:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a12d2:	685a      	ldr	r2, [r3, #4]
 80a12d4:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a12d6:	685a      	ldr	r2, [r3, #4]
 80a12d8:	9e05      	ldr	r6, [sp, #20]
 80a12da:	1b92      	subs	r2, r2, r6
 80a12dc:	2a45      	cmp	r2, #69	; 0x45
 80a12de:	d9fa      	bls.n	80a12d6 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a12e0:	e7d8      	b.n	80a1294 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a12e2:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a12e4:	2b00      	cmp	r3, #0
 80a12e6:	f43f af7e 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a12ea:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a12ee:	2600      	movs	r6, #0
 80a12f0:	4a17      	ldr	r2, [pc, #92]	; (80a1350 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a12f2:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a12f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a12f8:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a12fa:	3b04      	subs	r3, #4
 80a12fc:	b29b      	uxth	r3, r3
 80a12fe:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1302:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a1306:	b2db      	uxtb	r3, r3
 80a1308:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a130c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1310:	b2db      	uxtb	r3, r3
 80a1312:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1316:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a131a:	b2db      	uxtb	r3, r3
 80a131c:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1320:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1324:	b2db      	uxtb	r3, r3
 80a1326:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a132a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a132e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1332:	041b      	lsls	r3, r3, #16
 80a1334:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a1338:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a133c:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a1340:	433b      	orrs	r3, r7
 80a1342:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a1346:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1348:	f88d 6005 	strb.w	r6, [sp, #5]
 80a134c:	e07f      	b.n	80a144e <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a134e:	bf00      	nop
 80a1350:	20000114 	.word	0x20000114
 80a1354:	e0001000 	.word	0xe0001000
          asm volatile(
 80a1358:	4600      	mov	r0, r0
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a13c6:	79e3      	ldrb	r3, [r4, #7]
 80a13c8:	6810      	ldr	r0, [r2, #0]
 80a13ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13ce:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13d6:	88b8      	ldrh	r0, [r7, #4]
 80a13d8:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a13da:	4600      	mov	r0, r0
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
        mask >>= 1;
 80a1438:	9b04      	ldr	r3, [sp, #16]
 80a143a:	085b      	lsrs	r3, r3, #1
 80a143c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a143e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1442:	3301      	adds	r3, #1
 80a1444:	b2db      	uxtb	r3, r3
 80a1446:	2b1f      	cmp	r3, #31
 80a1448:	f88d 3005 	strb.w	r3, [sp, #5]
 80a144c:	d87e      	bhi.n	80a154c <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a144e:	79e3      	ldrb	r3, [r4, #7]
 80a1450:	6810      	ldr	r0, [r2, #0]
 80a1452:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1456:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a145a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a145e:	88b8      	ldrh	r0, [r7, #4]
 80a1460:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1462:	9803      	ldr	r0, [sp, #12]
 80a1464:	9b04      	ldr	r3, [sp, #16]
 80a1466:	4218      	tst	r0, r3
 80a1468:	f47f af76 	bne.w	80a1358 <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a146c:	4600      	mov	r0, r0
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1494:	79e3      	ldrb	r3, [r4, #7]
 80a1496:	6810      	ldr	r0, [r2, #0]
 80a1498:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a149c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14a4:	88b8      	ldrh	r0, [r7, #4]
 80a14a6:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a14a8:	4600      	mov	r0, r0
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	e775      	b.n	80a1438 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a154c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1550:	b29b      	uxth	r3, r3
 80a1552:	2b00      	cmp	r3, #0
 80a1554:	f47f aecd 	bne.w	80a12f2 <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a1558:	e645      	b.n	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a155a:	2d03      	cmp	r5, #3
 80a155c:	f000 8128 	beq.w	80a17b0 <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1560:	2b00      	cmp	r3, #0
 80a1562:	f43f ae40 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1566:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a156a:	2600      	movs	r6, #0
 80a156c:	4a16      	ldr	r2, [pc, #88]	; (80a15c8 <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a156e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1570:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1574:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a1576:	3b03      	subs	r3, #3
 80a1578:	b29b      	uxth	r3, r3
 80a157a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a157e:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a1580:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a1582:	b2db      	uxtb	r3, r3
 80a1584:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1588:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a158a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a158e:	b2db      	uxtb	r3, r3
 80a1590:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1594:	788b      	ldrb	r3, [r1, #2]
 80a1596:	3103      	adds	r1, #3
 80a1598:	b2db      	uxtb	r3, r3
 80a159a:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a159e:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a15a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a15a6:	021b      	lsls	r3, r3, #8
 80a15a8:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a15ac:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a15b0:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a15b4:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a15b8:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a15ba:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a15be:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a15c2:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a15c6:	e07a      	b.n	80a16be <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a15c8:	20000114 	.word	0x20000114
          mask >>= 1; // Do this task during the long delay of this bit
 80a15cc:	9b04      	ldr	r3, [sp, #16]
 80a15ce:	085b      	lsrs	r3, r3, #1
 80a15d0:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a15d2:	4600      	mov	r0, r0
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1658:	79e0      	ldrb	r0, [r4, #7]
 80a165a:	6817      	ldr	r7, [r2, #0]
          j++;
 80a165c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1660:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1664:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a1668:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a166a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a166e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a1672:	b2db      	uxtb	r3, r3
 80a1674:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1678:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a167a:	4600      	mov	r0, r0
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
          if(j==24) break;
 80a16a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16a8:	2b18      	cmp	r3, #24
 80a16aa:	d07a      	beq.n	80a17a2 <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a16ac:	79e3      	ldrb	r3, [r4, #7]
 80a16ae:	6810      	ldr	r0, [r2, #0]
 80a16b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a16b4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a16b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16bc:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a16be:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a16c0:	9803      	ldr	r0, [sp, #12]
 80a16c2:	9b04      	ldr	r3, [sp, #16]
 80a16c4:	4218      	tst	r0, r3
 80a16c6:	d181      	bne.n	80a15cc <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a16c8:	4600      	mov	r0, r0
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a16ea:	79e3      	ldrb	r3, [r4, #7]
 80a16ec:	6810      	ldr	r0, [r2, #0]
 80a16ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a16f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a16f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16fa:	88b8      	ldrh	r0, [r7, #4]
 80a16fc:	8318      	strh	r0, [r3, #24]
          j++;
 80a16fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1702:	3301      	adds	r3, #1
 80a1704:	b2db      	uxtb	r3, r3
 80a1706:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a170a:	9b04      	ldr	r3, [sp, #16]
 80a170c:	085b      	lsrs	r3, r3, #1
 80a170e:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a1710:	4600      	mov	r0, r0
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
          if(j==24) break;
 80a179a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a179e:	2b18      	cmp	r3, #24
 80a17a0:	d184      	bne.n	80a16ac <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a17a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a17a6:	b29b      	uxth	r3, r3
 80a17a8:	2b00      	cmp	r3, #0
 80a17aa:	f47f aee0 	bne.w	80a156e <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a17ae:	e51a      	b.n	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a17b0:	2b00      	cmp	r3, #0
 80a17b2:	f43f ad18 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a17b6:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a17ba:	2600      	movs	r6, #0
 80a17bc:	4a12      	ldr	r2, [pc, #72]	; (80a1808 <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a17be:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a17c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a17c4:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a17c6:	3b03      	subs	r3, #3
 80a17c8:	b29b      	uxth	r3, r3
 80a17ca:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a17ce:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a17d2:	b2db      	uxtb	r3, r3
 80a17d4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a17d8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a17dc:	b2db      	uxtb	r3, r3
 80a17de:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a17e2:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a17e6:	b2db      	uxtb	r3, r3
 80a17e8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a17ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a17f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a17f4:	021b      	lsls	r3, r3, #8
 80a17f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a17fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a17fe:	4303      	orrs	r3, r0
 80a1800:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1802:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1806:	e0e0      	b.n	80a19ca <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a1808:	20000114 	.word	0x20000114
          asm volatile(
 80a180c:	4600      	mov	r0, r0
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a192e:	79e3      	ldrb	r3, [r4, #7]
 80a1930:	6810      	ldr	r0, [r2, #0]
 80a1932:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1936:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a193a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a193e:	88b8      	ldrh	r0, [r7, #4]
 80a1940:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1942:	4600      	mov	r0, r0
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
        mask >>= 1;
 80a19b2:	9b04      	ldr	r3, [sp, #16]
 80a19b4:	085b      	lsrs	r3, r3, #1
 80a19b6:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a19b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a19bc:	3301      	adds	r3, #1
 80a19be:	b2db      	uxtb	r3, r3
 80a19c0:	2b17      	cmp	r3, #23
 80a19c2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a19c6:	f200 80eb 	bhi.w	80a1ba0 <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a19ca:	79e3      	ldrb	r3, [r4, #7]
 80a19cc:	6810      	ldr	r0, [r2, #0]
 80a19ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a19d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a19d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a19da:	88b8      	ldrh	r0, [r7, #4]
 80a19dc:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a19de:	9803      	ldr	r0, [sp, #12]
 80a19e0:	9b04      	ldr	r3, [sp, #16]
 80a19e2:	4218      	tst	r0, r3
 80a19e4:	f47f af12 	bne.w	80a180c <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a19e8:	4600      	mov	r0, r0
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1a6a:	79e3      	ldrb	r3, [r4, #7]
 80a1a6c:	6810      	ldr	r0, [r2, #0]
 80a1a6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a72:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1a7a:	88b8      	ldrh	r0, [r7, #4]
 80a1a7c:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1a7e:	4600      	mov	r0, r0
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	e710      	b.n	80a19b2 <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1b90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1b94:	b29b      	uxth	r3, r3
 80a1b96:	2b00      	cmp	r3, #0
 80a1b98:	f47e af96 	bne.w	80a0ac8 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1b9c:	f7ff bb23 	b.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1ba0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1ba4:	b29b      	uxth	r3, r3
 80a1ba6:	2b00      	cmp	r3, #0
 80a1ba8:	f47f ae09 	bne.w	80a17be <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a1bac:	f7ff bb1b 	b.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1bb0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1bb0:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1bb4:	428b      	cmp	r3, r1
 80a1bb6:	d92d      	bls.n	80a1c14 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1bb8:	7a06      	ldrb	r6, [r0, #8]
 80a1bba:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1bbe:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1bc2:	b2d5      	uxtb	r5, r2
 80a1bc4:	b13e      	cbz	r6, 80a1bd6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a1bc6:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a1bc8:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a1bca:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a1bcc:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1bd0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1bd4:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1bd6:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1bda:	68c7      	ldr	r7, [r0, #12]
 80a1bdc:	f1bc 0f06 	cmp.w	ip, #6
 80a1be0:	bf0c      	ite	eq
 80a1be2:	2604      	moveq	r6, #4
 80a1be4:	2603      	movne	r6, #3
 80a1be6:	434e      	muls	r6, r1
 80a1be8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1bec:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a1bee:	f1bc 0f06 	cmp.w	ip, #6
 80a1bf2:	d81d      	bhi.n	80a1c30 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1bf4:	e8df f00c 	tbb	[pc, ip]
 80a1bf8:	04081c04 	.word	0x04081c04
 80a1bfc:	040f      	.short	0x040f
 80a1bfe:	04          	.byte	0x04
 80a1bff:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1c00:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a1c02:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a1c04:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a1c06:	e005      	b.n	80a1c14 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a1c08:	2bfe      	cmp	r3, #254	; 0xfe
 80a1c0a:	bf28      	it	cs
 80a1c0c:	23fe      	movcs	r3, #254	; 0xfe
 80a1c0e:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a1c10:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a1c12:	708c      	strb	r4, [r1, #2]
}
 80a1c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1c16:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1c18:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a1c1a:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1c1c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a1c1e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1c20:	b913      	cbnz	r3, 80a1c28 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a1c22:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1c24:	70ca      	strb	r2, [r1, #3]
        } break;
 80a1c26:	e7f5      	b.n	80a1c14 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1c28:	435a      	muls	r2, r3
 80a1c2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1c2e:	e7f9      	b.n	80a1c24 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a1c30:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1c32:	704c      	strb	r4, [r1, #1]
 80a1c34:	e7e6      	b.n	80a1c04 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a1c36 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1c36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1c3a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1c3e:	4770      	bx	lr

080a1c40 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1c40:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1c42:	f000 f8f9 	bl	80a1e38 <HAL_Pin_Map>
 80a1c46:	4b01      	ldr	r3, [pc, #4]	; (80a1c4c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1c48:	6018      	str	r0, [r3, #0]
}
 80a1c4a:	bd08      	pop	{r3, pc}
 80a1c4c:	20000114 	.word	0x20000114

080a1c50 <_ZN7rgb_lcdD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class rgb_lcd : public Print 
 80a1c50:	4770      	bx	lr

080a1c52 <_ZN7rgb_lcdD0Ev>:
 80a1c52:	b510      	push	{r4, lr}
 80a1c54:	4604      	mov	r4, r0
 80a1c56:	2110      	movs	r1, #16
 80a1c58:	f7fe fa23 	bl	80a00a2 <_ZdlPvj>
 80a1c5c:	4620      	mov	r0, r4
 80a1c5e:	bd10      	pop	{r4, pc}

080a1c60 <_Z14i2c_send_byteSPhh>:
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80a1c60:	b570      	push	{r4, r5, r6, lr}
 80a1c62:	460e      	mov	r6, r1
 80a1c64:	4605      	mov	r5, r0
    Wire.beginTransmission(LCD_ADDRESS);        // transmit to device #4
 80a1c66:	f001 fc75 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1c6a:	213e      	movs	r1, #62	; 0x3e
 80a1c6c:	f001 fa96 	bl	80a319c <_ZN7TwoWire17beginTransmissionEi>
    for(int i=0; i<len; i++)
 80a1c70:	2400      	movs	r4, #0
 80a1c72:	42a6      	cmp	r6, r4
 80a1c74:	dd07      	ble.n	80a1c86 <_Z14i2c_send_byteSPhh+0x26>
    {
        Wire.write(dta[i]);
 80a1c76:	f001 fc6d 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1c7a:	6803      	ldr	r3, [r0, #0]
 80a1c7c:	5d29      	ldrb	r1, [r5, r4]
 80a1c7e:	689b      	ldr	r3, [r3, #8]
 80a1c80:	4798      	blx	r3
    for(int i=0; i<len; i++)
 80a1c82:	3401      	adds	r4, #1
 80a1c84:	e7f5      	b.n	80a1c72 <_Z14i2c_send_byteSPhh+0x12>
    }
    Wire.endTransmission();                     // stop transmitting
 80a1c86:	f001 fc65 	bl	80a3554 <_Z19__fetch_global_Wirev>
}
 80a1c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();                     // stop transmitting
 80a1c8e:	f001 ba8c 	b.w	80a31aa <_ZN7TwoWire15endTransmissionEv>

080a1c92 <_ZN7rgb_lcd5writeEh>:

// send data
inline size_t rgb_lcd::write(uint8_t value)
{

    unsigned char dta[2] = {0x40, value};
 80a1c92:	2340      	movs	r3, #64	; 0x40
{
 80a1c94:	b507      	push	{r0, r1, r2, lr}
    unsigned char dta[2] = {0x40, value};
 80a1c96:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1c9a:	a801      	add	r0, sp, #4
 80a1c9c:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x40, value};
 80a1c9e:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1ca2:	f7ff ffdd 	bl	80a1c60 <_Z14i2c_send_byteSPhh>
    return 1; // assume sucess
}
 80a1ca6:	2001      	movs	r0, #1
 80a1ca8:	b003      	add	sp, #12
 80a1caa:	f85d fb04 	ldr.w	pc, [sp], #4

080a1cae <_ZN7rgb_lcd7commandEh.constprop.0>:
    unsigned char dta[2] = {0x80, value};
 80a1cae:	2380      	movs	r3, #128	; 0x80
inline void rgb_lcd::command(uint8_t value)
 80a1cb0:	b507      	push	{r0, r1, r2, lr}
    i2c_send_byteS(dta, 2);
 80a1cb2:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, value};
 80a1cb4:	f88d 0005 	strb.w	r0, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1cb8:	a801      	add	r0, sp, #4
    unsigned char dta[2] = {0x80, value};
 80a1cba:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1cbe:	f7ff ffcf 	bl	80a1c60 <_Z14i2c_send_byteSPhh>
}
 80a1cc2:	b003      	add	sp, #12
 80a1cc4:	f85d fb04 	ldr.w	pc, [sp], #4

080a1cc8 <_ZN7rgb_lcdC1Ev>:
    Print() : write_error(0) {}
 80a1cc8:	2200      	movs	r2, #0
 80a1cca:	6042      	str	r2, [r0, #4]
rgb_lcd::rgb_lcd()
 80a1ccc:	4a01      	ldr	r2, [pc, #4]	; (80a1cd4 <_ZN7rgb_lcdC1Ev+0xc>)
 80a1cce:	6002      	str	r2, [r0, #0]
}
 80a1cd0:	4770      	bx	lr
 80a1cd2:	bf00      	nop
 80a1cd4:	080a4724 	.word	0x080a4724

080a1cd8 <_ZN7rgb_lcd5clearEv>:
{
 80a1cd8:	b508      	push	{r3, lr}
    command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80a1cda:	2001      	movs	r0, #1
 80a1cdc:	f7ff ffe7 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
}
 80a1ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1ce4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a1ce8:	f000 b8e6 	b.w	80a1eb8 <HAL_Delay_Microseconds>

080a1cec <_ZN7rgb_lcd9setCursorEhh>:
{
 80a1cec:	b507      	push	{r0, r1, r2, lr}
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1cee:	b96a      	cbnz	r2, 80a1d0c <_ZN7rgb_lcd9setCursorEhh+0x20>
 80a1cf0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    unsigned char dta[2] = {0x80, col};
 80a1cf4:	2380      	movs	r3, #128	; 0x80
 80a1cf6:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1cfa:	a801      	add	r0, sp, #4
 80a1cfc:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, col};
 80a1cfe:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1d02:	f7ff ffad 	bl	80a1c60 <_Z14i2c_send_byteSPhh>
}
 80a1d06:	b003      	add	sp, #12
 80a1d08:	f85d fb04 	ldr.w	pc, [sp], #4
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1d0c:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80a1d10:	e7f0      	b.n	80a1cf4 <_ZN7rgb_lcd9setCursorEhh+0x8>

080a1d12 <_ZN7rgb_lcd7displayEv>:
    _displaycontrol |= LCD_DISPLAYON;
 80a1d12:	7a43      	ldrb	r3, [r0, #9]
 80a1d14:	f043 0204 	orr.w	r2, r3, #4
 80a1d18:	7242      	strb	r2, [r0, #9]
    command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a1d1a:	f043 000c 	orr.w	r0, r3, #12
 80a1d1e:	f7ff bfc6 	b.w	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>

080a1d22 <_ZN7rgb_lcd6setRegEhh>:

void rgb_lcd::setReg(unsigned char addr, unsigned char dta)
{
 80a1d22:	b538      	push	{r3, r4, r5, lr}
 80a1d24:	4614      	mov	r4, r2
 80a1d26:	460d      	mov	r5, r1
    Wire.beginTransmission(RGB_ADDRESS); // transmit to device #4
 80a1d28:	f001 fc14 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1d2c:	2162      	movs	r1, #98	; 0x62
 80a1d2e:	f001 fa35 	bl	80a319c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(addr);
 80a1d32:	f001 fc0f 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1d36:	6803      	ldr	r3, [r0, #0]
 80a1d38:	4629      	mov	r1, r5
 80a1d3a:	689b      	ldr	r3, [r3, #8]
 80a1d3c:	4798      	blx	r3
    Wire.write(dta);
 80a1d3e:	f001 fc09 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1d42:	6803      	ldr	r3, [r0, #0]
 80a1d44:	4621      	mov	r1, r4
 80a1d46:	689b      	ldr	r3, [r3, #8]
 80a1d48:	4798      	blx	r3
    Wire.endTransmission();    // stop transmitting
 80a1d4a:	f001 fc03 	bl	80a3554 <_Z19__fetch_global_Wirev>
}
 80a1d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();    // stop transmitting
 80a1d52:	f001 ba2a 	b.w	80a31aa <_ZN7TwoWire15endTransmissionEv>

080a1d56 <_ZN7rgb_lcd6setRGBEhhh>:

void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80a1d56:	b570      	push	{r4, r5, r6, lr}
 80a1d58:	4604      	mov	r4, r0
 80a1d5a:	4616      	mov	r6, r2
 80a1d5c:	461d      	mov	r5, r3
    setReg(REG_RED, r);
 80a1d5e:	460a      	mov	r2, r1
 80a1d60:	2104      	movs	r1, #4
 80a1d62:	f7ff ffde 	bl	80a1d22 <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_GREEN, g);
 80a1d66:	4632      	mov	r2, r6
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	2103      	movs	r1, #3
 80a1d6c:	f7ff ffd9 	bl	80a1d22 <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_BLUE, b);
 80a1d70:	462a      	mov	r2, r5
 80a1d72:	4620      	mov	r0, r4
}
 80a1d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setReg(REG_BLUE, b);
 80a1d78:	2102      	movs	r1, #2
 80a1d7a:	f7ff bfd2 	b.w	80a1d22 <_ZN7rgb_lcd6setRegEhh>

080a1d7e <_ZN7rgb_lcd5beginEhhh>:
{
 80a1d7e:	b570      	push	{r4, r5, r6, lr}
 80a1d80:	4615      	mov	r5, r2
 80a1d82:	4604      	mov	r4, r0
 80a1d84:	461e      	mov	r6, r3
    Wire.begin();
 80a1d86:	f001 fbe5 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a1d8a:	f001 f9fd 	bl	80a3188 <_ZN7TwoWire5beginEv>
    if (lines > 1) {
 80a1d8e:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_2LINE;
 80a1d90:	bf88      	it	hi
 80a1d92:	7a23      	ldrbhi	r3, [r4, #8]
    _numlines = lines;
 80a1d94:	7325      	strb	r5, [r4, #12]
        _displayfunction |= LCD_2LINE;
 80a1d96:	bf84      	itt	hi
 80a1d98:	f043 0308 	orrhi.w	r3, r3, #8
 80a1d9c:	7223      	strbhi	r3, [r4, #8]
    _currline = 0;
 80a1d9e:	2300      	movs	r3, #0
 80a1da0:	7363      	strb	r3, [r4, #13]
    if ((dotsize != 0) && (lines == 1)) {
 80a1da2:	b12e      	cbz	r6, 80a1db0 <_ZN7rgb_lcd5beginEhhh+0x32>
 80a1da4:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_5x10DOTS;
 80a1da6:	bf02      	ittt	eq
 80a1da8:	7a23      	ldrbeq	r3, [r4, #8]
 80a1daa:	f043 0304 	orreq.w	r3, r3, #4
 80a1dae:	7223      	strbeq	r3, [r4, #8]
 80a1db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80a1db4:	f000 f880 	bl	80a1eb8 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1db8:	7a20      	ldrb	r0, [r4, #8]
 80a1dba:	f040 0020 	orr.w	r0, r0, #32
 80a1dbe:	f7ff ff76 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1dc2:	f241 1094 	movw	r0, #4500	; 0x1194
 80a1dc6:	f000 f877 	bl	80a1eb8 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1dca:	7a20      	ldrb	r0, [r4, #8]
 80a1dcc:	f040 0020 	orr.w	r0, r0, #32
 80a1dd0:	f7ff ff6d 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1dd4:	2096      	movs	r0, #150	; 0x96
 80a1dd6:	f000 f86f 	bl	80a1eb8 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1dda:	7a20      	ldrb	r0, [r4, #8]
 80a1ddc:	f040 0020 	orr.w	r0, r0, #32
 80a1de0:	f7ff ff65 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1de4:	7a20      	ldrb	r0, [r4, #8]
 80a1de6:	f040 0020 	orr.w	r0, r0, #32
 80a1dea:	f7ff ff60 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1dee:	2304      	movs	r3, #4
    display();
 80a1df0:	4620      	mov	r0, r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1df2:	7263      	strb	r3, [r4, #9]
    display();
 80a1df4:	f7ff ff8d 	bl	80a1d12 <_ZN7rgb_lcd7displayEv>
    clear();
 80a1df8:	4620      	mov	r0, r4
 80a1dfa:	f7ff ff6d 	bl	80a1cd8 <_ZN7rgb_lcd5clearEv>
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1dfe:	2302      	movs	r3, #2
    command(LCD_ENTRYMODESET | _displaymode);
 80a1e00:	2006      	movs	r0, #6
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1e02:	72a3      	strb	r3, [r4, #10]
    command(LCD_ENTRYMODESET | _displaymode);
 80a1e04:	f7ff ff53 	bl	80a1cae <_ZN7rgb_lcd7commandEh.constprop.0>
    setReg(0, 0);
 80a1e08:	2200      	movs	r2, #0
 80a1e0a:	4620      	mov	r0, r4
 80a1e0c:	4611      	mov	r1, r2
 80a1e0e:	f7ff ff88 	bl	80a1d22 <_ZN7rgb_lcd6setRegEhh>
    setReg(1, 0);
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	2200      	movs	r2, #0
 80a1e16:	2101      	movs	r1, #1
 80a1e18:	f7ff ff83 	bl	80a1d22 <_ZN7rgb_lcd6setRegEhh>
    setReg(0x08, 0xAA);     // all led control by pwm
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	22aa      	movs	r2, #170	; 0xaa
 80a1e20:	2108      	movs	r1, #8
 80a1e22:	f7ff ff7e 	bl	80a1d22 <_ZN7rgb_lcd6setRegEhh>
  void setRGB(unsigned char r, unsigned char g, unsigned char b);               // set rgb
  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      // set pwm
  
  void setColor(unsigned char color);
  void setColorAll(){setRGB(0, 0, 0);}
  void setColorWhite(){setRGB(255, 255, 255);}
 80a1e26:	23ff      	movs	r3, #255	; 0xff
 80a1e28:	4620      	mov	r0, r4
}
 80a1e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1e2e:	461a      	mov	r2, r3
 80a1e30:	4619      	mov	r1, r3
 80a1e32:	f7ff bf90 	b.w	80a1d56 <_ZN7rgb_lcd6setRGBEhhh>
	...

080a1e38 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1e38:	b508      	push	{r3, lr}
 80a1e3a:	4b02      	ldr	r3, [pc, #8]	; (80a1e44 <HAL_Pin_Map+0xc>)
 80a1e3c:	681b      	ldr	r3, [r3, #0]
 80a1e3e:	681b      	ldr	r3, [r3, #0]
 80a1e40:	9301      	str	r3, [sp, #4]
 80a1e42:	bd08      	pop	{r3, pc}
 80a1e44:	080601b0 	.word	0x080601b0

080a1e48 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1e48:	b508      	push	{r3, lr}
 80a1e4a:	4b02      	ldr	r3, [pc, #8]	; (80a1e54 <HAL_Validate_Pin_Function+0xc>)
 80a1e4c:	681b      	ldr	r3, [r3, #0]
 80a1e4e:	685b      	ldr	r3, [r3, #4]
 80a1e50:	9301      	str	r3, [sp, #4]
 80a1e52:	bd08      	pop	{r3, pc}
 80a1e54:	080601b0 	.word	0x080601b0

080a1e58 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1e58:	b508      	push	{r3, lr}
 80a1e5a:	4b02      	ldr	r3, [pc, #8]	; (80a1e64 <HAL_Pin_Mode+0xc>)
 80a1e5c:	681b      	ldr	r3, [r3, #0]
 80a1e5e:	689b      	ldr	r3, [r3, #8]
 80a1e60:	9301      	str	r3, [sp, #4]
 80a1e62:	bd08      	pop	{r3, pc}
 80a1e64:	080601b0 	.word	0x080601b0

080a1e68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1e68:	b508      	push	{r3, lr}
 80a1e6a:	4b02      	ldr	r3, [pc, #8]	; (80a1e74 <HAL_Get_Pin_Mode+0xc>)
 80a1e6c:	681b      	ldr	r3, [r3, #0]
 80a1e6e:	68db      	ldr	r3, [r3, #12]
 80a1e70:	9301      	str	r3, [sp, #4]
 80a1e72:	bd08      	pop	{r3, pc}
 80a1e74:	080601b0 	.word	0x080601b0

080a1e78 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1e78:	b508      	push	{r3, lr}
 80a1e7a:	4b02      	ldr	r3, [pc, #8]	; (80a1e84 <HAL_GPIO_Write+0xc>)
 80a1e7c:	681b      	ldr	r3, [r3, #0]
 80a1e7e:	691b      	ldr	r3, [r3, #16]
 80a1e80:	9301      	str	r3, [sp, #4]
 80a1e82:	bd08      	pop	{r3, pc}
 80a1e84:	080601b0 	.word	0x080601b0

080a1e88 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1e88:	b508      	push	{r3, lr}
 80a1e8a:	4b02      	ldr	r3, [pc, #8]	; (80a1e94 <HAL_GPIO_Read+0xc>)
 80a1e8c:	681b      	ldr	r3, [r3, #0]
 80a1e8e:	695b      	ldr	r3, [r3, #20]
 80a1e90:	9301      	str	r3, [sp, #4]
 80a1e92:	bd08      	pop	{r3, pc}
 80a1e94:	080601b0 	.word	0x080601b0

080a1e98 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a1e98:	b508      	push	{r3, lr}
 80a1e9a:	4b02      	ldr	r3, [pc, #8]	; (80a1ea4 <hal_adc_read+0xc>)
 80a1e9c:	681b      	ldr	r3, [r3, #0]
 80a1e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ea0:	9301      	str	r3, [sp, #4]
 80a1ea2:	bd08      	pop	{r3, pc}
 80a1ea4:	080601b0 	.word	0x080601b0

080a1ea8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1ea8:	b508      	push	{r3, lr}
 80a1eaa:	4b02      	ldr	r3, [pc, #8]	; (80a1eb4 <HAL_RNG_GetRandomNumber+0xc>)
 80a1eac:	681b      	ldr	r3, [r3, #0]
 80a1eae:	685b      	ldr	r3, [r3, #4]
 80a1eb0:	9301      	str	r3, [sp, #4]
 80a1eb2:	bd08      	pop	{r3, pc}
 80a1eb4:	0806019c 	.word	0x0806019c

080a1eb8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1eb8:	b508      	push	{r3, lr}
 80a1eba:	4b02      	ldr	r3, [pc, #8]	; (80a1ec4 <HAL_Delay_Microseconds+0xc>)
 80a1ebc:	681b      	ldr	r3, [r3, #0]
 80a1ebe:	68db      	ldr	r3, [r3, #12]
 80a1ec0:	9301      	str	r3, [sp, #4]
 80a1ec2:	bd08      	pop	{r3, pc}
 80a1ec4:	0806019c 	.word	0x0806019c

080a1ec8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1ec8:	b508      	push	{r3, lr}
 80a1eca:	4b02      	ldr	r3, [pc, #8]	; (80a1ed4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1ecc:	681b      	ldr	r3, [r3, #0]
 80a1ece:	691b      	ldr	r3, [r3, #16]
 80a1ed0:	9301      	str	r3, [sp, #4]
 80a1ed2:	bd08      	pop	{r3, pc}
 80a1ed4:	0806019c 	.word	0x0806019c

080a1ed8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1ed8:	b508      	push	{r3, lr}
 80a1eda:	4b02      	ldr	r3, [pc, #8]	; (80a1ee4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1edc:	681b      	ldr	r3, [r3, #0]
 80a1ede:	695b      	ldr	r3, [r3, #20]
 80a1ee0:	9301      	str	r3, [sp, #4]
 80a1ee2:	bd08      	pop	{r3, pc}
 80a1ee4:	0806019c 	.word	0x0806019c

080a1ee8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1ee8:	b508      	push	{r3, lr}
 80a1eea:	4b02      	ldr	r3, [pc, #8]	; (80a1ef4 <os_mutex_recursive_create+0xc>)
 80a1eec:	681b      	ldr	r3, [r3, #0]
 80a1eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1ef0:	9301      	str	r3, [sp, #4]
 80a1ef2:	bd08      	pop	{r3, pc}
 80a1ef4:	080601d0 	.word	0x080601d0

080a1ef8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1ef8:	b508      	push	{r3, lr}
 80a1efa:	4b02      	ldr	r3, [pc, #8]	; (80a1f04 <os_mutex_recursive_destroy+0xc>)
 80a1efc:	681b      	ldr	r3, [r3, #0]
 80a1efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1f00:	9301      	str	r3, [sp, #4]
 80a1f02:	bd08      	pop	{r3, pc}
 80a1f04:	080601d0 	.word	0x080601d0

080a1f08 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1f08:	b508      	push	{r3, lr}
 80a1f0a:	4b02      	ldr	r3, [pc, #8]	; (80a1f14 <hal_usart_write+0xc>)
 80a1f0c:	681b      	ldr	r3, [r3, #0]
 80a1f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1f10:	9301      	str	r3, [sp, #4]
 80a1f12:	bd08      	pop	{r3, pc}
 80a1f14:	080601c4 	.word	0x080601c4

080a1f18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1f18:	b508      	push	{r3, lr}
 80a1f1a:	4b02      	ldr	r3, [pc, #8]	; (80a1f24 <hal_usart_available+0xc>)
 80a1f1c:	681b      	ldr	r3, [r3, #0]
 80a1f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1f20:	9301      	str	r3, [sp, #4]
 80a1f22:	bd08      	pop	{r3, pc}
 80a1f24:	080601c4 	.word	0x080601c4

080a1f28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1f28:	b508      	push	{r3, lr}
 80a1f2a:	4b02      	ldr	r3, [pc, #8]	; (80a1f34 <hal_usart_read+0xc>)
 80a1f2c:	681b      	ldr	r3, [r3, #0]
 80a1f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1f30:	9301      	str	r3, [sp, #4]
 80a1f32:	bd08      	pop	{r3, pc}
 80a1f34:	080601c4 	.word	0x080601c4

080a1f38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1f38:	b508      	push	{r3, lr}
 80a1f3a:	4b02      	ldr	r3, [pc, #8]	; (80a1f44 <hal_usart_peek+0xc>)
 80a1f3c:	681b      	ldr	r3, [r3, #0]
 80a1f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f40:	9301      	str	r3, [sp, #4]
 80a1f42:	bd08      	pop	{r3, pc}
 80a1f44:	080601c4 	.word	0x080601c4

080a1f48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1f48:	b508      	push	{r3, lr}
 80a1f4a:	4b02      	ldr	r3, [pc, #8]	; (80a1f54 <hal_usart_flush+0xc>)
 80a1f4c:	681b      	ldr	r3, [r3, #0]
 80a1f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f50:	9301      	str	r3, [sp, #4]
 80a1f52:	bd08      	pop	{r3, pc}
 80a1f54:	080601c4 	.word	0x080601c4

080a1f58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1f58:	b508      	push	{r3, lr}
 80a1f5a:	4b02      	ldr	r3, [pc, #8]	; (80a1f64 <hal_usart_is_enabled+0xc>)
 80a1f5c:	681b      	ldr	r3, [r3, #0]
 80a1f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1f60:	9301      	str	r3, [sp, #4]
 80a1f62:	bd08      	pop	{r3, pc}
 80a1f64:	080601c4 	.word	0x080601c4

080a1f68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1f68:	b508      	push	{r3, lr}
 80a1f6a:	4b02      	ldr	r3, [pc, #8]	; (80a1f74 <hal_usart_available_data_for_write+0xc>)
 80a1f6c:	681b      	ldr	r3, [r3, #0]
 80a1f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1f70:	9301      	str	r3, [sp, #4]
 80a1f72:	bd08      	pop	{r3, pc}
 80a1f74:	080601c4 	.word	0x080601c4

080a1f78 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1f78:	b508      	push	{r3, lr}
 80a1f7a:	4b02      	ldr	r3, [pc, #8]	; (80a1f84 <hal_usart_init_ex+0xc>)
 80a1f7c:	681b      	ldr	r3, [r3, #0]
 80a1f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1f80:	9301      	str	r3, [sp, #4]
 80a1f82:	bd08      	pop	{r3, pc}
 80a1f84:	080601c4 	.word	0x080601c4

080a1f88 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1f88:	b508      	push	{r3, lr}
 80a1f8a:	4b02      	ldr	r3, [pc, #8]	; (80a1f94 <hal_i2c_begin+0xc>)
 80a1f8c:	681b      	ldr	r3, [r3, #0]
 80a1f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1f90:	9301      	str	r3, [sp, #4]
 80a1f92:	bd08      	pop	{r3, pc}
 80a1f94:	080601ac 	.word	0x080601ac

080a1f98 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1f98:	b508      	push	{r3, lr}
 80a1f9a:	4b02      	ldr	r3, [pc, #8]	; (80a1fa4 <hal_i2c_begin_transmission+0xc>)
 80a1f9c:	681b      	ldr	r3, [r3, #0]
 80a1f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1fa0:	9301      	str	r3, [sp, #4]
 80a1fa2:	bd08      	pop	{r3, pc}
 80a1fa4:	080601ac 	.word	0x080601ac

080a1fa8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1fa8:	b508      	push	{r3, lr}
 80a1faa:	4b02      	ldr	r3, [pc, #8]	; (80a1fb4 <hal_i2c_end_transmission+0xc>)
 80a1fac:	681b      	ldr	r3, [r3, #0]
 80a1fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1fb0:	9301      	str	r3, [sp, #4]
 80a1fb2:	bd08      	pop	{r3, pc}
 80a1fb4:	080601ac 	.word	0x080601ac

080a1fb8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1fb8:	b508      	push	{r3, lr}
 80a1fba:	4b02      	ldr	r3, [pc, #8]	; (80a1fc4 <hal_i2c_write+0xc>)
 80a1fbc:	681b      	ldr	r3, [r3, #0]
 80a1fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1fc0:	9301      	str	r3, [sp, #4]
 80a1fc2:	bd08      	pop	{r3, pc}
 80a1fc4:	080601ac 	.word	0x080601ac

080a1fc8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1fc8:	b508      	push	{r3, lr}
 80a1fca:	4b02      	ldr	r3, [pc, #8]	; (80a1fd4 <hal_i2c_available+0xc>)
 80a1fcc:	681b      	ldr	r3, [r3, #0]
 80a1fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1fd0:	9301      	str	r3, [sp, #4]
 80a1fd2:	bd08      	pop	{r3, pc}
 80a1fd4:	080601ac 	.word	0x080601ac

080a1fd8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1fd8:	b508      	push	{r3, lr}
 80a1fda:	4b02      	ldr	r3, [pc, #8]	; (80a1fe4 <hal_i2c_read+0xc>)
 80a1fdc:	681b      	ldr	r3, [r3, #0]
 80a1fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1fe0:	9301      	str	r3, [sp, #4]
 80a1fe2:	bd08      	pop	{r3, pc}
 80a1fe4:	080601ac 	.word	0x080601ac

080a1fe8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1fe8:	b508      	push	{r3, lr}
 80a1fea:	4b02      	ldr	r3, [pc, #8]	; (80a1ff4 <hal_i2c_peek+0xc>)
 80a1fec:	681b      	ldr	r3, [r3, #0]
 80a1fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1ff0:	9301      	str	r3, [sp, #4]
 80a1ff2:	bd08      	pop	{r3, pc}
 80a1ff4:	080601ac 	.word	0x080601ac

080a1ff8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1ff8:	b508      	push	{r3, lr}
 80a1ffa:	4b02      	ldr	r3, [pc, #8]	; (80a2004 <hal_i2c_flush+0xc>)
 80a1ffc:	681b      	ldr	r3, [r3, #0]
 80a1ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2000:	9301      	str	r3, [sp, #4]
 80a2002:	bd08      	pop	{r3, pc}
 80a2004:	080601ac 	.word	0x080601ac

080a2008 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2008:	b508      	push	{r3, lr}
 80a200a:	4b02      	ldr	r3, [pc, #8]	; (80a2014 <hal_i2c_is_enabled+0xc>)
 80a200c:	681b      	ldr	r3, [r3, #0]
 80a200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2010:	9301      	str	r3, [sp, #4]
 80a2012:	bd08      	pop	{r3, pc}
 80a2014:	080601ac 	.word	0x080601ac

080a2018 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2018:	b508      	push	{r3, lr}
 80a201a:	4b03      	ldr	r3, [pc, #12]	; (80a2028 <hal_i2c_init+0x10>)
 80a201c:	681b      	ldr	r3, [r3, #0]
 80a201e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2022:	9301      	str	r3, [sp, #4]
 80a2024:	bd08      	pop	{r3, pc}
 80a2026:	0000      	.short	0x0000
 80a2028:	080601ac 	.word	0x080601ac

080a202c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a202c:	b508      	push	{r3, lr}
 80a202e:	4b02      	ldr	r3, [pc, #8]	; (80a2038 <hal_spi_init+0xc>)
 80a2030:	681b      	ldr	r3, [r3, #0]
 80a2032:	69db      	ldr	r3, [r3, #28]
 80a2034:	9301      	str	r3, [sp, #4]
 80a2036:	bd08      	pop	{r3, pc}
 80a2038:	080601b4 	.word	0x080601b4

080a203c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a203c:	b508      	push	{r3, lr}
 80a203e:	4b02      	ldr	r3, [pc, #8]	; (80a2048 <hal_spi_is_enabled+0xc>)
 80a2040:	681b      	ldr	r3, [r3, #0]
 80a2042:	6a1b      	ldr	r3, [r3, #32]
 80a2044:	9301      	str	r3, [sp, #4]
 80a2046:	bd08      	pop	{r3, pc}
 80a2048:	080601b4 	.word	0x080601b4

080a204c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a204c:	b508      	push	{r3, lr}
 80a204e:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <HAL_USB_USART_Init+0xc>)
 80a2050:	681b      	ldr	r3, [r3, #0]
 80a2052:	681b      	ldr	r3, [r3, #0]
 80a2054:	9301      	str	r3, [sp, #4]
 80a2056:	bd08      	pop	{r3, pc}
 80a2058:	080601d8 	.word	0x080601d8

080a205c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a205c:	b508      	push	{r3, lr}
 80a205e:	4b02      	ldr	r3, [pc, #8]	; (80a2068 <HAL_USB_USART_Begin+0xc>)
 80a2060:	681b      	ldr	r3, [r3, #0]
 80a2062:	685b      	ldr	r3, [r3, #4]
 80a2064:	9301      	str	r3, [sp, #4]
 80a2066:	bd08      	pop	{r3, pc}
 80a2068:	080601d8 	.word	0x080601d8

080a206c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a206c:	b508      	push	{r3, lr}
 80a206e:	4b02      	ldr	r3, [pc, #8]	; (80a2078 <HAL_USB_USART_Available_Data+0xc>)
 80a2070:	681b      	ldr	r3, [r3, #0]
 80a2072:	691b      	ldr	r3, [r3, #16]
 80a2074:	9301      	str	r3, [sp, #4]
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	080601d8 	.word	0x080601d8

080a207c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	695b      	ldr	r3, [r3, #20]
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601d8 	.word	0x080601d8

080a208c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <HAL_USB_USART_Receive_Data+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	699b      	ldr	r3, [r3, #24]
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601d8 	.word	0x080601d8

080a209c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <HAL_USB_USART_Send_Data+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	69db      	ldr	r3, [r3, #28]
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601d8 	.word	0x080601d8

080a20ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a20ac:	b508      	push	{r3, lr}
 80a20ae:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <HAL_USB_USART_Flush_Data+0xc>)
 80a20b0:	681b      	ldr	r3, [r3, #0]
 80a20b2:	6a1b      	ldr	r3, [r3, #32]
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	bd08      	pop	{r3, pc}
 80a20b8:	080601d8 	.word	0x080601d8

080a20bc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <inet_gethostbyname+0xc>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a20c4:	9301      	str	r3, [sp, #4]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	080601c0 	.word	0x080601c0

080a20cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a20cc:	b508      	push	{r3, lr}
 80a20ce:	4b02      	ldr	r3, [pc, #8]	; (80a20d8 <set_system_mode+0xc>)
 80a20d0:	681b      	ldr	r3, [r3, #0]
 80a20d2:	685b      	ldr	r3, [r3, #4]
 80a20d4:	9301      	str	r3, [sp, #4]
 80a20d6:	bd08      	pop	{r3, pc}
 80a20d8:	080601a4 	.word	0x080601a4

080a20dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	4b02      	ldr	r3, [pc, #8]	; (80a20e8 <system_delay_ms+0xc>)
 80a20e0:	681b      	ldr	r3, [r3, #0]
 80a20e2:	695b      	ldr	r3, [r3, #20]
 80a20e4:	9301      	str	r3, [sp, #4]
 80a20e6:	bd08      	pop	{r3, pc}
 80a20e8:	080601a4 	.word	0x080601a4

080a20ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a20ec:	b508      	push	{r3, lr}
 80a20ee:	4b02      	ldr	r3, [pc, #8]	; (80a20f8 <application_thread_current+0xc>)
 80a20f0:	681b      	ldr	r3, [r3, #0]
 80a20f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a20f4:	9301      	str	r3, [sp, #4]
 80a20f6:	bd08      	pop	{r3, pc}
 80a20f8:	080601a4 	.word	0x080601a4

080a20fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a20fc:	b508      	push	{r3, lr}
 80a20fe:	4b02      	ldr	r3, [pc, #8]	; (80a2108 <application_thread_invoke+0xc>)
 80a2100:	681b      	ldr	r3, [r3, #0]
 80a2102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2104:	9301      	str	r3, [sp, #4]
 80a2106:	bd08      	pop	{r3, pc}
 80a2108:	080601a4 	.word	0x080601a4

080a210c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a210c:	b508      	push	{r3, lr}
 80a210e:	4b03      	ldr	r3, [pc, #12]	; (80a211c <system_ctrl_set_app_request_handler+0x10>)
 80a2110:	681b      	ldr	r3, [r3, #0]
 80a2112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2116:	9301      	str	r3, [sp, #4]
 80a2118:	bd08      	pop	{r3, pc}
 80a211a:	0000      	.short	0x0000
 80a211c:	080601a4 	.word	0x080601a4

080a2120 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2120:	b508      	push	{r3, lr}
 80a2122:	4b03      	ldr	r3, [pc, #12]	; (80a2130 <system_ctrl_set_result+0x10>)
 80a2124:	681b      	ldr	r3, [r3, #0]
 80a2126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a212a:	9301      	str	r3, [sp, #4]
 80a212c:	bd08      	pop	{r3, pc}
 80a212e:	0000      	.short	0x0000
 80a2130:	080601a4 	.word	0x080601a4

080a2134 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2134:	b508      	push	{r3, lr}
 80a2136:	4b02      	ldr	r3, [pc, #8]	; (80a2140 <network_connect+0xc>)
 80a2138:	681b      	ldr	r3, [r3, #0]
 80a213a:	685b      	ldr	r3, [r3, #4]
 80a213c:	9301      	str	r3, [sp, #4]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	080601c8 	.word	0x080601c8

080a2144 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2144:	b508      	push	{r3, lr}
 80a2146:	4b02      	ldr	r3, [pc, #8]	; (80a2150 <network_connecting+0xc>)
 80a2148:	681b      	ldr	r3, [r3, #0]
 80a214a:	689b      	ldr	r3, [r3, #8]
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	bd08      	pop	{r3, pc}
 80a2150:	080601c8 	.word	0x080601c8

080a2154 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2154:	b508      	push	{r3, lr}
 80a2156:	4b02      	ldr	r3, [pc, #8]	; (80a2160 <network_disconnect+0xc>)
 80a2158:	681b      	ldr	r3, [r3, #0]
 80a215a:	68db      	ldr	r3, [r3, #12]
 80a215c:	9301      	str	r3, [sp, #4]
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	080601c8 	.word	0x080601c8

080a2164 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2164:	b508      	push	{r3, lr}
 80a2166:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <network_ready+0xc>)
 80a2168:	681b      	ldr	r3, [r3, #0]
 80a216a:	691b      	ldr	r3, [r3, #16]
 80a216c:	9301      	str	r3, [sp, #4]
 80a216e:	bd08      	pop	{r3, pc}
 80a2170:	080601c8 	.word	0x080601c8

080a2174 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <network_on+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	695b      	ldr	r3, [r3, #20]
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601c8 	.word	0x080601c8

080a2184 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <network_off+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	699b      	ldr	r3, [r3, #24]
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601c8 	.word	0x080601c8

080a2194 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <network_listen+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	69db      	ldr	r3, [r3, #28]
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601c8 	.word	0x080601c8

080a21a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <network_listening+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	6a1b      	ldr	r3, [r3, #32]
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601c8 	.word	0x080601c8

080a21b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <network_set_listen_timeout+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601c8 	.word	0x080601c8

080a21c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <network_get_listen_timeout+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601c8 	.word	0x080601c8

080a21d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <network_is_on+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	080601c8 	.word	0x080601c8

080a21e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b02      	ldr	r3, [pc, #8]	; (80a21f0 <network_is_off+0xc>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a21ec:	9301      	str	r3, [sp, #4]
 80a21ee:	bd08      	pop	{r3, pc}
 80a21f0:	080601c8 	.word	0x080601c8

080a21f4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a21f4:	b508      	push	{r3, lr}
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <spark_variable+0xc>)
 80a21f8:	681b      	ldr	r3, [r3, #0]
 80a21fa:	681b      	ldr	r3, [r3, #0]
 80a21fc:	9301      	str	r3, [sp, #4]
 80a21fe:	bd08      	pop	{r3, pc}
 80a2200:	080601cc 	.word	0x080601cc

080a2204 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2204:	b508      	push	{r3, lr}
 80a2206:	4b02      	ldr	r3, [pc, #8]	; (80a2210 <spark_cloud_flag_connected+0xc>)
 80a2208:	681b      	ldr	r3, [r3, #0]
 80a220a:	695b      	ldr	r3, [r3, #20]
 80a220c:	9301      	str	r3, [sp, #4]
 80a220e:	bd08      	pop	{r3, pc}
 80a2210:	080601cc 	.word	0x080601cc

080a2214 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2214:	b508      	push	{r3, lr}
 80a2216:	4b02      	ldr	r3, [pc, #8]	; (80a2220 <spark_send_event+0xc>)
 80a2218:	681b      	ldr	r3, [r3, #0]
 80a221a:	6a1b      	ldr	r3, [r3, #32]
 80a221c:	9301      	str	r3, [sp, #4]
 80a221e:	bd08      	pop	{r3, pc}
 80a2220:	080601cc 	.word	0x080601cc

080a2224 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b02      	ldr	r3, [pc, #8]	; (80a2230 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a222c:	9301      	str	r3, [sp, #4]
 80a222e:	bd08      	pop	{r3, pc}
 80a2230:	080601cc 	.word	0x080601cc

080a2234 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2234:	b508      	push	{r3, lr}
 80a2236:	4b02      	ldr	r3, [pc, #8]	; (80a2240 <malloc+0xc>)
 80a2238:	681b      	ldr	r3, [r3, #0]
 80a223a:	681b      	ldr	r3, [r3, #0]
 80a223c:	9301      	str	r3, [sp, #4]
 80a223e:	bd08      	pop	{r3, pc}
 80a2240:	080601a0 	.word	0x080601a0

080a2244 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2244:	b508      	push	{r3, lr}
 80a2246:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <free+0xc>)
 80a2248:	681b      	ldr	r3, [r3, #0]
 80a224a:	685b      	ldr	r3, [r3, #4]
 80a224c:	9301      	str	r3, [sp, #4]
 80a224e:	bd08      	pop	{r3, pc}
 80a2250:	080601a0 	.word	0x080601a0

080a2254 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2254:	b508      	push	{r3, lr}
 80a2256:	4b02      	ldr	r3, [pc, #8]	; (80a2260 <realloc+0xc>)
 80a2258:	681b      	ldr	r3, [r3, #0]
 80a225a:	689b      	ldr	r3, [r3, #8]
 80a225c:	9301      	str	r3, [sp, #4]
 80a225e:	bd08      	pop	{r3, pc}
 80a2260:	080601a0 	.word	0x080601a0

080a2264 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2264:	b508      	push	{r3, lr}
 80a2266:	4b02      	ldr	r3, [pc, #8]	; (80a2270 <abort+0xc>)
 80a2268:	681b      	ldr	r3, [r3, #0]
 80a226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a226c:	9301      	str	r3, [sp, #4]
 80a226e:	bd08      	pop	{r3, pc}
 80a2270:	080601a0 	.word	0x080601a0

080a2274 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2274:	b508      	push	{r3, lr}
 80a2276:	4b02      	ldr	r3, [pc, #8]	; (80a2280 <_malloc_r+0xc>)
 80a2278:	681b      	ldr	r3, [r3, #0]
 80a227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a227c:	9301      	str	r3, [sp, #4]
 80a227e:	bd08      	pop	{r3, pc}
 80a2280:	080601a0 	.word	0x080601a0

080a2284 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a2284:	b508      	push	{r3, lr}
 80a2286:	4b02      	ldr	r3, [pc, #8]	; (80a2290 <__assert_func+0xc>)
 80a2288:	681b      	ldr	r3, [r3, #0]
 80a228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a228c:	9301      	str	r3, [sp, #4]
 80a228e:	bd08      	pop	{r3, pc}
 80a2290:	080601a0 	.word	0x080601a0

080a2294 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2294:	b508      	push	{r3, lr}
 80a2296:	4b02      	ldr	r3, [pc, #8]	; (80a22a0 <newlib_impure_ptr_callback+0xc>)
 80a2298:	681b      	ldr	r3, [r3, #0]
 80a229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a229c:	9301      	str	r3, [sp, #4]
 80a229e:	bd08      	pop	{r3, pc}
 80a22a0:	080601a0 	.word	0x080601a0

080a22a4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a22a4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a22a6:	2600      	movs	r6, #0
 80a22a8:	4604      	mov	r4, r0
 80a22aa:	460d      	mov	r5, r1
 80a22ac:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a22b0:	f7ff fe1a 	bl	80a1ee8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a22b4:	4628      	mov	r0, r5
    _spi = spi;
 80a22b6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a22b8:	f7ff feb8 	bl	80a202c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a22bc:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a22be:	6066      	str	r6, [r4, #4]
}
 80a22c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a22c4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a22c4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a22c6:	2000      	movs	r0, #0
 80a22c8:	4b04      	ldr	r3, [pc, #16]	; (80a22dc <_GLOBAL__sub_I_System+0x18>)
 80a22ca:	601a      	str	r2, [r3, #0]
 80a22cc:	4b04      	ldr	r3, [pc, #16]	; (80a22e0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a22ce:	4a05      	ldr	r2, [pc, #20]	; (80a22e4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a22d0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a22d4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a22d6:	f7ff bef9 	b.w	80a20cc <set_system_mode>
 80a22da:	bf00      	nop
 80a22dc:	20000124 	.word	0x20000124
 80a22e0:	20000118 	.word	0x20000118
 80a22e4:	ffff0000 	.word	0xffff0000

080a22e8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a22e8:	b510      	push	{r4, lr}
 80a22ea:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a22ec:	f002 f949 	bl	80a4582 <strlen>
 80a22f0:	1e43      	subs	r3, r0, #1
 80a22f2:	4620      	mov	r0, r4
 80a22f4:	4423      	add	r3, r4
	while(i<j){
 80a22f6:	4283      	cmp	r3, r0
 80a22f8:	d906      	bls.n	80a2308 <_Z11str_reversePc+0x20>
		c = *i;
 80a22fa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a22fc:	7819      	ldrb	r1, [r3, #0]
 80a22fe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2302:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a2306:	e7f6      	b.n	80a22f6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a2308:	bd10      	pop	{r4, pc}

080a230a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a230a:	b570      	push	{r4, r5, r6, lr}
 80a230c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a230e:	1e91      	subs	r1, r2, #2
 80a2310:	2922      	cmp	r1, #34	; 0x22
 80a2312:	d81d      	bhi.n	80a2350 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 80a2314:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a2316:	b930      	cbnz	r0, 80a2326 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a2318:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 80a231a:	4423      	add	r3, r4
 80a231c:	429d      	cmp	r5, r3
 80a231e:	d210      	bcs.n	80a2342 <ultoa+0x38>
            *ptr++ = '0';
 80a2320:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 80a2324:	e7fa      	b.n	80a231c <ultoa+0x12>
            result.quot = a/radix;
 80a2326:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a232a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a232e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2330:	2809      	cmp	r0, #9
                *ptr += '0';
 80a2332:	bf94      	ite	ls
 80a2334:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 80a2336:	3157      	addhi	r1, #87	; 0x57
 80a2338:	b2c9      	uxtb	r1, r1
            a = result.quot;
 80a233a:	4630      	mov	r0, r6
 80a233c:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a2340:	e7e9      	b.n	80a2316 <ultoa+0xc>

	*ptr = '\0';
 80a2342:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2344:	4620      	mov	r0, r4
	*ptr = '\0';
 80a2346:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 80a2348:	f7ff ffce 	bl	80a22e8 <_Z11str_reversePc>
	return buffer;
 80a234c:	4620      	mov	r0, r4
}
 80a234e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a2350:	2000      	movs	r0, #0
 80a2352:	e7fc      	b.n	80a234e <ultoa+0x44>

080a2354 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2354:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a2356:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2358:	460c      	mov	r4, r1
 80a235a:	4615      	mov	r5, r2
	if(a<0){
 80a235c:	da0d      	bge.n	80a237a <itoa+0x26>
		*buffer = '-';
 80a235e:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2364:	bf0c      	ite	eq
 80a2366:	4618      	moveq	r0, r3
 80a2368:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a236a:	2301      	movs	r3, #1
		*buffer = '-';
 80a236c:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a236e:	462a      	mov	r2, r5
 80a2370:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a2372:	f7ff ffca 	bl	80a230a <ultoa>
	}
	return buffer;
}
 80a2376:	4620      	mov	r0, r4
 80a2378:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a237a:	2301      	movs	r3, #1
 80a237c:	e7f9      	b.n	80a2372 <itoa+0x1e>

080a237e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a237e:	b510      	push	{r4, lr}
 80a2380:	4604      	mov	r4, r0
{
	free(buffer);
 80a2382:	6800      	ldr	r0, [r0, #0]
 80a2384:	f7ff ff5e 	bl	80a2244 <free>
}
 80a2388:	4620      	mov	r0, r4
 80a238a:	bd10      	pop	{r4, pc}

080a238c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a238c:	b510      	push	{r4, lr}
 80a238e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2390:	6800      	ldr	r0, [r0, #0]
 80a2392:	b108      	cbz	r0, 80a2398 <_ZN6String10invalidateEv+0xc>
 80a2394:	f7ff ff56 	bl	80a2244 <free>
	buffer = NULL;
 80a2398:	2300      	movs	r3, #0
	capacity = len = 0;
 80a239a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a239e:	6023      	str	r3, [r4, #0]
}
 80a23a0:	bd10      	pop	{r4, pc}

080a23a2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a23a2:	b538      	push	{r3, r4, r5, lr}
 80a23a4:	4604      	mov	r4, r0
 80a23a6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a23a8:	6800      	ldr	r0, [r0, #0]
 80a23aa:	3101      	adds	r1, #1
 80a23ac:	f7ff ff52 	bl	80a2254 <realloc>
	if (newbuffer) {
 80a23b0:	b110      	cbz	r0, 80a23b8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a23b2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a23b6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a23b8:	bd38      	pop	{r3, r4, r5, pc}

080a23ba <_ZN6String7reserveEj>:
{
 80a23ba:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a23bc:	6803      	ldr	r3, [r0, #0]
{
 80a23be:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a23c0:	b123      	cbz	r3, 80a23cc <_ZN6String7reserveEj+0x12>
 80a23c2:	6843      	ldr	r3, [r0, #4]
 80a23c4:	428b      	cmp	r3, r1
 80a23c6:	d301      	bcc.n	80a23cc <_ZN6String7reserveEj+0x12>
 80a23c8:	2001      	movs	r0, #1
}
 80a23ca:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a23cc:	4620      	mov	r0, r4
 80a23ce:	f7ff ffe8 	bl	80a23a2 <_ZN6String12changeBufferEj>
 80a23d2:	2800      	cmp	r0, #0
 80a23d4:	d0f9      	beq.n	80a23ca <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a23d6:	68a3      	ldr	r3, [r4, #8]
 80a23d8:	2b00      	cmp	r3, #0
 80a23da:	d1f5      	bne.n	80a23c8 <_ZN6String7reserveEj+0xe>
 80a23dc:	6822      	ldr	r2, [r4, #0]
 80a23de:	7013      	strb	r3, [r2, #0]
 80a23e0:	e7f2      	b.n	80a23c8 <_ZN6String7reserveEj+0xe>

080a23e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a23e2:	b570      	push	{r4, r5, r6, lr}
 80a23e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a23e6:	4611      	mov	r1, r2
{
 80a23e8:	4604      	mov	r4, r0
 80a23ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a23ec:	f7ff ffe5 	bl	80a23ba <_ZN6String7reserveEj>
 80a23f0:	b920      	cbnz	r0, 80a23fc <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a23f2:	4620      	mov	r0, r4
 80a23f4:	f7ff ffca 	bl	80a238c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a23f8:	4620      	mov	r0, r4
 80a23fa:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a23fc:	462a      	mov	r2, r5
 80a23fe:	4631      	mov	r1, r6
 80a2400:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2402:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2404:	f002 f85e 	bl	80a44c4 <memcpy>
	buffer[len] = 0;
 80a2408:	2100      	movs	r1, #0
 80a240a:	6822      	ldr	r2, [r4, #0]
 80a240c:	68a3      	ldr	r3, [r4, #8]
 80a240e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2410:	e7f2      	b.n	80a23f8 <_ZN6String4copyEPKcj+0x16>

080a2412 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2412:	b538      	push	{r3, r4, r5, lr}
 80a2414:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2416:	460c      	mov	r4, r1
 80a2418:	b149      	cbz	r1, 80a242e <_ZN6StringaSEPKc+0x1c>
 80a241a:	4608      	mov	r0, r1
 80a241c:	f002 f8b1 	bl	80a4582 <strlen>
 80a2420:	4621      	mov	r1, r4
 80a2422:	4602      	mov	r2, r0
 80a2424:	4628      	mov	r0, r5
 80a2426:	f7ff ffdc 	bl	80a23e2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a242a:	4628      	mov	r0, r5
 80a242c:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a242e:	f7ff ffad 	bl	80a238c <_ZN6String10invalidateEv>
 80a2432:	e7fa      	b.n	80a242a <_ZN6StringaSEPKc+0x18>

080a2434 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a2434:	b510      	push	{r4, lr}
	buffer = NULL;
 80a2436:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a2438:	4604      	mov	r4, r0
 80a243a:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a243c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a2440:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2442:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a2444:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a2446:	a901      	add	r1, sp, #4
 80a2448:	f7ff ff84 	bl	80a2354 <itoa>
	*this = buf;
 80a244c:	4620      	mov	r0, r4
 80a244e:	a901      	add	r1, sp, #4
 80a2450:	f7ff ffdf 	bl	80a2412 <_ZN6StringaSEPKc>
}
 80a2454:	4620      	mov	r0, r4
 80a2456:	b00a      	add	sp, #40	; 0x28
 80a2458:	bd10      	pop	{r4, pc}

080a245a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a245a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a245c:	4606      	mov	r6, r0
 80a245e:	460d      	mov	r5, r1
  size_t n = 0;
 80a2460:	2400      	movs	r4, #0
 80a2462:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2464:	42bd      	cmp	r5, r7
 80a2466:	d00c      	beq.n	80a2482 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2468:	6833      	ldr	r3, [r6, #0]
 80a246a:	4630      	mov	r0, r6
 80a246c:	689b      	ldr	r3, [r3, #8]
 80a246e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2472:	4798      	blx	r3
     if (chunk>=0)
 80a2474:	1e03      	subs	r3, r0, #0
 80a2476:	db01      	blt.n	80a247c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2478:	441c      	add	r4, r3
  while (size--) {
 80a247a:	e7f3      	b.n	80a2464 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a247c:	2c00      	cmp	r4, #0
 80a247e:	bf08      	it	eq
 80a2480:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2482:	4620      	mov	r0, r4
 80a2484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2486 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2486:	b570      	push	{r4, r5, r6, lr}
 80a2488:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a248a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a248c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a248e:	b149      	cbz	r1, 80a24a4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2490:	f002 f877 	bl	80a4582 <strlen>
 80a2494:	682b      	ldr	r3, [r5, #0]
 80a2496:	4602      	mov	r2, r0
 80a2498:	4621      	mov	r1, r4
 80a249a:	4628      	mov	r0, r5
    }
 80a249c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a24a0:	68db      	ldr	r3, [r3, #12]
 80a24a2:	4718      	bx	r3
    }
 80a24a4:	bd70      	pop	{r4, r5, r6, pc}

080a24a6 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a24a6:	b508      	push	{r3, lr}
  return write(str);
 80a24a8:	f7ff ffed 	bl	80a2486 <_ZN5Print5writeEPKc>
}
 80a24ac:	bd08      	pop	{r3, pc}

080a24ae <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a24ae:	6803      	ldr	r3, [r0, #0]
 80a24b0:	689b      	ldr	r3, [r3, #8]
 80a24b2:	4718      	bx	r3

080a24b4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a24b4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a24b6:	210d      	movs	r1, #13
{
 80a24b8:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a24ba:	f7ff fff8 	bl	80a24ae <_ZN5Print5printEc>
  n += print('\n');
 80a24be:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a24c0:	4604      	mov	r4, r0
  n += print('\n');
 80a24c2:	4628      	mov	r0, r5
 80a24c4:	f7ff fff3 	bl	80a24ae <_ZN5Print5printEc>
  return n;
}
 80a24c8:	4420      	add	r0, r4
 80a24ca:	bd38      	pop	{r3, r4, r5, pc}

080a24cc <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a24cc:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a24ce:	2a01      	cmp	r2, #1
 80a24d0:	bf98      	it	ls
 80a24d2:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a24d4:	b530      	push	{r4, r5, lr}
 80a24d6:	b08b      	sub	sp, #44	; 0x2c
 80a24d8:	460c      	mov	r4, r1
  *str = '\0';
 80a24da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a24de:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a24e0:	4625      	mov	r5, r4
 80a24e2:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a24e6:	fb04 5312 	mls	r3, r4, r2, r5
 80a24ea:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a24ec:	2b09      	cmp	r3, #9
 80a24ee:	bf94      	ite	ls
 80a24f0:	3330      	addls	r3, #48	; 0x30
 80a24f2:	3337      	addhi	r3, #55	; 0x37
 80a24f4:	b2db      	uxtb	r3, r3
  } while(n);
 80a24f6:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a24f8:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a24fc:	d9f0      	bls.n	80a24e0 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a24fe:	f7ff ffc2 	bl	80a2486 <_ZN5Print5writeEPKc>
}
 80a2502:	b00b      	add	sp, #44	; 0x2c
 80a2504:	bd30      	pop	{r4, r5, pc}
	...

080a2508 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a250c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a250e:	4619      	mov	r1, r3
 80a2510:	4610      	mov	r0, r2
{
 80a2512:	4692      	mov	sl, r2
 80a2514:	461f      	mov	r7, r3
 80a2516:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a251a:	f001 fc9b 	bl	80a3e54 <__aeabi_dcmpun>
 80a251e:	b140      	cbz	r0, 80a2532 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2520:	4951      	ldr	r1, [pc, #324]	; (80a2668 <_ZN5Print10printFloatEdh+0x160>)
 80a2522:	4628      	mov	r0, r5
 80a2524:	f7ff ffaf 	bl	80a2486 <_ZN5Print5writeEPKc>
 80a2528:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a252a:	4620      	mov	r0, r4
 80a252c:	b003      	add	sp, #12
 80a252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a2532:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a2536:	f04f 32ff 	mov.w	r2, #4294967295
 80a253a:	4650      	mov	r0, sl
 80a253c:	4621      	mov	r1, r4
 80a253e:	4b4b      	ldr	r3, [pc, #300]	; (80a266c <_ZN5Print10printFloatEdh+0x164>)
 80a2540:	f001 fc88 	bl	80a3e54 <__aeabi_dcmpun>
 80a2544:	b948      	cbnz	r0, 80a255a <_ZN5Print10printFloatEdh+0x52>
 80a2546:	f04f 32ff 	mov.w	r2, #4294967295
 80a254a:	4650      	mov	r0, sl
 80a254c:	4621      	mov	r1, r4
 80a254e:	4b47      	ldr	r3, [pc, #284]	; (80a266c <_ZN5Print10printFloatEdh+0x164>)
 80a2550:	f001 fc62 	bl	80a3e18 <__aeabi_dcmple>
 80a2554:	b908      	cbnz	r0, 80a255a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a2556:	4946      	ldr	r1, [pc, #280]	; (80a2670 <_ZN5Print10printFloatEdh+0x168>)
 80a2558:	e7e3      	b.n	80a2522 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a255a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a255e:	4650      	mov	r0, sl
 80a2560:	4639      	mov	r1, r7
 80a2562:	4b44      	ldr	r3, [pc, #272]	; (80a2674 <_ZN5Print10printFloatEdh+0x16c>)
 80a2564:	f001 fc6c 	bl	80a3e40 <__aeabi_dcmpgt>
 80a2568:	b108      	cbz	r0, 80a256e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a256a:	4943      	ldr	r1, [pc, #268]	; (80a2678 <_ZN5Print10printFloatEdh+0x170>)
 80a256c:	e7d9      	b.n	80a2522 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a256e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2572:	4650      	mov	r0, sl
 80a2574:	4639      	mov	r1, r7
 80a2576:	4b41      	ldr	r3, [pc, #260]	; (80a267c <_ZN5Print10printFloatEdh+0x174>)
 80a2578:	f001 fc44 	bl	80a3e04 <__aeabi_dcmplt>
 80a257c:	2800      	cmp	r0, #0
 80a257e:	d1f4      	bne.n	80a256a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a2580:	2200      	movs	r2, #0
 80a2582:	2300      	movs	r3, #0
 80a2584:	4650      	mov	r0, sl
 80a2586:	4639      	mov	r1, r7
 80a2588:	f001 fc3c 	bl	80a3e04 <__aeabi_dcmplt>
 80a258c:	4604      	mov	r4, r0
 80a258e:	b130      	cbz	r0, 80a259e <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a2590:	212d      	movs	r1, #45	; 0x2d
 80a2592:	4628      	mov	r0, r5
 80a2594:	f7ff ff8b 	bl	80a24ae <_ZN5Print5printEc>
 80a2598:	4604      	mov	r4, r0
     number = -number;
 80a259a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a259e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a25a2:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a25a4:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a25a8:	4935      	ldr	r1, [pc, #212]	; (80a2680 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a25aa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a2684 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a25ae:	fa5f f38b 	uxtb.w	r3, fp
 80a25b2:	429e      	cmp	r6, r3
 80a25b4:	d906      	bls.n	80a25c4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a25b6:	4642      	mov	r2, r8
 80a25b8:	464b      	mov	r3, r9
 80a25ba:	f001 fadb 	bl	80a3b74 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a25be:	f10b 0b01 	add.w	fp, fp, #1
 80a25c2:	e7f4      	b.n	80a25ae <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a25c4:	463b      	mov	r3, r7
 80a25c6:	4652      	mov	r2, sl
 80a25c8:	f000 fff4 	bl	80a35b4 <__adddf3>
 80a25cc:	4689      	mov	r9, r1
 80a25ce:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a25d0:	f001 fc7e 	bl	80a3ed0 <__aeabi_d2uiz>
 80a25d4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a25d6:	f001 f929 	bl	80a382c <__aeabi_ui2d>
 80a25da:	4602      	mov	r2, r0
 80a25dc:	460b      	mov	r3, r1
 80a25de:	4640      	mov	r0, r8
 80a25e0:	4649      	mov	r1, r9
 80a25e2:	f000 ffe5 	bl	80a35b0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a25e6:	220a      	movs	r2, #10
 80a25e8:	4680      	mov	r8, r0
 80a25ea:	4689      	mov	r9, r1
 80a25ec:	4628      	mov	r0, r5
 80a25ee:	4639      	mov	r1, r7
 80a25f0:	f7ff ff6c 	bl	80a24cc <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a25f4:	4404      	add	r4, r0
  if (digits > 0) {
 80a25f6:	2e00      	cmp	r6, #0
 80a25f8:	d097      	beq.n	80a252a <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a25fa:	4628      	mov	r0, r5
 80a25fc:	4922      	ldr	r1, [pc, #136]	; (80a2688 <_ZN5Print10printFloatEdh+0x180>)
 80a25fe:	f7ff ff42 	bl	80a2486 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a2602:	f04f 0a00 	mov.w	sl, #0
 80a2606:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a2684 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a260a:	4404      	add	r4, r0
  while (digits-- > 0)
 80a260c:	2e00      	cmp	r6, #0
 80a260e:	d08c      	beq.n	80a252a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a2610:	4652      	mov	r2, sl
 80a2612:	465b      	mov	r3, fp
 80a2614:	4640      	mov	r0, r8
 80a2616:	4649      	mov	r1, r9
 80a2618:	f001 f982 	bl	80a3920 <__aeabi_dmul>
 80a261c:	4680      	mov	r8, r0
 80a261e:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a2620:	f001 fc2e 	bl	80a3e80 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a2624:	1e07      	subs	r7, r0, #0
 80a2626:	da1b      	bge.n	80a2660 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a2628:	212d      	movs	r1, #45	; 0x2d
 80a262a:	4628      	mov	r0, r5
 80a262c:	f7ff ff3f 	bl	80a24ae <_ZN5Print5printEc>
 80a2630:	4603      	mov	r3, r0
            val = -n;
 80a2632:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a2634:	220a      	movs	r2, #10
 80a2636:	4628      	mov	r0, r5
 80a2638:	9301      	str	r3, [sp, #4]
 80a263a:	f7ff ff47 	bl	80a24cc <_ZN5Print11printNumberEmh>
 80a263e:	9b01      	ldr	r3, [sp, #4]
 80a2640:	3e01      	subs	r6, #1
 80a2642:	4403      	add	r3, r0
    remainder -= toPrint;
 80a2644:	4638      	mov	r0, r7
    n += print(toPrint);
 80a2646:	441c      	add	r4, r3
    remainder -= toPrint;
 80a2648:	f001 f900 	bl	80a384c <__aeabi_i2d>
 80a264c:	4602      	mov	r2, r0
 80a264e:	460b      	mov	r3, r1
 80a2650:	4640      	mov	r0, r8
 80a2652:	4649      	mov	r1, r9
 80a2654:	f000 ffac 	bl	80a35b0 <__aeabi_dsub>
 80a2658:	b2f6      	uxtb	r6, r6
 80a265a:	4680      	mov	r8, r0
 80a265c:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a265e:	e7d5      	b.n	80a260c <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a2660:	4639      	mov	r1, r7
        size_t t = 0;
 80a2662:	2300      	movs	r3, #0
 80a2664:	e7e6      	b.n	80a2634 <_ZN5Print10printFloatEdh+0x12c>
 80a2666:	bf00      	nop
 80a2668:	080a4734 	.word	0x080a4734
 80a266c:	7fefffff 	.word	0x7fefffff
 80a2670:	080a4738 	.word	0x080a4738
 80a2674:	41efffff 	.word	0x41efffff
 80a2678:	080a473c 	.word	0x080a473c
 80a267c:	c1efffff 	.word	0xc1efffff
 80a2680:	3fe00000 	.word	0x3fe00000
 80a2684:	40240000 	.word	0x40240000
 80a2688:	080a46f8 	.word	0x080a46f8

080a268c <_ZN5Print5printEfi>:
{
 80a268c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a268e:	4605      	mov	r5, r0
 80a2690:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a2692:	4608      	mov	r0, r1
 80a2694:	f001 f8ec 	bl	80a3870 <__aeabi_f2d>
 80a2698:	b2e4      	uxtb	r4, r4
 80a269a:	4602      	mov	r2, r0
 80a269c:	460b      	mov	r3, r1
 80a269e:	4628      	mov	r0, r5
 80a26a0:	9400      	str	r4, [sp, #0]
 80a26a2:	f7ff ff31 	bl	80a2508 <_ZN5Print10printFloatEdh>
}
 80a26a6:	b003      	add	sp, #12
 80a26a8:	bd30      	pop	{r4, r5, pc}

080a26aa <_ZN5Print7printlnEdi>:
{
 80a26aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a26ac:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a26b0:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a26b2:	9100      	str	r1, [sp, #0]
 80a26b4:	f7ff ff28 	bl	80a2508 <_ZN5Print10printFloatEdh>
 80a26b8:	4604      	mov	r4, r0
  n += println();
 80a26ba:	4628      	mov	r0, r5
 80a26bc:	f7ff fefa 	bl	80a24b4 <_ZN5Print7printlnEv>
}
 80a26c0:	4420      	add	r0, r4
 80a26c2:	b003      	add	sp, #12
 80a26c4:	bd30      	pop	{r4, r5, pc}

080a26c6 <_ZN5Print7printlnEfi>:
{
 80a26c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a26c8:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a26ca:	4608      	mov	r0, r1
{
 80a26cc:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a26ce:	f001 f8cf 	bl	80a3870 <__aeabi_f2d>
 80a26d2:	9500      	str	r5, [sp, #0]
 80a26d4:	4602      	mov	r2, r0
 80a26d6:	460b      	mov	r3, r1
 80a26d8:	4620      	mov	r0, r4
 80a26da:	f7ff ffe6 	bl	80a26aa <_ZN5Print7printlnEdi>
}
 80a26de:	b003      	add	sp, #12
 80a26e0:	bd30      	pop	{r4, r5, pc}
	...

080a26e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a26e4:	4b01      	ldr	r3, [pc, #4]	; (80a26ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a26e6:	4a02      	ldr	r2, [pc, #8]	; (80a26f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a26e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a26ea:	4770      	bx	lr
 80a26ec:	20000128 	.word	0x20000128
 80a26f0:	080a4740 	.word	0x080a4740

080a26f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a26f4:	4b02      	ldr	r3, [pc, #8]	; (80a2700 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a26f6:	681a      	ldr	r2, [r3, #0]
 80a26f8:	4b02      	ldr	r3, [pc, #8]	; (80a2704 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a26fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a26fc:	4770      	bx	lr
 80a26fe:	bf00      	nop
 80a2700:	20000008 	.word	0x20000008
 80a2704:	2000012c 	.word	0x2000012c

080a2708 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2708:	2100      	movs	r1, #0
 80a270a:	f7ff bce7 	b.w	80a20dc <system_delay_ms>

080a270e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a270e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2710:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a2712:	4604      	mov	r4, r0
      if (_M_manager)
 80a2714:	b113      	cbz	r3, 80a271c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2716:	2203      	movs	r2, #3
 80a2718:	4601      	mov	r1, r0
 80a271a:	4798      	blx	r3
    }
 80a271c:	4620      	mov	r0, r4
 80a271e:	bd10      	pop	{r4, pc}

080a2720 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a2720:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2722:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2724:	460b      	mov	r3, r1
 80a2726:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2728:	c803      	ldmia	r0, {r0, r1}
 80a272a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a272e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2732:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2736:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a273a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a273e:	b002      	add	sp, #8
 80a2740:	bd10      	pop	{r4, pc}
	...

080a2744 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2744:	2200      	movs	r2, #0
 80a2746:	4b01      	ldr	r3, [pc, #4]	; (80a274c <_GLOBAL__sub_I_RGB+0x8>)
 80a2748:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a274a:	4770      	bx	lr
 80a274c:	20000130 	.word	0x20000130

080a2750 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2750:	4b01      	ldr	r3, [pc, #4]	; (80a2758 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2752:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2754:	4770      	bx	lr
 80a2756:	bf00      	nop
 80a2758:	2000000c 	.word	0x2000000c

080a275c <serialEventRun>:
{
 80a275c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a275e:	4b13      	ldr	r3, [pc, #76]	; (80a27ac <serialEventRun+0x50>)
 80a2760:	b143      	cbz	r3, 80a2774 <serialEventRun+0x18>
 80a2762:	f000 fc11 	bl	80a2f88 <_Z16_fetch_usbserialv>
 80a2766:	6803      	ldr	r3, [r0, #0]
 80a2768:	691b      	ldr	r3, [r3, #16]
 80a276a:	4798      	blx	r3
 80a276c:	2800      	cmp	r0, #0
 80a276e:	dd01      	ble.n	80a2774 <serialEventRun+0x18>
        serialEvent();
 80a2770:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2774:	4b0e      	ldr	r3, [pc, #56]	; (80a27b0 <serialEventRun+0x54>)
 80a2776:	b143      	cbz	r3, 80a278a <serialEventRun+0x2e>
 80a2778:	f000 fea2 	bl	80a34c0 <_Z22__fetch_global_Serial1v>
 80a277c:	6803      	ldr	r3, [r0, #0]
 80a277e:	691b      	ldr	r3, [r3, #16]
 80a2780:	4798      	blx	r3
 80a2782:	2800      	cmp	r0, #0
 80a2784:	dd01      	ble.n	80a278a <serialEventRun+0x2e>
        serialEvent1();
 80a2786:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a278a:	4b0a      	ldr	r3, [pc, #40]	; (80a27b4 <serialEventRun+0x58>)
 80a278c:	b10b      	cbz	r3, 80a2792 <serialEventRun+0x36>
 80a278e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2792:	4b09      	ldr	r3, [pc, #36]	; (80a27b8 <serialEventRun+0x5c>)
 80a2794:	b143      	cbz	r3, 80a27a8 <serialEventRun+0x4c>
 80a2796:	f000 fc31 	bl	80a2ffc <_Z17_fetch_usbserial1v>
 80a279a:	6803      	ldr	r3, [r0, #0]
 80a279c:	691b      	ldr	r3, [r3, #16]
 80a279e:	4798      	blx	r3
 80a27a0:	2800      	cmp	r0, #0
 80a27a2:	dd01      	ble.n	80a27a8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a27a4:	f3af 8000 	nop.w
}
 80a27a8:	bd08      	pop	{r3, pc}
 80a27aa:	bf00      	nop
	...

080a27bc <_post_loop>:
{
 80a27bc:	b508      	push	{r3, lr}
	serialEventRun();
 80a27be:	f7ff ffcd 	bl	80a275c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a27c2:	f7ff fb89 	bl	80a1ed8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a27c6:	4b01      	ldr	r3, [pc, #4]	; (80a27cc <_post_loop+0x10>)
 80a27c8:	6018      	str	r0, [r3, #0]
}
 80a27ca:	bd08      	pop	{r3, pc}
 80a27cc:	200004b4 	.word	0x200004b4

080a27d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a27d0:	4805      	ldr	r0, [pc, #20]	; (80a27e8 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a27d2:	4a06      	ldr	r2, [pc, #24]	; (80a27ec <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a27d4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a27d6:	1a12      	subs	r2, r2, r0
 80a27d8:	4905      	ldr	r1, [pc, #20]	; (80a27f0 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a27da:	f001 fe73 	bl	80a44c4 <memcpy>
    __backup_sram_signature = signature;
 80a27de:	4b05      	ldr	r3, [pc, #20]	; (80a27f4 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a27e0:	4a05      	ldr	r2, [pc, #20]	; (80a27f8 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a27e2:	601a      	str	r2, [r3, #0]
}
 80a27e4:	bd08      	pop	{r3, pc}
 80a27e6:	bf00      	nop
 80a27e8:	40024000 	.word	0x40024000
 80a27ec:	40024004 	.word	0x40024004
 80a27f0:	080a4950 	.word	0x080a4950
 80a27f4:	40024000 	.word	0x40024000
 80a27f8:	9a271c1e 	.word	0x9a271c1e

080a27fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a27fc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a27fe:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2800:	461a      	mov	r2, r3
 80a2802:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2806:	9300      	str	r3, [sp, #0]
 80a2808:	f7ff fc8a 	bl	80a2120 <system_ctrl_set_result>
}
 80a280c:	b003      	add	sp, #12
 80a280e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2814 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2814:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2816:	8843      	ldrh	r3, [r0, #2]
 80a2818:	2b0a      	cmp	r3, #10
 80a281a:	d008      	beq.n	80a282e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a281c:	2b50      	cmp	r3, #80	; 0x50
 80a281e:	d10b      	bne.n	80a2838 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2820:	4b09      	ldr	r3, [pc, #36]	; (80a2848 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2822:	681b      	ldr	r3, [r3, #0]
 80a2824:	b14b      	cbz	r3, 80a283a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2826:	b003      	add	sp, #12
 80a2828:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a282c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a282e:	f7ff ffe5 	bl	80a27fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2832:	b003      	add	sp, #12
 80a2834:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2838:	2300      	movs	r3, #0
 80a283a:	461a      	mov	r2, r3
 80a283c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2840:	9300      	str	r3, [sp, #0]
 80a2842:	f7ff fc6d 	bl	80a2120 <system_ctrl_set_result>
}
 80a2846:	e7f4      	b.n	80a2832 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2848:	20000144 	.word	0x20000144

080a284c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a284c:	2100      	movs	r1, #0
{
 80a284e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2850:	4811      	ldr	r0, [pc, #68]	; (80a2898 <module_user_init_hook+0x4c>)
 80a2852:	f7ff fd1f 	bl	80a2294 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2856:	4b11      	ldr	r3, [pc, #68]	; (80a289c <module_user_init_hook+0x50>)
 80a2858:	681a      	ldr	r2, [r3, #0]
 80a285a:	4b11      	ldr	r3, [pc, #68]	; (80a28a0 <module_user_init_hook+0x54>)
 80a285c:	429a      	cmp	r2, r3
 80a285e:	bf0c      	ite	eq
 80a2860:	2201      	moveq	r2, #1
 80a2862:	2200      	movne	r2, #0
 80a2864:	4b0f      	ldr	r3, [pc, #60]	; (80a28a4 <module_user_init_hook+0x58>)
 80a2866:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2868:	d001      	beq.n	80a286e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a286a:	f7ff ffb1 	bl	80a27d0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a286e:	f7ff fb1b 	bl	80a1ea8 <HAL_RNG_GetRandomNumber>
 80a2872:	4604      	mov	r4, r0
    srand(seed);
 80a2874:	f001 fe3c 	bl	80a44f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2878:	4b0b      	ldr	r3, [pc, #44]	; (80a28a8 <module_user_init_hook+0x5c>)
 80a287a:	b113      	cbz	r3, 80a2882 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a287c:	4620      	mov	r0, r4
 80a287e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2882:	2100      	movs	r1, #0
 80a2884:	4808      	ldr	r0, [pc, #32]	; (80a28a8 <module_user_init_hook+0x5c>)
 80a2886:	f7ff fccd 	bl	80a2224 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a288a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a288e:	2100      	movs	r1, #0
 80a2890:	4806      	ldr	r0, [pc, #24]	; (80a28ac <module_user_init_hook+0x60>)
 80a2892:	f7ff bc3b 	b.w	80a210c <system_ctrl_set_app_request_handler>
 80a2896:	bf00      	nop
 80a2898:	080a2751 	.word	0x080a2751
 80a289c:	40024000 	.word	0x40024000
 80a28a0:	9a271c1e 	.word	0x9a271c1e
 80a28a4:	20000140 	.word	0x20000140
 80a28a8:	00000000 	.word	0x00000000
 80a28ac:	080a2815 	.word	0x080a2815

080a28b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a28b0:	4770      	bx	lr

080a28b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a28b2:	2000      	movs	r0, #0
 80a28b4:	4770      	bx	lr

080a28b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a28b6:	b510      	push	{r4, lr}
 80a28b8:	4604      	mov	r4, r0
 80a28ba:	2110      	movs	r1, #16
 80a28bc:	f7fd fbf1 	bl	80a00a2 <_ZdlPvj>
 80a28c0:	4620      	mov	r0, r4
 80a28c2:	bd10      	pop	{r4, pc}

080a28c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a28c4:	b508      	push	{r3, lr}
      { delete this; }
 80a28c6:	f7ff fff6 	bl	80a28b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a28ca:	bd08      	pop	{r3, pc}

080a28cc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a28cc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a28ce:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a28d0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a28d4:	6002      	str	r2, [r0, #0]
 80a28d6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a28d8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a28da:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a28dc:	680c      	ldr	r4, [r1, #0]
 80a28de:	8085      	strh	r5, [r0, #4]
 80a28e0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a28e2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a28e4:	bd30      	pop	{r4, r5, pc}

080a28e6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a28e6:	b510      	push	{r4, lr}
 80a28e8:	4604      	mov	r4, r0
    free((void*)msg_);
 80a28ea:	6800      	ldr	r0, [r0, #0]
 80a28ec:	f7ff fcaa 	bl	80a2244 <free>
}
 80a28f0:	4620      	mov	r0, r4
 80a28f2:	bd10      	pop	{r4, pc}

080a28f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a28f4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a28f6:	68c4      	ldr	r4, [r0, #12]
 80a28f8:	b1f4      	cbz	r4, 80a2938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a28fa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a28fc:	2b02      	cmp	r3, #2
 80a28fe:	d103      	bne.n	80a2908 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2900:	f104 000c 	add.w	r0, r4, #12
 80a2904:	f7ff ffef 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a2908:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a290a:	b135      	cbz	r5, 80a291a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a290c:	4628      	mov	r0, r5
 80a290e:	f7ff fefe 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
 80a2912:	2110      	movs	r1, #16
 80a2914:	4628      	mov	r0, r5
 80a2916:	f7fd fbc4 	bl	80a00a2 <_ZdlPvj>
 80a291a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a291c:	b135      	cbz	r5, 80a292c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a291e:	4628      	mov	r0, r5
 80a2920:	f7ff fef5 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
 80a2924:	2110      	movs	r1, #16
 80a2926:	4628      	mov	r0, r5
 80a2928:	f7fd fbbb 	bl	80a00a2 <_ZdlPvj>
 80a292c:	4620      	mov	r0, r4
 80a292e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2932:	2114      	movs	r1, #20
 80a2934:	f7fd bbb5 	b.w	80a00a2 <_ZdlPvj>
 80a2938:	bd38      	pop	{r3, r4, r5, pc}

080a293a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a293a:	680b      	ldr	r3, [r1, #0]
 80a293c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a293e:	684b      	ldr	r3, [r1, #4]
 80a2940:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a2942:	b113      	cbz	r3, 80a294a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a2944:	685a      	ldr	r2, [r3, #4]
 80a2946:	3201      	adds	r2, #1
 80a2948:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a294a:	4770      	bx	lr

080a294c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a294c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a294e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a2950:	4668      	mov	r0, sp
 80a2952:	460d      	mov	r5, r1
 80a2954:	f7ff fff1 	bl	80a293a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2958:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a295a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a295c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a295e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2960:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2962:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2964:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2966:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a2968:	f7fd fcf4 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a296c:	b135      	cbz	r5, 80a297c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a296e:	1d28      	adds	r0, r5, #4
 80a2970:	f7fd fcf0 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2974:	2108      	movs	r1, #8
 80a2976:	4628      	mov	r0, r5
 80a2978:	f7fd fb93 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a297c:	4620      	mov	r0, r4
 80a297e:	b003      	add	sp, #12
 80a2980:	bd30      	pop	{r4, r5, pc}

080a2982 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2982:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2984:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2986:	b90a      	cbnz	r2, 80a298c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2988:	f000 fe0a 	bl	80a35a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a298c:	68c3      	ldr	r3, [r0, #12]
    }
 80a298e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2992:	4718      	bx	r3

080a2994 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2994:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2996:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2998:	f100 0110 	add.w	r1, r0, #16
 80a299c:	f7ff fff1 	bl	80a2982 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a29a0:	bd08      	pop	{r3, pc}

080a29a2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a29a2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a29a4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a29a6:	b90a      	cbnz	r2, 80a29ac <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a29a8:	f000 fdfa 	bl	80a35a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a29ac:	68c3      	ldr	r3, [r0, #12]
    }
 80a29ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a29b2:	4718      	bx	r3

080a29b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a29b4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a29b6:	6800      	ldr	r0, [r0, #0]
 80a29b8:	f100 0110 	add.w	r1, r0, #16
 80a29bc:	f7ff fff1 	bl	80a29a2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a29c0:	bd08      	pop	{r3, pc}
	...

080a29c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a29c4:	b538      	push	{r3, r4, r5, lr}
 80a29c6:	2300      	movs	r3, #0
 80a29c8:	4604      	mov	r4, r0
 80a29ca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29cc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a29ce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29d0:	f7fd fb63 	bl	80a009a <_Znwj>
 80a29d4:	b128      	cbz	r0, 80a29e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a29d6:	2301      	movs	r3, #1
 80a29d8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a29dc:	4b02      	ldr	r3, [pc, #8]	; (80a29e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a29de:	60c5      	str	r5, [r0, #12]
 80a29e0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a29e2:	6020      	str	r0, [r4, #0]
	}
 80a29e4:	4620      	mov	r0, r4
 80a29e6:	bd38      	pop	{r3, r4, r5, pc}
 80a29e8:	080a4768 	.word	0x080a4768

080a29ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a29ec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a29ee:	2300      	movs	r3, #0
 80a29f0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a29f2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a29f4:	4604      	mov	r4, r0
 80a29f6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a29f8:	b12b      	cbz	r3, 80a2a06 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a29fa:	2202      	movs	r2, #2
 80a29fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a29fe:	68eb      	ldr	r3, [r5, #12]
 80a2a00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2a02:	68ab      	ldr	r3, [r5, #8]
 80a2a04:	60a3      	str	r3, [r4, #8]
    }
 80a2a06:	4620      	mov	r0, r4
 80a2a08:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a2a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a0e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a2a10:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2a12:	4668      	mov	r0, sp
 80a2a14:	f7ff ff5a 	bl	80a28cc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2a18:	f04f 0302 	mov.w	r3, #2
 80a2a1c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a2a20:	2a00      	cmp	r2, #0
 80a2a22:	d103      	bne.n	80a2a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a2a24:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a2a28:	2900      	cmp	r1, #0
 80a2a2a:	d1f7      	bne.n	80a2a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a2a2c:	d125      	bne.n	80a2a7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a2a2e:	f104 050c 	add.w	r5, r4, #12
 80a2a32:	4669      	mov	r1, sp
 80a2a34:	4628      	mov	r0, r5
 80a2a36:	f7ff ff49 	bl	80a28cc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2a3a:	2301      	movs	r3, #1
 80a2a3c:	f3bf 8f5b 	dmb	ish
 80a2a40:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2a42:	2000      	movs	r0, #0
 80a2a44:	f3bf 8f5b 	dmb	ish
 80a2a48:	f104 0308 	add.w	r3, r4, #8
 80a2a4c:	e853 6f00 	ldrex	r6, [r3]
 80a2a50:	e843 0200 	strex	r2, r0, [r3]
 80a2a54:	2a00      	cmp	r2, #0
 80a2a56:	d1f9      	bne.n	80a2a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2a58:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2a5c:	b16e      	cbz	r6, 80a2a7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a2a5e:	f7ff fb45 	bl	80a20ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2a62:	b178      	cbz	r0, 80a2a84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2a64:	4629      	mov	r1, r5
 80a2a66:	4630      	mov	r0, r6
 80a2a68:	f7ff ff8b 	bl	80a2982 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a2a6c:	4630      	mov	r0, r6
 80a2a6e:	f7ff fe4e 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a2a72:	2110      	movs	r1, #16
 80a2a74:	4630      	mov	r0, r6
 80a2a76:	f7fd fb14 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a2a7a:	4668      	mov	r0, sp
 80a2a7c:	f7ff ff33 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
    }
 80a2a80:	b009      	add	sp, #36	; 0x24
 80a2a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2a84:	4631      	mov	r1, r6
 80a2a86:	a802      	add	r0, sp, #8
 80a2a88:	f7ff ffb0 	bl	80a29ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2a8c:	68e0      	ldr	r0, [r4, #12]
 80a2a8e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2a92:	b108      	cbz	r0, 80a2a98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a2a94:	f001 fd5a 	bl	80a454c <strdup>
        type_(type) {
 80a2a98:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2a9a:	2010      	movs	r0, #16
 80a2a9c:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2aa0:	f7fd fafb 	bl	80a009a <_Znwj>
 80a2aa4:	4605      	mov	r5, r0
 80a2aa6:	b1e8      	cbz	r0, 80a2ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2aa8:	2700      	movs	r7, #0
 80a2aaa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2aac:	2018      	movs	r0, #24
 80a2aae:	f7fd faf4 	bl	80a009a <_Znwj>
 80a2ab2:	4604      	mov	r4, r0
 80a2ab4:	b188      	cbz	r0, 80a2ada <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a2ab6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2ab8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2aba:	a802      	add	r0, sp, #8
 80a2abc:	f7ff fe30 	bl	80a2720 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ac0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2ac2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ac4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ac6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2ac8:	9204      	str	r2, [sp, #16]
 80a2aca:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2acc:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ace:	60e3      	str	r3, [r4, #12]
 80a2ad0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a2ad4:	9205      	str	r2, [sp, #20]
 80a2ad6:	f7ff fef9 	bl	80a28cc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a2ada:	4b08      	ldr	r3, [pc, #32]	; (80a2afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2adc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2ade:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2ae0:	4b07      	ldr	r3, [pc, #28]	; (80a2b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a2ae2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a2ae4:	a806      	add	r0, sp, #24
 80a2ae6:	f7ff fefe 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2aea:	a802      	add	r0, sp, #8
 80a2aec:	f7ff fe0f 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2af0:	2200      	movs	r2, #0
 80a2af2:	4629      	mov	r1, r5
 80a2af4:	4803      	ldr	r0, [pc, #12]	; (80a2b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a2af6:	f7ff fb01 	bl	80a20fc <application_thread_invoke>
 80a2afa:	e7b7      	b.n	80a2a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a2afc:	080a2995 	.word	0x080a2995
 80a2b00:	080a2c21 	.word	0x080a2c21
 80a2b04:	080a30e5 	.word	0x080a30e5

080a2b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2b0c:	b08a      	sub	sp, #40	; 0x28
 80a2b0e:	4605      	mov	r5, r0
 80a2b10:	460c      	mov	r4, r1
 80a2b12:	4617      	mov	r7, r2
 80a2b14:	4698      	mov	r8, r3
 80a2b16:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2b1a:	f7ff fb73 	bl	80a2204 <spark_cloud_flag_connected>
 80a2b1e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a2b20:	4682      	mov	sl, r0
 80a2b22:	bb38      	cbnz	r0, 80a2b74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a2b24:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2b28:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2b2a:	a905      	add	r1, sp, #20
 80a2b2c:	4630      	mov	r0, r6
 80a2b2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2b32:	f7ff fecb 	bl	80a28cc <_ZN8particle5ErrorC1EOS0_>
 80a2b36:	2014      	movs	r0, #20
 80a2b38:	f7fd faaf 	bl	80a009a <_Znwj>
 80a2b3c:	4604      	mov	r4, r0
 80a2b3e:	b148      	cbz	r0, 80a2b54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2b40:	2302      	movs	r3, #2
 80a2b42:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2b44:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2b46:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2b4a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a2b4c:	4631      	mov	r1, r6
 80a2b4e:	300c      	adds	r0, #12
 80a2b50:	f7ff febc 	bl	80a28cc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2b54:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a2b56:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2b58:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a2b5c:	f7ff ff32 	bl	80a29c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2b60:	4630      	mov	r0, r6
 80a2b62:	f7ff fec0 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2b66:	a805      	add	r0, sp, #20
 80a2b68:	f7ff febd 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a2b6c:	4628      	mov	r0, r5
 80a2b6e:	b00a      	add	sp, #40	; 0x28
 80a2b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a2b74:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a2b76:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2b7a:	2014      	movs	r0, #20
 80a2b7c:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a2b80:	9307      	str	r3, [sp, #28]
 80a2b82:	f7fd fa8a 	bl	80a009a <_Znwj>
 80a2b86:	4601      	mov	r1, r0
 80a2b88:	b128      	cbz	r0, 80a2b96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2b8a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a2b8e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2b92:	f880 a001 	strb.w	sl, [r0, #1]
 80a2b96:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2b98:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a2b9a:	f7ff ff13 	bl	80a29c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a2b9e:	4b1f      	ldr	r3, [pc, #124]	; (80a2c1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2ba0:	2008      	movs	r0, #8
 80a2ba2:	9308      	str	r3, [sp, #32]
 80a2ba4:	f7fd fa79 	bl	80a009a <_Znwj>
 80a2ba8:	4682      	mov	sl, r0
 80a2baa:	b110      	cbz	r0, 80a2bb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a2bac:	a903      	add	r1, sp, #12
 80a2bae:	f7ff fec4 	bl	80a293a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2bb2:	4642      	mov	r2, r8
 80a2bb4:	4639      	mov	r1, r7
 80a2bb6:	4620      	mov	r0, r4
 80a2bb8:	9600      	str	r6, [sp, #0]
 80a2bba:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a2bbe:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2bc2:	f7ff fb27 	bl	80a2214 <spark_send_event>
 80a2bc6:	b9b8      	cbnz	r0, 80a2bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a2bc8:	9b03      	ldr	r3, [sp, #12]
 80a2bca:	785b      	ldrb	r3, [r3, #1]
 80a2bcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2bd0:	b993      	cbnz	r3, 80a2bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a2bd2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a2bd6:	a905      	add	r1, sp, #20
 80a2bd8:	a803      	add	r0, sp, #12
 80a2bda:	9205      	str	r2, [sp, #20]
 80a2bdc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2be0:	f7ff ff14 	bl	80a2a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2be4:	a805      	add	r0, sp, #20
 80a2be6:	f7ff fe7e 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2bea:	a805      	add	r0, sp, #20
 80a2bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2bee:	f7ff fead 	bl	80a294c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a2bf2:	a806      	add	r0, sp, #24
 80a2bf4:	f7fd fbae 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2bf8:	a903      	add	r1, sp, #12
 80a2bfa:	a805      	add	r0, sp, #20
 80a2bfc:	f7ff fe9d 	bl	80a293a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2c00:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2c02:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2c04:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a2c06:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2c08:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a2c0a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a2c0c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a2c0e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a2c10:	f7fd fba0 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c14:	a804      	add	r0, sp, #16
 80a2c16:	f7fd fb9d 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a2c1a:	e7a7      	b.n	80a2b6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a2c1c:	080a2c9d 	.word	0x080a2c9d

080a2c20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a2c20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c24:	4605      	mov	r5, r0
	switch (__op)
 80a2c26:	d103      	bne.n	80a2c30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a2c28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a2c2a:	6003      	str	r3, [r0, #0]
      }
 80a2c2c:	2000      	movs	r0, #0
 80a2c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a2c30:	2a02      	cmp	r2, #2
 80a2c32:	d010      	beq.n	80a2c56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a2c34:	2a03      	cmp	r2, #3
 80a2c36:	d1f9      	bne.n	80a2c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a2c38:	6804      	ldr	r4, [r0, #0]
 80a2c3a:	2c00      	cmp	r4, #0
 80a2c3c:	d0f6      	beq.n	80a2c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a2c3e:	f104 0010 	add.w	r0, r4, #16
 80a2c42:	f7ff fe50 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2c46:	4620      	mov	r0, r4
 80a2c48:	f7ff fd61 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a2c4c:	2118      	movs	r1, #24
 80a2c4e:	4620      	mov	r0, r4
 80a2c50:	f7fd fa27 	bl	80a00a2 <_ZdlPvj>
 80a2c54:	e7ea      	b.n	80a2c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2c56:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a2c58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2c5a:	f7fd fa1e 	bl	80a009a <_Znwj>
 80a2c5e:	4604      	mov	r4, r0
 80a2c60:	b150      	cbz	r0, 80a2c78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2c62:	4631      	mov	r1, r6
 80a2c64:	f7ff fec2 	bl	80a29ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2c68:	6930      	ldr	r0, [r6, #16]
 80a2c6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2c6e:	b108      	cbz	r0, 80a2c74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a2c70:	f001 fc6c 	bl	80a454c <strdup>
        type_(type) {
 80a2c74:	6120      	str	r0, [r4, #16]
 80a2c76:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a2c78:	602c      	str	r4, [r5, #0]
	}
 80a2c7a:	e7d7      	b.n	80a2c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a2c7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2c7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2c7e:	2300      	movs	r3, #0
 80a2c80:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a2c82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2c84:	4604      	mov	r4, r0
 80a2c86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2c88:	b12b      	cbz	r3, 80a2c96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2c8a:	2202      	movs	r2, #2
 80a2c8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2c8e:	68eb      	ldr	r3, [r5, #12]
 80a2c90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2c92:	68ab      	ldr	r3, [r5, #8]
 80a2c94:	60a3      	str	r3, [r4, #8]
    }
 80a2c96:	4620      	mov	r0, r4
 80a2c98:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2c9e:	4604      	mov	r4, r0
 80a2ca0:	b089      	sub	sp, #36	; 0x24
 80a2ca2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2ca4:	a801      	add	r0, sp, #4
 80a2ca6:	4611      	mov	r1, r2
 80a2ca8:	f7ff fe50 	bl	80a294c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2cac:	b1a4      	cbz	r4, 80a2cd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2cae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2cb0:	b11d      	cbz	r5, 80a2cba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a2cb2:	4628      	mov	r0, r5
 80a2cb4:	f001 fc4a 	bl	80a454c <strdup>
 80a2cb8:	4605      	mov	r5, r0
 80a2cba:	a801      	add	r0, sp, #4
 80a2cbc:	a903      	add	r1, sp, #12
        type_(type) {
 80a2cbe:	9503      	str	r5, [sp, #12]
 80a2cc0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a2cc4:	f7ff fea2 	bl	80a2a0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2cc8:	a803      	add	r0, sp, #12
 80a2cca:	f7ff fe0c 	bl	80a28e6 <_ZN8particle5ErrorD1Ev>
 80a2cce:	a802      	add	r0, sp, #8
 80a2cd0:	f7fd fb40 	bl	80a0354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a2cd4:	b009      	add	sp, #36	; 0x24
 80a2cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2cd8:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a2cda:	9d01      	ldr	r5, [sp, #4]
 80a2cdc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a2ce0:	2a00      	cmp	r2, #0
 80a2ce2:	d103      	bne.n	80a2cec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a2ce4:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a2ce8:	2900      	cmp	r1, #0
 80a2cea:	d1f7      	bne.n	80a2cdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a2cec:	d1ef      	bne.n	80a2cce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a2cee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2cf0:	f3bf 8f5b 	dmb	ish
 80a2cf4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2cf6:	f3bf 8f5b 	dmb	ish
 80a2cfa:	1d2b      	adds	r3, r5, #4
 80a2cfc:	e853 6f00 	ldrex	r6, [r3]
 80a2d00:	e843 4200 	strex	r2, r4, [r3]
 80a2d04:	2a00      	cmp	r2, #0
 80a2d06:	d1f9      	bne.n	80a2cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2d08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2d0c:	2e00      	cmp	r6, #0
 80a2d0e:	d0de      	beq.n	80a2cce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2d10:	4620      	mov	r0, r4
 80a2d12:	f7ff f9eb 	bl	80a20ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2d16:	4607      	mov	r7, r0
 80a2d18:	b160      	cbz	r0, 80a2d34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2d1a:	4630      	mov	r0, r6
 80a2d1c:	f105 010c 	add.w	r1, r5, #12
 80a2d20:	f7ff fe3f 	bl	80a29a2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2d24:	4630      	mov	r0, r6
 80a2d26:	f7ff fcf2 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a2d2a:	2110      	movs	r1, #16
 80a2d2c:	4630      	mov	r0, r6
 80a2d2e:	f7fd f9b8 	bl	80a00a2 <_ZdlPvj>
 80a2d32:	e7cc      	b.n	80a2cce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2d34:	4631      	mov	r1, r6
 80a2d36:	a803      	add	r0, sp, #12
 80a2d38:	f7ff ffa0 	bl	80a2c7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2d3c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2d3e:	2010      	movs	r0, #16
 80a2d40:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2d44:	f7fd f9a9 	bl	80a009a <_Znwj>
 80a2d48:	4605      	mov	r5, r0
 80a2d4a:	b1d0      	cbz	r0, 80a2d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a2d4c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2d4e:	2014      	movs	r0, #20
 80a2d50:	f7fd f9a3 	bl	80a009a <_Znwj>
 80a2d54:	4604      	mov	r4, r0
 80a2d56:	b178      	cbz	r0, 80a2d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2d58:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2d5a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2d5c:	a803      	add	r0, sp, #12
 80a2d5e:	f7ff fcdf 	bl	80a2720 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2d64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d68:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a2d6a:	9205      	str	r2, [sp, #20]
 80a2d6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d6e:	60e3      	str	r3, [r4, #12]
 80a2d70:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2d74:	9206      	str	r2, [sp, #24]
 80a2d76:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2d78:	4b06      	ldr	r3, [pc, #24]	; (80a2d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2d7a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2d7c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2d7e:	4b06      	ldr	r3, [pc, #24]	; (80a2d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a2d80:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a2d82:	a803      	add	r0, sp, #12
 80a2d84:	f7ff fcc3 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2d88:	2200      	movs	r2, #0
 80a2d8a:	4629      	mov	r1, r5
 80a2d8c:	4803      	ldr	r0, [pc, #12]	; (80a2d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a2d8e:	f7ff f9b5 	bl	80a20fc <application_thread_invoke>
 80a2d92:	e7c7      	b.n	80a2d24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a2d94:	080a29b5 	.word	0x080a29b5
 80a2d98:	080a2da1 	.word	0x080a2da1
 80a2d9c:	080a30e5 	.word	0x080a30e5

080a2da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a2da0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2da2:	b570      	push	{r4, r5, r6, lr}
 80a2da4:	4604      	mov	r4, r0
	switch (__op)
 80a2da6:	d103      	bne.n	80a2db0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a2da8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a2daa:	6003      	str	r3, [r0, #0]
      }
 80a2dac:	2000      	movs	r0, #0
 80a2dae:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a2db0:	2a02      	cmp	r2, #2
 80a2db2:	d00c      	beq.n	80a2dce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a2db4:	2a03      	cmp	r2, #3
 80a2db6:	d1f9      	bne.n	80a2dac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a2db8:	6804      	ldr	r4, [r0, #0]
 80a2dba:	2c00      	cmp	r4, #0
 80a2dbc:	d0f6      	beq.n	80a2dac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a2dbe:	4620      	mov	r0, r4
 80a2dc0:	f7ff fca5 	bl	80a270e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a2dc4:	2114      	movs	r1, #20
 80a2dc6:	4620      	mov	r0, r4
 80a2dc8:	f7fd f96b 	bl	80a00a2 <_ZdlPvj>
 80a2dcc:	e7ee      	b.n	80a2dac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2dce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a2dd0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2dd2:	f7fd f962 	bl	80a009a <_Znwj>
 80a2dd6:	4605      	mov	r5, r0
 80a2dd8:	b120      	cbz	r0, 80a2de4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a2dda:	4631      	mov	r1, r6
 80a2ddc:	f7ff ff4e 	bl	80a2c7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2de0:	7c33      	ldrb	r3, [r6, #16]
 80a2de2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a2de4:	6025      	str	r5, [r4, #0]
	}
 80a2de6:	e7e1      	b.n	80a2dac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a2de8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2de8:	4770      	bx	lr

080a2dea <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2dec:	460e      	mov	r6, r1
 80a2dee:	2400      	movs	r4, #0
 80a2df0:	f100 0708 	add.w	r7, r0, #8
 80a2df4:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a2df6:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a2dfa:	220a      	movs	r2, #10
 80a2dfc:	4630      	mov	r0, r6
 80a2dfe:	f7ff fb65 	bl	80a24cc <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2e02:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2e04:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2e06:	d101      	bne.n	80a2e0c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a2e08:	4620      	mov	r0, r4
 80a2e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2e0c:	2c00      	cmp	r4, #0
 80a2e0e:	d0f2      	beq.n	80a2df6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2e10:	212e      	movs	r1, #46	; 0x2e
 80a2e12:	4630      	mov	r0, r6
 80a2e14:	f7ff fb4b 	bl	80a24ae <_ZN5Print5printEc>
 80a2e18:	4404      	add	r4, r0
 80a2e1a:	e7ec      	b.n	80a2df6 <_ZNK9IPAddress7printToER5Print+0xc>

080a2e1c <_ZN9IPAddressD0Ev>:
 80a2e1c:	b510      	push	{r4, lr}
 80a2e1e:	4604      	mov	r4, r0
 80a2e20:	2118      	movs	r1, #24
 80a2e22:	f7fd f93e 	bl	80a00a2 <_ZdlPvj>
 80a2e26:	4620      	mov	r0, r4
 80a2e28:	bd10      	pop	{r4, pc}
	...

080a2e2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a2e2c:	b510      	push	{r4, lr}
 80a2e2e:	4604      	mov	r4, r0
 80a2e30:	4b04      	ldr	r3, [pc, #16]	; (80a2e44 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2e32:	2211      	movs	r2, #17
 80a2e34:	2100      	movs	r1, #0
 80a2e36:	f840 3b04 	str.w	r3, [r0], #4
 80a2e3a:	f001 fb51 	bl	80a44e0 <memset>
}
 80a2e3e:	4620      	mov	r0, r4
 80a2e40:	bd10      	pop	{r4, pc}
 80a2e42:	bf00      	nop
 80a2e44:	080a4784 	.word	0x080a4784

080a2e48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2e48:	4603      	mov	r3, r0
 80a2e4a:	4a07      	ldr	r2, [pc, #28]	; (80a2e68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2e4c:	b510      	push	{r4, lr}
 80a2e4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2e52:	f101 0210 	add.w	r2, r1, #16
 80a2e56:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2e5a:	4291      	cmp	r1, r2
 80a2e5c:	f843 4b04 	str.w	r4, [r3], #4
 80a2e60:	d1f9      	bne.n	80a2e56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2e62:	780a      	ldrb	r2, [r1, #0]
 80a2e64:	701a      	strb	r2, [r3, #0]
}
 80a2e66:	bd10      	pop	{r4, pc}
 80a2e68:	080a4784 	.word	0x080a4784

080a2e6c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a2e6c:	4a02      	ldr	r2, [pc, #8]	; (80a2e78 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a2e6e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2e72:	2204      	movs	r2, #4
 80a2e74:	7502      	strb	r2, [r0, #20]
}
 80a2e76:	4770      	bx	lr
 80a2e78:	080a4784 	.word	0x080a4784

080a2e7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2e7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2e7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2e82:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2e86:	2304      	movs	r3, #4
 80a2e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2e8c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2e90:	6044      	str	r4, [r0, #4]
 80a2e92:	7503      	strb	r3, [r0, #20]
}
 80a2e94:	bd10      	pop	{r4, pc}
	...

080a2e98 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2e98:	b513      	push	{r0, r1, r4, lr}
 80a2e9a:	4c04      	ldr	r4, [pc, #16]	; (80a2eac <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2e9c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2e9e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a2ea2:	9400      	str	r4, [sp, #0]
 80a2ea4:	f7ff ffea 	bl	80a2e7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2ea8:	b002      	add	sp, #8
 80a2eaa:	bd10      	pop	{r4, pc}
 80a2eac:	080a4784 	.word	0x080a4784

080a2eb0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2eb0:	7441      	strb	r1, [r0, #17]
}
 80a2eb2:	4770      	bx	lr

080a2eb4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2eb4:	4770      	bx	lr

080a2eb6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2eb6:	4770      	bx	lr

080a2eb8 <_ZN9USBSerial4readEv>:
{
 80a2eb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2eba:	2100      	movs	r1, #0
 80a2ebc:	7c00      	ldrb	r0, [r0, #16]
 80a2ebe:	f7ff f8e5 	bl	80a208c <HAL_USB_USART_Receive_Data>
}
 80a2ec2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2ec6:	bd08      	pop	{r3, pc}

080a2ec8 <_ZN9USBSerial4peekEv>:
{
 80a2ec8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2eca:	2101      	movs	r1, #1
 80a2ecc:	7c00      	ldrb	r0, [r0, #16]
 80a2ece:	f7ff f8dd 	bl	80a208c <HAL_USB_USART_Receive_Data>
}
 80a2ed2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2ed6:	bd08      	pop	{r3, pc}

080a2ed8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2ed8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2eda:	7c00      	ldrb	r0, [r0, #16]
 80a2edc:	f7ff f8ce 	bl	80a207c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2ee0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ee4:	bd08      	pop	{r3, pc}

080a2ee6 <_ZN9USBSerial9availableEv>:
{
 80a2ee6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2ee8:	7c00      	ldrb	r0, [r0, #16]
 80a2eea:	f7ff f8bf 	bl	80a206c <HAL_USB_USART_Available_Data>
}
 80a2eee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ef2:	bd08      	pop	{r3, pc}

080a2ef4 <_ZN9USBSerial5writeEh>:
{
 80a2ef4:	b538      	push	{r3, r4, r5, lr}
 80a2ef6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2ef8:	7c00      	ldrb	r0, [r0, #16]
{
 80a2efa:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2efc:	f7ff f8be 	bl	80a207c <HAL_USB_USART_Available_Data_For_Write>
 80a2f00:	2800      	cmp	r0, #0
 80a2f02:	dc01      	bgt.n	80a2f08 <_ZN9USBSerial5writeEh+0x14>
 80a2f04:	7c60      	ldrb	r0, [r4, #17]
 80a2f06:	b128      	cbz	r0, 80a2f14 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2f08:	4629      	mov	r1, r5
 80a2f0a:	7c20      	ldrb	r0, [r4, #16]
 80a2f0c:	f7ff f8c6 	bl	80a209c <HAL_USB_USART_Send_Data>
 80a2f10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2f14:	bd38      	pop	{r3, r4, r5, pc}

080a2f16 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2f16:	7c00      	ldrb	r0, [r0, #16]
 80a2f18:	f7ff b8c8 	b.w	80a20ac <HAL_USB_USART_Flush_Data>

080a2f1c <_ZN9USBSerialD0Ev>:
 80a2f1c:	b510      	push	{r4, lr}
 80a2f1e:	4604      	mov	r4, r0
 80a2f20:	2114      	movs	r1, #20
 80a2f22:	f7fd f8be 	bl	80a00a2 <_ZdlPvj>
 80a2f26:	4620      	mov	r0, r4
 80a2f28:	bd10      	pop	{r4, pc}

080a2f2a <__tcf_1>:
 80a2f2a:	4770      	bx	lr

080a2f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2f2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2f32:	4604      	mov	r4, r0
 80a2f34:	4608      	mov	r0, r1
 80a2f36:	2100      	movs	r1, #0
 80a2f38:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2f3c:	4b04      	ldr	r3, [pc, #16]	; (80a2f50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2f3e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2f40:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2f42:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2f44:	4611      	mov	r1, r2
  _blocking = true;
 80a2f46:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2f48:	f7ff f880 	bl	80a204c <HAL_USB_USART_Init>
}
 80a2f4c:	4620      	mov	r0, r4
 80a2f4e:	bd10      	pop	{r4, pc}
 80a2f50:	080a4798 	.word	0x080a4798

080a2f54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2f54:	2200      	movs	r2, #0
 80a2f56:	7c00      	ldrb	r0, [r0, #16]
 80a2f58:	f7ff b880 	b.w	80a205c <HAL_USB_USART_Begin>

080a2f5c <_Z19acquireSerialBufferv>:
{
 80a2f5c:	b510      	push	{r4, lr}
 80a2f5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2f60:	2214      	movs	r2, #20
 80a2f62:	2100      	movs	r1, #0
 80a2f64:	f001 fabc 	bl	80a44e0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a2f68:	4b05      	ldr	r3, [pc, #20]	; (80a2f80 <_Z19acquireSerialBufferv+0x24>)
}
 80a2f6a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2f6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2f6e:	4b05      	ldr	r3, [pc, #20]	; (80a2f84 <_Z19acquireSerialBufferv+0x28>)
 80a2f70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2f72:	f240 1301 	movw	r3, #257	; 0x101
 80a2f76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2f78:	2381      	movs	r3, #129	; 0x81
 80a2f7a:	8223      	strh	r3, [r4, #16]
}
 80a2f7c:	bd10      	pop	{r4, pc}
 80a2f7e:	bf00      	nop
 80a2f80:	20000178 	.word	0x20000178
 80a2f84:	20000279 	.word	0x20000279

080a2f88 <_Z16_fetch_usbserialv>:
{
 80a2f88:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2f8a:	4d0e      	ldr	r5, [pc, #56]	; (80a2fc4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2f8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2f8e:	a801      	add	r0, sp, #4
 80a2f90:	f7ff ffe4 	bl	80a2f5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2f94:	7829      	ldrb	r1, [r5, #0]
 80a2f96:	f3bf 8f5b 	dmb	ish
 80a2f9a:	f011 0401 	ands.w	r4, r1, #1
 80a2f9e:	d10e      	bne.n	80a2fbe <_Z16_fetch_usbserialv+0x36>
 80a2fa0:	4628      	mov	r0, r5
 80a2fa2:	f7fd f880 	bl	80a00a6 <__cxa_guard_acquire>
 80a2fa6:	b150      	cbz	r0, 80a2fbe <_Z16_fetch_usbserialv+0x36>
 80a2fa8:	4621      	mov	r1, r4
 80a2faa:	aa01      	add	r2, sp, #4
 80a2fac:	4806      	ldr	r0, [pc, #24]	; (80a2fc8 <_Z16_fetch_usbserialv+0x40>)
 80a2fae:	f7ff ffbd 	bl	80a2f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2fb2:	4628      	mov	r0, r5
 80a2fb4:	f7fd f87c 	bl	80a00b0 <__cxa_guard_release>
 80a2fb8:	4804      	ldr	r0, [pc, #16]	; (80a2fcc <_Z16_fetch_usbserialv+0x44>)
 80a2fba:	f001 fa7d 	bl	80a44b8 <atexit>
	return _usbserial;
}
 80a2fbe:	4802      	ldr	r0, [pc, #8]	; (80a2fc8 <_Z16_fetch_usbserialv+0x40>)
 80a2fc0:	b007      	add	sp, #28
 80a2fc2:	bd30      	pop	{r4, r5, pc}
 80a2fc4:	20000148 	.word	0x20000148
 80a2fc8:	20000150 	.word	0x20000150
 80a2fcc:	080a2eb5 	.word	0x080a2eb5

080a2fd0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2fd0:	b510      	push	{r4, lr}
 80a2fd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2fd4:	2214      	movs	r2, #20
 80a2fd6:	2100      	movs	r1, #0
 80a2fd8:	f001 fa82 	bl	80a44e0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2fdc:	4b05      	ldr	r3, [pc, #20]	; (80a2ff4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2fde:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2fe0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2fe2:	4b05      	ldr	r3, [pc, #20]	; (80a2ff8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2fe4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2fe6:	f240 1301 	movw	r3, #257	; 0x101
 80a2fea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2fec:	2381      	movs	r3, #129	; 0x81
 80a2fee:	8223      	strh	r3, [r4, #16]
}
 80a2ff0:	bd10      	pop	{r4, pc}
 80a2ff2:	bf00      	nop
 80a2ff4:	200002fa 	.word	0x200002fa
 80a2ff8:	200003fb 	.word	0x200003fb

080a2ffc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2ffc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2ffe:	4c0e      	ldr	r4, [pc, #56]	; (80a3038 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a3000:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3002:	a801      	add	r0, sp, #4
 80a3004:	f7ff ffe4 	bl	80a2fd0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3008:	7823      	ldrb	r3, [r4, #0]
 80a300a:	f3bf 8f5b 	dmb	ish
 80a300e:	07db      	lsls	r3, r3, #31
 80a3010:	d40e      	bmi.n	80a3030 <_Z17_fetch_usbserial1v+0x34>
 80a3012:	4620      	mov	r0, r4
 80a3014:	f7fd f847 	bl	80a00a6 <__cxa_guard_acquire>
 80a3018:	b150      	cbz	r0, 80a3030 <_Z17_fetch_usbserial1v+0x34>
 80a301a:	2101      	movs	r1, #1
 80a301c:	aa01      	add	r2, sp, #4
 80a301e:	4807      	ldr	r0, [pc, #28]	; (80a303c <_Z17_fetch_usbserial1v+0x40>)
 80a3020:	f7ff ff84 	bl	80a2f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3024:	4620      	mov	r0, r4
 80a3026:	f7fd f843 	bl	80a00b0 <__cxa_guard_release>
 80a302a:	4805      	ldr	r0, [pc, #20]	; (80a3040 <_Z17_fetch_usbserial1v+0x44>)
 80a302c:	f001 fa44 	bl	80a44b8 <atexit>
  return _usbserial1;
}
 80a3030:	4802      	ldr	r0, [pc, #8]	; (80a303c <_Z17_fetch_usbserial1v+0x40>)
 80a3032:	b006      	add	sp, #24
 80a3034:	bd10      	pop	{r4, pc}
 80a3036:	bf00      	nop
 80a3038:	2000014c 	.word	0x2000014c
 80a303c:	20000164 	.word	0x20000164
 80a3040:	080a2f2b 	.word	0x080a2f2b

080a3044 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a3044:	4770      	bx	lr

080a3046 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3046:	7441      	strb	r1, [r0, #17]
}
 80a3048:	4770      	bx	lr

080a304a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a304a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a304c:	7c00      	ldrb	r0, [r0, #16]
 80a304e:	f7fe ff8b 	bl	80a1f68 <hal_usart_available_data_for_write>
}
 80a3052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3056:	bd08      	pop	{r3, pc}

080a3058 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3058:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a305a:	7c00      	ldrb	r0, [r0, #16]
 80a305c:	f7fe ff5c 	bl	80a1f18 <hal_usart_available>
}
 80a3060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3064:	bd08      	pop	{r3, pc}

080a3066 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3066:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3068:	7c00      	ldrb	r0, [r0, #16]
 80a306a:	f7fe ff65 	bl	80a1f38 <hal_usart_peek>
}
 80a306e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3072:	bd08      	pop	{r3, pc}

080a3074 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3074:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3076:	7c00      	ldrb	r0, [r0, #16]
 80a3078:	f7fe ff56 	bl	80a1f28 <hal_usart_read>
}
 80a307c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3080:	bd08      	pop	{r3, pc}

080a3082 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3082:	7c00      	ldrb	r0, [r0, #16]
 80a3084:	f7fe bf60 	b.w	80a1f48 <hal_usart_flush>

080a3088 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3088:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a308a:	7c46      	ldrb	r6, [r0, #17]
{
 80a308c:	4604      	mov	r4, r0
 80a308e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3090:	b12e      	cbz	r6, 80a309e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3092:	4629      	mov	r1, r5
 80a3094:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a309a:	f7fe bf35 	b.w	80a1f08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a309e:	7c00      	ldrb	r0, [r0, #16]
 80a30a0:	f7fe ff62 	bl	80a1f68 <hal_usart_available_data_for_write>
 80a30a4:	2800      	cmp	r0, #0
 80a30a6:	dcf4      	bgt.n	80a3092 <_ZN11USARTSerial5writeEh+0xa>
}
 80a30a8:	4630      	mov	r0, r6
 80a30aa:	bd70      	pop	{r4, r5, r6, pc}

080a30ac <_ZN11USARTSerialD0Ev>:
 80a30ac:	b510      	push	{r4, lr}
 80a30ae:	4604      	mov	r4, r0
 80a30b0:	2114      	movs	r1, #20
 80a30b2:	f7fc fff6 	bl	80a00a2 <_ZdlPvj>
 80a30b6:	4620      	mov	r0, r4
 80a30b8:	bd10      	pop	{r4, pc}
	...

080a30bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a30bc:	b510      	push	{r4, lr}
 80a30be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a30c2:	4604      	mov	r4, r0
 80a30c4:	4608      	mov	r0, r1
 80a30c6:	4611      	mov	r1, r2
 80a30c8:	2200      	movs	r2, #0
 80a30ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a30ce:	4b04      	ldr	r3, [pc, #16]	; (80a30e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a30d0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a30d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a30d4:	2301      	movs	r3, #1
 80a30d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a30d8:	f7fe ff4e 	bl	80a1f78 <hal_usart_init_ex>
}
 80a30dc:	4620      	mov	r0, r4
 80a30de:	bd10      	pop	{r4, pc}
 80a30e0:	080a47c8 	.word	0x080a47c8

080a30e4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a30e4:	b510      	push	{r4, lr}
      if (_M_empty())
 80a30e6:	6883      	ldr	r3, [r0, #8]
 80a30e8:	4604      	mov	r4, r0
 80a30ea:	b90b      	cbnz	r3, 80a30f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a30ec:	f000 fa58 	bl	80a35a0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a30f0:	68c3      	ldr	r3, [r0, #12]
 80a30f2:	4798      	blx	r3
      if (_M_manager)
 80a30f4:	68a3      	ldr	r3, [r4, #8]
 80a30f6:	b11b      	cbz	r3, 80a3100 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a30f8:	2203      	movs	r2, #3
 80a30fa:	4621      	mov	r1, r4
 80a30fc:	4620      	mov	r0, r4
 80a30fe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3100:	4620      	mov	r0, r4
}
 80a3102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3106:	2110      	movs	r1, #16
 80a3108:	f7fc bfcb 	b.w	80a00a2 <_ZdlPvj>

080a310c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a310c:	4770      	bx	lr

080a310e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a310e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3110:	4606      	mov	r6, r0
 80a3112:	4615      	mov	r5, r2
 80a3114:	460c      	mov	r4, r1
 80a3116:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3118:	42bc      	cmp	r4, r7
 80a311a:	d006      	beq.n	80a312a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a311c:	6833      	ldr	r3, [r6, #0]
 80a311e:	4630      	mov	r0, r6
 80a3120:	689b      	ldr	r3, [r3, #8]
 80a3122:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3126:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3128:	e7f6      	b.n	80a3118 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a312a:	4628      	mov	r0, r5
 80a312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a312e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a312e:	2200      	movs	r2, #0
 80a3130:	7c00      	ldrb	r0, [r0, #16]
 80a3132:	f7fe bf41 	b.w	80a1fb8 <hal_i2c_write>

080a3136 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a3136:	2100      	movs	r1, #0
 80a3138:	7c00      	ldrb	r0, [r0, #16]
 80a313a:	f7fe bf45 	b.w	80a1fc8 <hal_i2c_available>

080a313e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a313e:	2100      	movs	r1, #0
 80a3140:	7c00      	ldrb	r0, [r0, #16]
 80a3142:	f7fe bf49 	b.w	80a1fd8 <hal_i2c_read>

080a3146 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a3146:	2100      	movs	r1, #0
 80a3148:	7c00      	ldrb	r0, [r0, #16]
 80a314a:	f7fe bf4d 	b.w	80a1fe8 <hal_i2c_peek>

080a314e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a314e:	2100      	movs	r1, #0
 80a3150:	7c00      	ldrb	r0, [r0, #16]
 80a3152:	f7fe bf51 	b.w	80a1ff8 <hal_i2c_flush>

080a3156 <_ZN7TwoWireD0Ev>:
 80a3156:	b510      	push	{r4, lr}
 80a3158:	4604      	mov	r4, r0
 80a315a:	2114      	movs	r1, #20
 80a315c:	f7fc ffa1 	bl	80a00a2 <_ZdlPvj>
 80a3160:	4620      	mov	r0, r4
 80a3162:	bd10      	pop	{r4, pc}

080a3164 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3164:	b510      	push	{r4, lr}
 80a3166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a316a:	4604      	mov	r4, r0
 80a316c:	4608      	mov	r0, r1
 80a316e:	2100      	movs	r1, #0
 80a3170:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3174:	4b03      	ldr	r3, [pc, #12]	; (80a3184 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a3176:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3178:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a317a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a317c:	f7fe ff4c 	bl	80a2018 <hal_i2c_init>
}
 80a3180:	4620      	mov	r0, r4
 80a3182:	bd10      	pop	{r4, pc}
 80a3184:	080a47f8 	.word	0x080a47f8

080a3188 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3188:	2300      	movs	r3, #0
 80a318a:	7c00      	ldrb	r0, [r0, #16]
 80a318c:	461a      	mov	r2, r3
 80a318e:	4619      	mov	r1, r3
 80a3190:	f7fe befa 	b.w	80a1f88 <hal_i2c_begin>

080a3194 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a3194:	2200      	movs	r2, #0
 80a3196:	7c00      	ldrb	r0, [r0, #16]
 80a3198:	f7fe befe 	b.w	80a1f98 <hal_i2c_begin_transmission>

080a319c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a319c:	b2c9      	uxtb	r1, r1
 80a319e:	f7ff bff9 	b.w	80a3194 <_ZN7TwoWire17beginTransmissionEh>

080a31a2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a31a2:	2200      	movs	r2, #0
 80a31a4:	7c00      	ldrb	r0, [r0, #16]
 80a31a6:	f7fe beff 	b.w	80a1fa8 <hal_i2c_end_transmission>

080a31aa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a31aa:	2101      	movs	r1, #1
 80a31ac:	f7ff bff9 	b.w	80a31a2 <_ZN7TwoWire15endTransmissionEh>

080a31b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a31b0:	2200      	movs	r2, #0
 80a31b2:	6840      	ldr	r0, [r0, #4]
 80a31b4:	4611      	mov	r1, r2
 80a31b6:	f7fe bfd5 	b.w	80a2164 <network_ready>

080a31ba <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a31ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a31bc:	4615      	mov	r5, r2
 80a31be:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a31c0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a31c2:	460e      	mov	r6, r1
 80a31c4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a31c6:	2100      	movs	r1, #0
 80a31c8:	a803      	add	r0, sp, #12
 80a31ca:	f001 f989 	bl	80a44e0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a31ce:	4628      	mov	r0, r5
 80a31d0:	f001 f9d7 	bl	80a4582 <strlen>
 80a31d4:	2700      	movs	r7, #0
 80a31d6:	b281      	uxth	r1, r0
 80a31d8:	6873      	ldr	r3, [r6, #4]
 80a31da:	4628      	mov	r0, r5
 80a31dc:	9700      	str	r7, [sp, #0]
 80a31de:	aa03      	add	r2, sp, #12
 80a31e0:	f7fe ff6c 	bl	80a20bc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a31e4:	b130      	cbz	r0, 80a31f4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a31e6:	4639      	mov	r1, r7
 80a31e8:	4620      	mov	r0, r4
 80a31ea:	f7ff fe3f 	bl	80a2e6c <_ZN9IPAddressC1Em>
    }
 80a31ee:	4620      	mov	r0, r4
 80a31f0:	b009      	add	sp, #36	; 0x24
 80a31f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a31f4:	4620      	mov	r0, r4
 80a31f6:	a903      	add	r1, sp, #12
 80a31f8:	f7ff fe26 	bl	80a2e48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a31fc:	e7f7      	b.n	80a31ee <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a31fe <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a31fe:	2200      	movs	r2, #0
 80a3200:	6840      	ldr	r0, [r0, #4]
 80a3202:	4611      	mov	r1, r2
 80a3204:	f7fe bfce 	b.w	80a21a4 <network_listening>

080a3208 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3208:	2200      	movs	r2, #0
 80a320a:	6840      	ldr	r0, [r0, #4]
 80a320c:	4611      	mov	r1, r2
 80a320e:	f7fe bfd9 	b.w	80a21c4 <network_get_listen_timeout>

080a3212 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3212:	2200      	movs	r2, #0
 80a3214:	6840      	ldr	r0, [r0, #4]
 80a3216:	f7fe bfcd 	b.w	80a21b4 <network_set_listen_timeout>

080a321a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a321a:	2200      	movs	r2, #0
 80a321c:	6840      	ldr	r0, [r0, #4]
 80a321e:	f081 0101 	eor.w	r1, r1, #1
 80a3222:	f7fe bfb7 	b.w	80a2194 <network_listen>

080a3226 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3226:	2300      	movs	r3, #0
 80a3228:	6840      	ldr	r0, [r0, #4]
 80a322a:	461a      	mov	r2, r3
 80a322c:	4619      	mov	r1, r3
 80a322e:	f7fe bfa9 	b.w	80a2184 <network_off>

080a3232 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a3232:	2300      	movs	r3, #0
 80a3234:	6840      	ldr	r0, [r0, #4]
 80a3236:	461a      	mov	r2, r3
 80a3238:	4619      	mov	r1, r3
 80a323a:	f7fe bf9b 	b.w	80a2174 <network_on>

080a323e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a323e:	2200      	movs	r2, #0
 80a3240:	6840      	ldr	r0, [r0, #4]
 80a3242:	4611      	mov	r1, r2
 80a3244:	f7fe bf7e 	b.w	80a2144 <network_connecting>

080a3248 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3248:	2200      	movs	r2, #0
 80a324a:	2102      	movs	r1, #2
 80a324c:	6840      	ldr	r0, [r0, #4]
 80a324e:	f7fe bf81 	b.w	80a2154 <network_disconnect>

080a3252 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3252:	2300      	movs	r3, #0
 80a3254:	6840      	ldr	r0, [r0, #4]
 80a3256:	461a      	mov	r2, r3
 80a3258:	f7fe bf6c 	b.w	80a2134 <network_connect>

080a325c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a325c:	2204      	movs	r2, #4
 80a325e:	4b02      	ldr	r3, [pc, #8]	; (80a3268 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3260:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3262:	4a02      	ldr	r2, [pc, #8]	; (80a326c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3264:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3266:	4770      	bx	lr
 80a3268:	2000047c 	.word	0x2000047c
 80a326c:	080a4820 	.word	0x080a4820

080a3270 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3270:	2300      	movs	r3, #0
 80a3272:	6840      	ldr	r0, [r0, #4]
 80a3274:	461a      	mov	r2, r3
 80a3276:	f7fe bf5d 	b.w	80a2134 <network_connect>

080a327a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a327a:	2200      	movs	r2, #0
 80a327c:	2102      	movs	r1, #2
 80a327e:	6840      	ldr	r0, [r0, #4]
 80a3280:	f7fe bf68 	b.w	80a2154 <network_disconnect>

080a3284 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3284:	2200      	movs	r2, #0
 80a3286:	6840      	ldr	r0, [r0, #4]
 80a3288:	4611      	mov	r1, r2
 80a328a:	f7fe bf5b 	b.w	80a2144 <network_connecting>

080a328e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a328e:	2200      	movs	r2, #0
 80a3290:	6840      	ldr	r0, [r0, #4]
 80a3292:	4611      	mov	r1, r2
 80a3294:	f7fe bf66 	b.w	80a2164 <network_ready>

080a3298 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3298:	2300      	movs	r3, #0
 80a329a:	6840      	ldr	r0, [r0, #4]
 80a329c:	461a      	mov	r2, r3
 80a329e:	4619      	mov	r1, r3
 80a32a0:	f7fe bf68 	b.w	80a2174 <network_on>

080a32a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a32a4:	2300      	movs	r3, #0
 80a32a6:	6840      	ldr	r0, [r0, #4]
 80a32a8:	461a      	mov	r2, r3
 80a32aa:	4619      	mov	r1, r3
 80a32ac:	f7fe bf6a 	b.w	80a2184 <network_off>

080a32b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a32b0:	2100      	movs	r1, #0
 80a32b2:	6840      	ldr	r0, [r0, #4]
 80a32b4:	f7fe bf8e 	b.w	80a21d4 <network_is_on>

080a32b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a32b8:	2100      	movs	r1, #0
 80a32ba:	6840      	ldr	r0, [r0, #4]
 80a32bc:	f7fe bf92 	b.w	80a21e4 <network_is_off>

080a32c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a32c0:	2200      	movs	r2, #0
 80a32c2:	6840      	ldr	r0, [r0, #4]
 80a32c4:	f081 0101 	eor.w	r1, r1, #1
 80a32c8:	f7fe bf64 	b.w	80a2194 <network_listen>

080a32cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a32cc:	2200      	movs	r2, #0
 80a32ce:	6840      	ldr	r0, [r0, #4]
 80a32d0:	f7fe bf70 	b.w	80a21b4 <network_set_listen_timeout>

080a32d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a32d4:	2200      	movs	r2, #0
 80a32d6:	6840      	ldr	r0, [r0, #4]
 80a32d8:	4611      	mov	r1, r2
 80a32da:	f7fe bf73 	b.w	80a21c4 <network_get_listen_timeout>

080a32de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a32de:	2200      	movs	r2, #0
 80a32e0:	6840      	ldr	r0, [r0, #4]
 80a32e2:	4611      	mov	r1, r2
 80a32e4:	f7fe bf5e 	b.w	80a21a4 <network_listening>

080a32e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a32e8:	b570      	push	{r4, r5, r6, lr}
 80a32ea:	4615      	mov	r5, r2
 80a32ec:	b08e      	sub	sp, #56	; 0x38
 80a32ee:	4604      	mov	r4, r0
    IPAddress addr;
 80a32f0:	a808      	add	r0, sp, #32
 80a32f2:	f7ff fd9b 	bl	80a2e2c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a32f6:	2211      	movs	r2, #17
 80a32f8:	2100      	movs	r1, #0
 80a32fa:	a803      	add	r0, sp, #12
 80a32fc:	f001 f8f0 	bl	80a44e0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3300:	2600      	movs	r6, #0
 80a3302:	4628      	mov	r0, r5
 80a3304:	f001 f93d 	bl	80a4582 <strlen>
 80a3308:	4b0a      	ldr	r3, [pc, #40]	; (80a3334 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a330a:	9600      	str	r6, [sp, #0]
 80a330c:	b281      	uxth	r1, r0
 80a330e:	685b      	ldr	r3, [r3, #4]
 80a3310:	4628      	mov	r0, r5
 80a3312:	aa03      	add	r2, sp, #12
 80a3314:	f7fe fed2 	bl	80a20bc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3318:	b130      	cbz	r0, 80a3328 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a331a:	4631      	mov	r1, r6
 80a331c:	4620      	mov	r0, r4
 80a331e:	f7ff fda5 	bl	80a2e6c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3322:	4620      	mov	r0, r4
 80a3324:	b00e      	add	sp, #56	; 0x38
 80a3326:	bd70      	pop	{r4, r5, r6, pc}
 80a3328:	4620      	mov	r0, r4
 80a332a:	a903      	add	r1, sp, #12
 80a332c:	f7ff fd8c 	bl	80a2e48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a3330:	e7f7      	b.n	80a3322 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a3332:	bf00      	nop
 80a3334:	2000047c 	.word	0x2000047c

080a3338 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3338:	4b02      	ldr	r3, [pc, #8]	; (80a3344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a333a:	4a03      	ldr	r2, [pc, #12]	; (80a3348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a333c:	601a      	str	r2, [r3, #0]
 80a333e:	2200      	movs	r2, #0
 80a3340:	605a      	str	r2, [r3, #4]

} // spark
 80a3342:	4770      	bx	lr
 80a3344:	20000484 	.word	0x20000484
 80a3348:	080a485c 	.word	0x080a485c

080a334c <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a334c:	4b02      	ldr	r3, [pc, #8]	; (80a3358 <__tcf_0+0xc>)
 80a334e:	6898      	ldr	r0, [r3, #8]
 80a3350:	b108      	cbz	r0, 80a3356 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a3352:	f7fe bdd1 	b.w	80a1ef8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3356:	4770      	bx	lr
 80a3358:	20000490 	.word	0x20000490

080a335c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a335c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a335e:	b570      	push	{r4, r5, r6, lr}
 80a3360:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3362:	d901      	bls.n	80a3368 <pinAvailable+0xc>
    return false;
 80a3364:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3366:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3368:	f1a0 030d 	sub.w	r3, r0, #13
 80a336c:	2b02      	cmp	r3, #2
 80a336e:	d90b      	bls.n	80a3388 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3370:	2801      	cmp	r0, #1
 80a3372:	d824      	bhi.n	80a33be <pinAvailable+0x62>
 80a3374:	f000 f8ee 	bl	80a3554 <_Z19__fetch_global_Wirev>
 80a3378:	2100      	movs	r1, #0
 80a337a:	7c00      	ldrb	r0, [r0, #16]
 80a337c:	f7fe fe44 	bl	80a2008 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3380:	f080 0001 	eor.w	r0, r0, #1
 80a3384:	b2c0      	uxtb	r0, r0
 80a3386:	e7ee      	b.n	80a3366 <pinAvailable+0xa>
 80a3388:	4e12      	ldr	r6, [pc, #72]	; (80a33d4 <pinAvailable+0x78>)
 80a338a:	7831      	ldrb	r1, [r6, #0]
 80a338c:	f3bf 8f5b 	dmb	ish
 80a3390:	f011 0501 	ands.w	r5, r1, #1
 80a3394:	d10d      	bne.n	80a33b2 <pinAvailable+0x56>
 80a3396:	4630      	mov	r0, r6
 80a3398:	f7fc fe85 	bl	80a00a6 <__cxa_guard_acquire>
 80a339c:	b148      	cbz	r0, 80a33b2 <pinAvailable+0x56>
 80a339e:	4629      	mov	r1, r5
 80a33a0:	480d      	ldr	r0, [pc, #52]	; (80a33d8 <pinAvailable+0x7c>)
 80a33a2:	f7fe ff7f 	bl	80a22a4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a33a6:	4630      	mov	r0, r6
 80a33a8:	f7fc fe82 	bl	80a00b0 <__cxa_guard_release>
 80a33ac:	480b      	ldr	r0, [pc, #44]	; (80a33dc <pinAvailable+0x80>)
 80a33ae:	f001 f883 	bl	80a44b8 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a33b2:	4b09      	ldr	r3, [pc, #36]	; (80a33d8 <pinAvailable+0x7c>)
 80a33b4:	7818      	ldrb	r0, [r3, #0]
 80a33b6:	f7fe fe41 	bl	80a203c <hal_spi_is_enabled>
 80a33ba:	2800      	cmp	r0, #0
 80a33bc:	d1d2      	bne.n	80a3364 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a33be:	3c12      	subs	r4, #18
 80a33c0:	2c01      	cmp	r4, #1
 80a33c2:	d805      	bhi.n	80a33d0 <pinAvailable+0x74>
 80a33c4:	f000 f87c 	bl	80a34c0 <_Z22__fetch_global_Serial1v>
 80a33c8:	7c00      	ldrb	r0, [r0, #16]
 80a33ca:	f7fe fdc5 	bl	80a1f58 <hal_usart_is_enabled>
 80a33ce:	e7d7      	b.n	80a3380 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a33d0:	2001      	movs	r0, #1
 80a33d2:	e7c8      	b.n	80a3366 <pinAvailable+0xa>
 80a33d4:	2000048c 	.word	0x2000048c
 80a33d8:	20000490 	.word	0x20000490
 80a33dc:	080a334d 	.word	0x080a334d

080a33e0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a33e0:	2817      	cmp	r0, #23
{
 80a33e2:	b538      	push	{r3, r4, r5, lr}
 80a33e4:	4604      	mov	r4, r0
 80a33e6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a33e8:	d80a      	bhi.n	80a3400 <pinMode+0x20>
 80a33ea:	29ff      	cmp	r1, #255	; 0xff
 80a33ec:	d008      	beq.n	80a3400 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a33ee:	f7ff ffb5 	bl	80a335c <pinAvailable>
 80a33f2:	b128      	cbz	r0, 80a3400 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a33f4:	4629      	mov	r1, r5
 80a33f6:	4620      	mov	r0, r4
}
 80a33f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a33fc:	f7fe bd2c 	b.w	80a1e58 <HAL_Pin_Mode>
}
 80a3400:	bd38      	pop	{r3, r4, r5, pc}

080a3402 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3402:	b538      	push	{r3, r4, r5, lr}
 80a3404:	4604      	mov	r4, r0
 80a3406:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3408:	f7fe fd2e 	bl	80a1e68 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a340c:	28ff      	cmp	r0, #255	; 0xff
 80a340e:	d010      	beq.n	80a3432 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3410:	2806      	cmp	r0, #6
 80a3412:	d804      	bhi.n	80a341e <digitalWrite+0x1c>
 80a3414:	234d      	movs	r3, #77	; 0x4d
 80a3416:	fa23 f000 	lsr.w	r0, r3, r0
 80a341a:	07c3      	lsls	r3, r0, #31
 80a341c:	d409      	bmi.n	80a3432 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a341e:	4620      	mov	r0, r4
 80a3420:	f7ff ff9c 	bl	80a335c <pinAvailable>
 80a3424:	b128      	cbz	r0, 80a3432 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3426:	4629      	mov	r1, r5
 80a3428:	4620      	mov	r0, r4
}
 80a342a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a342e:	f7fe bd23 	b.w	80a1e78 <HAL_GPIO_Write>
}
 80a3432:	bd38      	pop	{r3, r4, r5, pc}

080a3434 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3434:	b510      	push	{r4, lr}
 80a3436:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3438:	f7fe fd16 	bl	80a1e68 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a343c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a343e:	b2db      	uxtb	r3, r3
 80a3440:	2b01      	cmp	r3, #1
 80a3442:	d908      	bls.n	80a3456 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3444:	4620      	mov	r0, r4
 80a3446:	f7ff ff89 	bl	80a335c <pinAvailable>
 80a344a:	b120      	cbz	r0, 80a3456 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a344c:	4620      	mov	r0, r4
}
 80a344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a3452:	f7fe bd19 	b.w	80a1e88 <HAL_GPIO_Read>
}
 80a3456:	2000      	movs	r0, #0
 80a3458:	bd10      	pop	{r4, pc}

080a345a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a345a:	b510      	push	{r4, lr}
 80a345c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a345e:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a3460:	bf9c      	itt	ls
 80a3462:	340a      	addls	r4, #10
 80a3464:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3466:	4620      	mov	r0, r4
 80a3468:	f7ff ff78 	bl	80a335c <pinAvailable>
 80a346c:	b150      	cbz	r0, 80a3484 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a346e:	2103      	movs	r1, #3
 80a3470:	4620      	mov	r0, r4
 80a3472:	f7fe fce9 	bl	80a1e48 <HAL_Validate_Pin_Function>
 80a3476:	2803      	cmp	r0, #3
 80a3478:	d104      	bne.n	80a3484 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a347a:	4620      	mov	r0, r4
}
 80a347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a3480:	f7fe bd0a 	b.w	80a1e98 <hal_adc_read>
}
 80a3484:	2000      	movs	r0, #0
 80a3486:	bd10      	pop	{r4, pc}

080a3488 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a3488:	4770      	bx	lr
	...

080a348c <_Z20acquireSerial1Bufferv>:
{
 80a348c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a348e:	2514      	movs	r5, #20
{
 80a3490:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a3492:	462a      	mov	r2, r5
 80a3494:	2100      	movs	r1, #0
 80a3496:	f001 f823 	bl	80a44e0 <memset>
 80a349a:	8025      	strh	r5, [r4, #0]
 80a349c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a349e:	4e07      	ldr	r6, [pc, #28]	; (80a34bc <_Z20acquireSerial1Bufferv+0x30>)
 80a34a0:	4628      	mov	r0, r5
 80a34a2:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a34a4:	8125      	strh	r5, [r4, #8]
 80a34a6:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a34a8:	f000 f878 	bl	80a359c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a34ac:	4631      	mov	r1, r6
    };
 80a34ae:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a34b0:	4628      	mov	r0, r5
 80a34b2:	f000 f873 	bl	80a359c <_ZnajRKSt9nothrow_t>
    };
 80a34b6:	60e0      	str	r0, [r4, #12]
}
 80a34b8:	4620      	mov	r0, r4
 80a34ba:	bd70      	pop	{r4, r5, r6, pc}
 80a34bc:	080a4890 	.word	0x080a4890

080a34c0 <_Z22__fetch_global_Serial1v>:
{
 80a34c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a34c2:	4d0e      	ldr	r5, [pc, #56]	; (80a34fc <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a34c4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a34c6:	7829      	ldrb	r1, [r5, #0]
 80a34c8:	f3bf 8f5b 	dmb	ish
 80a34cc:	f011 0401 	ands.w	r4, r1, #1
 80a34d0:	d111      	bne.n	80a34f6 <_Z22__fetch_global_Serial1v+0x36>
 80a34d2:	4628      	mov	r0, r5
 80a34d4:	f7fc fde7 	bl	80a00a6 <__cxa_guard_acquire>
 80a34d8:	b168      	cbz	r0, 80a34f6 <_Z22__fetch_global_Serial1v+0x36>
 80a34da:	a801      	add	r0, sp, #4
 80a34dc:	f7ff ffd6 	bl	80a348c <_Z20acquireSerial1Bufferv>
 80a34e0:	4621      	mov	r1, r4
 80a34e2:	aa01      	add	r2, sp, #4
 80a34e4:	4806      	ldr	r0, [pc, #24]	; (80a3500 <_Z22__fetch_global_Serial1v+0x40>)
 80a34e6:	f7ff fde9 	bl	80a30bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a34ea:	4628      	mov	r0, r5
 80a34ec:	f7fc fde0 	bl	80a00b0 <__cxa_guard_release>
 80a34f0:	4804      	ldr	r0, [pc, #16]	; (80a3504 <_Z22__fetch_global_Serial1v+0x44>)
 80a34f2:	f000 ffe1 	bl	80a44b8 <atexit>
    return serial1;
}
 80a34f6:	4802      	ldr	r0, [pc, #8]	; (80a3500 <_Z22__fetch_global_Serial1v+0x40>)
 80a34f8:	b007      	add	sp, #28
 80a34fa:	bd30      	pop	{r4, r5, pc}
 80a34fc:	2000049c 	.word	0x2000049c
 80a3500:	200004a0 	.word	0x200004a0
 80a3504:	080a3489 	.word	0x080a3489

080a3508 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3508:	2300      	movs	r3, #0
 80a350a:	b507      	push	{r0, r1, r2, lr}
 80a350c:	461a      	mov	r2, r3
 80a350e:	4619      	mov	r1, r3
 80a3510:	9300      	str	r3, [sp, #0]
 80a3512:	4803      	ldr	r0, [pc, #12]	; (80a3520 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a3514:	f7ff fcc0 	bl	80a2e98 <_ZN9IPAddressC1Ehhhh>
 80a3518:	b003      	add	sp, #12
 80a351a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a351e:	bf00      	nop
 80a3520:	200004b8 	.word	0x200004b8

080a3524 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3524:	4770      	bx	lr
	...

080a3528 <_Z17acquireWireBufferv>:
{
 80a3528:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a352a:	2314      	movs	r3, #20
 80a352c:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a352e:	4e08      	ldr	r6, [pc, #32]	; (80a3550 <_Z17acquireWireBufferv+0x28>)
{
 80a3530:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3532:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3534:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3536:	6085      	str	r5, [r0, #8]
 80a3538:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a353a:	4628      	mov	r0, r5
 80a353c:	f000 f82e 	bl	80a359c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3540:	4631      	mov	r1, r6
	};
 80a3542:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3544:	4628      	mov	r0, r5
 80a3546:	f000 f829 	bl	80a359c <_ZnajRKSt9nothrow_t>
	};
 80a354a:	60e0      	str	r0, [r4, #12]
}
 80a354c:	4620      	mov	r0, r4
 80a354e:	bd70      	pop	{r4, r5, r6, pc}
 80a3550:	080a4890 	.word	0x080a4890

080a3554 <_Z19__fetch_global_Wirev>:
{
 80a3554:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3556:	4d0e      	ldr	r5, [pc, #56]	; (80a3590 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a3558:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a355a:	7829      	ldrb	r1, [r5, #0]
 80a355c:	f3bf 8f5b 	dmb	ish
 80a3560:	f011 0401 	ands.w	r4, r1, #1
 80a3564:	d111      	bne.n	80a358a <_Z19__fetch_global_Wirev+0x36>
 80a3566:	4628      	mov	r0, r5
 80a3568:	f7fc fd9d 	bl	80a00a6 <__cxa_guard_acquire>
 80a356c:	b168      	cbz	r0, 80a358a <_Z19__fetch_global_Wirev+0x36>
 80a356e:	a801      	add	r0, sp, #4
 80a3570:	f7ff ffda 	bl	80a3528 <_Z17acquireWireBufferv>
 80a3574:	4621      	mov	r1, r4
 80a3576:	aa01      	add	r2, sp, #4
 80a3578:	4806      	ldr	r0, [pc, #24]	; (80a3594 <_Z19__fetch_global_Wirev+0x40>)
 80a357a:	f7ff fdf3 	bl	80a3164 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a357e:	4628      	mov	r0, r5
 80a3580:	f7fc fd96 	bl	80a00b0 <__cxa_guard_release>
 80a3584:	4804      	ldr	r0, [pc, #16]	; (80a3598 <_Z19__fetch_global_Wirev+0x44>)
 80a3586:	f000 ff97 	bl	80a44b8 <atexit>
	return wire;
}
 80a358a:	4802      	ldr	r0, [pc, #8]	; (80a3594 <_Z19__fetch_global_Wirev+0x40>)
 80a358c:	b007      	add	sp, #28
 80a358e:	bd30      	pop	{r4, r5, pc}
 80a3590:	200004d0 	.word	0x200004d0
 80a3594:	200004d4 	.word	0x200004d4
 80a3598:	080a3525 	.word	0x080a3525

080a359c <_ZnajRKSt9nothrow_t>:
 80a359c:	f7fc bd7f 	b.w	80a009e <_Znaj>

080a35a0 <_ZSt25__throw_bad_function_callv>:
 80a35a0:	b508      	push	{r3, lr}
 80a35a2:	f7fe fe5f 	bl	80a2264 <abort>
	...

080a35a8 <__aeabi_drsub>:
 80a35a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a35ac:	e002      	b.n	80a35b4 <__adddf3>
 80a35ae:	bf00      	nop

080a35b0 <__aeabi_dsub>:
 80a35b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a35b4 <__adddf3>:
 80a35b4:	b530      	push	{r4, r5, lr}
 80a35b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a35ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a35be:	ea94 0f05 	teq	r4, r5
 80a35c2:	bf08      	it	eq
 80a35c4:	ea90 0f02 	teqeq	r0, r2
 80a35c8:	bf1f      	itttt	ne
 80a35ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a35ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a35d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a35d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a35da:	f000 80e2 	beq.w	80a37a2 <__adddf3+0x1ee>
 80a35de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a35e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a35e6:	bfb8      	it	lt
 80a35e8:	426d      	neglt	r5, r5
 80a35ea:	dd0c      	ble.n	80a3606 <__adddf3+0x52>
 80a35ec:	442c      	add	r4, r5
 80a35ee:	ea80 0202 	eor.w	r2, r0, r2
 80a35f2:	ea81 0303 	eor.w	r3, r1, r3
 80a35f6:	ea82 0000 	eor.w	r0, r2, r0
 80a35fa:	ea83 0101 	eor.w	r1, r3, r1
 80a35fe:	ea80 0202 	eor.w	r2, r0, r2
 80a3602:	ea81 0303 	eor.w	r3, r1, r3
 80a3606:	2d36      	cmp	r5, #54	; 0x36
 80a3608:	bf88      	it	hi
 80a360a:	bd30      	pophi	{r4, r5, pc}
 80a360c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3610:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a361c:	d002      	beq.n	80a3624 <__adddf3+0x70>
 80a361e:	4240      	negs	r0, r0
 80a3620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3628:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a362c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3630:	d002      	beq.n	80a3638 <__adddf3+0x84>
 80a3632:	4252      	negs	r2, r2
 80a3634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3638:	ea94 0f05 	teq	r4, r5
 80a363c:	f000 80a7 	beq.w	80a378e <__adddf3+0x1da>
 80a3640:	f1a4 0401 	sub.w	r4, r4, #1
 80a3644:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3648:	db0d      	blt.n	80a3666 <__adddf3+0xb2>
 80a364a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a364e:	fa22 f205 	lsr.w	r2, r2, r5
 80a3652:	1880      	adds	r0, r0, r2
 80a3654:	f141 0100 	adc.w	r1, r1, #0
 80a3658:	fa03 f20e 	lsl.w	r2, r3, lr
 80a365c:	1880      	adds	r0, r0, r2
 80a365e:	fa43 f305 	asr.w	r3, r3, r5
 80a3662:	4159      	adcs	r1, r3
 80a3664:	e00e      	b.n	80a3684 <__adddf3+0xd0>
 80a3666:	f1a5 0520 	sub.w	r5, r5, #32
 80a366a:	f10e 0e20 	add.w	lr, lr, #32
 80a366e:	2a01      	cmp	r2, #1
 80a3670:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3674:	bf28      	it	cs
 80a3676:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a367a:	fa43 f305 	asr.w	r3, r3, r5
 80a367e:	18c0      	adds	r0, r0, r3
 80a3680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3688:	d507      	bpl.n	80a369a <__adddf3+0xe6>
 80a368a:	f04f 0e00 	mov.w	lr, #0
 80a368e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3692:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3696:	eb6e 0101 	sbc.w	r1, lr, r1
 80a369a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a369e:	d31b      	bcc.n	80a36d8 <__adddf3+0x124>
 80a36a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a36a4:	d30c      	bcc.n	80a36c0 <__adddf3+0x10c>
 80a36a6:	0849      	lsrs	r1, r1, #1
 80a36a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a36ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a36b0:	f104 0401 	add.w	r4, r4, #1
 80a36b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a36b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a36bc:	f080 809a 	bcs.w	80a37f4 <__adddf3+0x240>
 80a36c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a36c4:	bf08      	it	eq
 80a36c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a36ca:	f150 0000 	adcs.w	r0, r0, #0
 80a36ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a36d2:	ea41 0105 	orr.w	r1, r1, r5
 80a36d6:	bd30      	pop	{r4, r5, pc}
 80a36d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a36dc:	4140      	adcs	r0, r0
 80a36de:	eb41 0101 	adc.w	r1, r1, r1
 80a36e2:	3c01      	subs	r4, #1
 80a36e4:	bf28      	it	cs
 80a36e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a36ea:	d2e9      	bcs.n	80a36c0 <__adddf3+0x10c>
 80a36ec:	f091 0f00 	teq	r1, #0
 80a36f0:	bf04      	itt	eq
 80a36f2:	4601      	moveq	r1, r0
 80a36f4:	2000      	moveq	r0, #0
 80a36f6:	fab1 f381 	clz	r3, r1
 80a36fa:	bf08      	it	eq
 80a36fc:	3320      	addeq	r3, #32
 80a36fe:	f1a3 030b 	sub.w	r3, r3, #11
 80a3702:	f1b3 0220 	subs.w	r2, r3, #32
 80a3706:	da0c      	bge.n	80a3722 <__adddf3+0x16e>
 80a3708:	320c      	adds	r2, #12
 80a370a:	dd08      	ble.n	80a371e <__adddf3+0x16a>
 80a370c:	f102 0c14 	add.w	ip, r2, #20
 80a3710:	f1c2 020c 	rsb	r2, r2, #12
 80a3714:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3718:	fa21 f102 	lsr.w	r1, r1, r2
 80a371c:	e00c      	b.n	80a3738 <__adddf3+0x184>
 80a371e:	f102 0214 	add.w	r2, r2, #20
 80a3722:	bfd8      	it	le
 80a3724:	f1c2 0c20 	rsble	ip, r2, #32
 80a3728:	fa01 f102 	lsl.w	r1, r1, r2
 80a372c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3730:	bfdc      	itt	le
 80a3732:	ea41 010c 	orrle.w	r1, r1, ip
 80a3736:	4090      	lslle	r0, r2
 80a3738:	1ae4      	subs	r4, r4, r3
 80a373a:	bfa2      	ittt	ge
 80a373c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3740:	4329      	orrge	r1, r5
 80a3742:	bd30      	popge	{r4, r5, pc}
 80a3744:	ea6f 0404 	mvn.w	r4, r4
 80a3748:	3c1f      	subs	r4, #31
 80a374a:	da1c      	bge.n	80a3786 <__adddf3+0x1d2>
 80a374c:	340c      	adds	r4, #12
 80a374e:	dc0e      	bgt.n	80a376e <__adddf3+0x1ba>
 80a3750:	f104 0414 	add.w	r4, r4, #20
 80a3754:	f1c4 0220 	rsb	r2, r4, #32
 80a3758:	fa20 f004 	lsr.w	r0, r0, r4
 80a375c:	fa01 f302 	lsl.w	r3, r1, r2
 80a3760:	ea40 0003 	orr.w	r0, r0, r3
 80a3764:	fa21 f304 	lsr.w	r3, r1, r4
 80a3768:	ea45 0103 	orr.w	r1, r5, r3
 80a376c:	bd30      	pop	{r4, r5, pc}
 80a376e:	f1c4 040c 	rsb	r4, r4, #12
 80a3772:	f1c4 0220 	rsb	r2, r4, #32
 80a3776:	fa20 f002 	lsr.w	r0, r0, r2
 80a377a:	fa01 f304 	lsl.w	r3, r1, r4
 80a377e:	ea40 0003 	orr.w	r0, r0, r3
 80a3782:	4629      	mov	r1, r5
 80a3784:	bd30      	pop	{r4, r5, pc}
 80a3786:	fa21 f004 	lsr.w	r0, r1, r4
 80a378a:	4629      	mov	r1, r5
 80a378c:	bd30      	pop	{r4, r5, pc}
 80a378e:	f094 0f00 	teq	r4, #0
 80a3792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3796:	bf06      	itte	eq
 80a3798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a379c:	3401      	addeq	r4, #1
 80a379e:	3d01      	subne	r5, #1
 80a37a0:	e74e      	b.n	80a3640 <__adddf3+0x8c>
 80a37a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a37a6:	bf18      	it	ne
 80a37a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a37ac:	d029      	beq.n	80a3802 <__adddf3+0x24e>
 80a37ae:	ea94 0f05 	teq	r4, r5
 80a37b2:	bf08      	it	eq
 80a37b4:	ea90 0f02 	teqeq	r0, r2
 80a37b8:	d005      	beq.n	80a37c6 <__adddf3+0x212>
 80a37ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80a37be:	bf04      	itt	eq
 80a37c0:	4619      	moveq	r1, r3
 80a37c2:	4610      	moveq	r0, r2
 80a37c4:	bd30      	pop	{r4, r5, pc}
 80a37c6:	ea91 0f03 	teq	r1, r3
 80a37ca:	bf1e      	ittt	ne
 80a37cc:	2100      	movne	r1, #0
 80a37ce:	2000      	movne	r0, #0
 80a37d0:	bd30      	popne	{r4, r5, pc}
 80a37d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a37d6:	d105      	bne.n	80a37e4 <__adddf3+0x230>
 80a37d8:	0040      	lsls	r0, r0, #1
 80a37da:	4149      	adcs	r1, r1
 80a37dc:	bf28      	it	cs
 80a37de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a37e2:	bd30      	pop	{r4, r5, pc}
 80a37e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a37e8:	bf3c      	itt	cc
 80a37ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a37ee:	bd30      	popcc	{r4, r5, pc}
 80a37f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a37f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a37f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a37fc:	f04f 0000 	mov.w	r0, #0
 80a3800:	bd30      	pop	{r4, r5, pc}
 80a3802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3806:	bf1a      	itte	ne
 80a3808:	4619      	movne	r1, r3
 80a380a:	4610      	movne	r0, r2
 80a380c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3810:	bf1c      	itt	ne
 80a3812:	460b      	movne	r3, r1
 80a3814:	4602      	movne	r2, r0
 80a3816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a381a:	bf06      	itte	eq
 80a381c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3820:	ea91 0f03 	teqeq	r1, r3
 80a3824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3828:	bd30      	pop	{r4, r5, pc}
 80a382a:	bf00      	nop

080a382c <__aeabi_ui2d>:
 80a382c:	f090 0f00 	teq	r0, #0
 80a3830:	bf04      	itt	eq
 80a3832:	2100      	moveq	r1, #0
 80a3834:	4770      	bxeq	lr
 80a3836:	b530      	push	{r4, r5, lr}
 80a3838:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a383c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3840:	f04f 0500 	mov.w	r5, #0
 80a3844:	f04f 0100 	mov.w	r1, #0
 80a3848:	e750      	b.n	80a36ec <__adddf3+0x138>
 80a384a:	bf00      	nop

080a384c <__aeabi_i2d>:
 80a384c:	f090 0f00 	teq	r0, #0
 80a3850:	bf04      	itt	eq
 80a3852:	2100      	moveq	r1, #0
 80a3854:	4770      	bxeq	lr
 80a3856:	b530      	push	{r4, r5, lr}
 80a3858:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a385c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3864:	bf48      	it	mi
 80a3866:	4240      	negmi	r0, r0
 80a3868:	f04f 0100 	mov.w	r1, #0
 80a386c:	e73e      	b.n	80a36ec <__adddf3+0x138>
 80a386e:	bf00      	nop

080a3870 <__aeabi_f2d>:
 80a3870:	0042      	lsls	r2, r0, #1
 80a3872:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3876:	ea4f 0131 	mov.w	r1, r1, rrx
 80a387a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a387e:	bf1f      	itttt	ne
 80a3880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a388c:	4770      	bxne	lr
 80a388e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3892:	bf08      	it	eq
 80a3894:	4770      	bxeq	lr
 80a3896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a389a:	bf04      	itt	eq
 80a389c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a38a0:	4770      	bxeq	lr
 80a38a2:	b530      	push	{r4, r5, lr}
 80a38a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a38a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a38ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a38b0:	e71c      	b.n	80a36ec <__adddf3+0x138>
 80a38b2:	bf00      	nop

080a38b4 <__aeabi_ul2d>:
 80a38b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a38b8:	bf08      	it	eq
 80a38ba:	4770      	bxeq	lr
 80a38bc:	b530      	push	{r4, r5, lr}
 80a38be:	f04f 0500 	mov.w	r5, #0
 80a38c2:	e00a      	b.n	80a38da <__aeabi_l2d+0x16>

080a38c4 <__aeabi_l2d>:
 80a38c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a38c8:	bf08      	it	eq
 80a38ca:	4770      	bxeq	lr
 80a38cc:	b530      	push	{r4, r5, lr}
 80a38ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a38d2:	d502      	bpl.n	80a38da <__aeabi_l2d+0x16>
 80a38d4:	4240      	negs	r0, r0
 80a38d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a38da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a38de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a38e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a38e6:	f43f aed8 	beq.w	80a369a <__adddf3+0xe6>
 80a38ea:	f04f 0203 	mov.w	r2, #3
 80a38ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a38f2:	bf18      	it	ne
 80a38f4:	3203      	addne	r2, #3
 80a38f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a38fa:	bf18      	it	ne
 80a38fc:	3203      	addne	r2, #3
 80a38fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3902:	f1c2 0320 	rsb	r3, r2, #32
 80a3906:	fa00 fc03 	lsl.w	ip, r0, r3
 80a390a:	fa20 f002 	lsr.w	r0, r0, r2
 80a390e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3912:	ea40 000e 	orr.w	r0, r0, lr
 80a3916:	fa21 f102 	lsr.w	r1, r1, r2
 80a391a:	4414      	add	r4, r2
 80a391c:	e6bd      	b.n	80a369a <__adddf3+0xe6>
 80a391e:	bf00      	nop

080a3920 <__aeabi_dmul>:
 80a3920:	b570      	push	{r4, r5, r6, lr}
 80a3922:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a392a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a392e:	bf1d      	ittte	ne
 80a3930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3934:	ea94 0f0c 	teqne	r4, ip
 80a3938:	ea95 0f0c 	teqne	r5, ip
 80a393c:	f000 f8de 	bleq	80a3afc <__aeabi_dmul+0x1dc>
 80a3940:	442c      	add	r4, r5
 80a3942:	ea81 0603 	eor.w	r6, r1, r3
 80a3946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a394a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a394e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3952:	bf18      	it	ne
 80a3954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a395c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3960:	d038      	beq.n	80a39d4 <__aeabi_dmul+0xb4>
 80a3962:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3966:	f04f 0500 	mov.w	r5, #0
 80a396a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a396e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3972:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3976:	f04f 0600 	mov.w	r6, #0
 80a397a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a397e:	f09c 0f00 	teq	ip, #0
 80a3982:	bf18      	it	ne
 80a3984:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a398c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3994:	d204      	bcs.n	80a39a0 <__aeabi_dmul+0x80>
 80a3996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a399a:	416d      	adcs	r5, r5
 80a399c:	eb46 0606 	adc.w	r6, r6, r6
 80a39a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a39a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a39a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a39ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a39b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a39b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a39b8:	bf88      	it	hi
 80a39ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a39be:	d81e      	bhi.n	80a39fe <__aeabi_dmul+0xde>
 80a39c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a39c4:	bf08      	it	eq
 80a39c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a39ca:	f150 0000 	adcs.w	r0, r0, #0
 80a39ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a39d2:	bd70      	pop	{r4, r5, r6, pc}
 80a39d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a39d8:	ea46 0101 	orr.w	r1, r6, r1
 80a39dc:	ea40 0002 	orr.w	r0, r0, r2
 80a39e0:	ea81 0103 	eor.w	r1, r1, r3
 80a39e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a39e8:	bfc2      	ittt	gt
 80a39ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a39ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a39f2:	bd70      	popgt	{r4, r5, r6, pc}
 80a39f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a39f8:	f04f 0e00 	mov.w	lr, #0
 80a39fc:	3c01      	subs	r4, #1
 80a39fe:	f300 80ab 	bgt.w	80a3b58 <__aeabi_dmul+0x238>
 80a3a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3a06:	bfde      	ittt	le
 80a3a08:	2000      	movle	r0, #0
 80a3a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3a0e:	bd70      	pople	{r4, r5, r6, pc}
 80a3a10:	f1c4 0400 	rsb	r4, r4, #0
 80a3a14:	3c20      	subs	r4, #32
 80a3a16:	da35      	bge.n	80a3a84 <__aeabi_dmul+0x164>
 80a3a18:	340c      	adds	r4, #12
 80a3a1a:	dc1b      	bgt.n	80a3a54 <__aeabi_dmul+0x134>
 80a3a1c:	f104 0414 	add.w	r4, r4, #20
 80a3a20:	f1c4 0520 	rsb	r5, r4, #32
 80a3a24:	fa00 f305 	lsl.w	r3, r0, r5
 80a3a28:	fa20 f004 	lsr.w	r0, r0, r4
 80a3a2c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3a30:	ea40 0002 	orr.w	r0, r0, r2
 80a3a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3a40:	fa21 f604 	lsr.w	r6, r1, r4
 80a3a44:	eb42 0106 	adc.w	r1, r2, r6
 80a3a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3a4c:	bf08      	it	eq
 80a3a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3a52:	bd70      	pop	{r4, r5, r6, pc}
 80a3a54:	f1c4 040c 	rsb	r4, r4, #12
 80a3a58:	f1c4 0520 	rsb	r5, r4, #32
 80a3a5c:	fa00 f304 	lsl.w	r3, r0, r4
 80a3a60:	fa20 f005 	lsr.w	r0, r0, r5
 80a3a64:	fa01 f204 	lsl.w	r2, r1, r4
 80a3a68:	ea40 0002 	orr.w	r0, r0, r2
 80a3a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3a74:	f141 0100 	adc.w	r1, r1, #0
 80a3a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3a7c:	bf08      	it	eq
 80a3a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3a82:	bd70      	pop	{r4, r5, r6, pc}
 80a3a84:	f1c4 0520 	rsb	r5, r4, #32
 80a3a88:	fa00 f205 	lsl.w	r2, r0, r5
 80a3a8c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3a90:	fa20 f304 	lsr.w	r3, r0, r4
 80a3a94:	fa01 f205 	lsl.w	r2, r1, r5
 80a3a98:	ea43 0302 	orr.w	r3, r3, r2
 80a3a9c:	fa21 f004 	lsr.w	r0, r1, r4
 80a3aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3aa4:	fa21 f204 	lsr.w	r2, r1, r4
 80a3aa8:	ea20 0002 	bic.w	r0, r0, r2
 80a3aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3ab4:	bf08      	it	eq
 80a3ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3aba:	bd70      	pop	{r4, r5, r6, pc}
 80a3abc:	f094 0f00 	teq	r4, #0
 80a3ac0:	d10f      	bne.n	80a3ae2 <__aeabi_dmul+0x1c2>
 80a3ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3ac6:	0040      	lsls	r0, r0, #1
 80a3ac8:	eb41 0101 	adc.w	r1, r1, r1
 80a3acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3ad0:	bf08      	it	eq
 80a3ad2:	3c01      	subeq	r4, #1
 80a3ad4:	d0f7      	beq.n	80a3ac6 <__aeabi_dmul+0x1a6>
 80a3ad6:	ea41 0106 	orr.w	r1, r1, r6
 80a3ada:	f095 0f00 	teq	r5, #0
 80a3ade:	bf18      	it	ne
 80a3ae0:	4770      	bxne	lr
 80a3ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3ae6:	0052      	lsls	r2, r2, #1
 80a3ae8:	eb43 0303 	adc.w	r3, r3, r3
 80a3aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3af0:	bf08      	it	eq
 80a3af2:	3d01      	subeq	r5, #1
 80a3af4:	d0f7      	beq.n	80a3ae6 <__aeabi_dmul+0x1c6>
 80a3af6:	ea43 0306 	orr.w	r3, r3, r6
 80a3afa:	4770      	bx	lr
 80a3afc:	ea94 0f0c 	teq	r4, ip
 80a3b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3b04:	bf18      	it	ne
 80a3b06:	ea95 0f0c 	teqne	r5, ip
 80a3b0a:	d00c      	beq.n	80a3b26 <__aeabi_dmul+0x206>
 80a3b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3b10:	bf18      	it	ne
 80a3b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3b16:	d1d1      	bne.n	80a3abc <__aeabi_dmul+0x19c>
 80a3b18:	ea81 0103 	eor.w	r1, r1, r3
 80a3b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3b20:	f04f 0000 	mov.w	r0, #0
 80a3b24:	bd70      	pop	{r4, r5, r6, pc}
 80a3b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3b2a:	bf06      	itte	eq
 80a3b2c:	4610      	moveq	r0, r2
 80a3b2e:	4619      	moveq	r1, r3
 80a3b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3b34:	d019      	beq.n	80a3b6a <__aeabi_dmul+0x24a>
 80a3b36:	ea94 0f0c 	teq	r4, ip
 80a3b3a:	d102      	bne.n	80a3b42 <__aeabi_dmul+0x222>
 80a3b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3b40:	d113      	bne.n	80a3b6a <__aeabi_dmul+0x24a>
 80a3b42:	ea95 0f0c 	teq	r5, ip
 80a3b46:	d105      	bne.n	80a3b54 <__aeabi_dmul+0x234>
 80a3b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3b4c:	bf1c      	itt	ne
 80a3b4e:	4610      	movne	r0, r2
 80a3b50:	4619      	movne	r1, r3
 80a3b52:	d10a      	bne.n	80a3b6a <__aeabi_dmul+0x24a>
 80a3b54:	ea81 0103 	eor.w	r1, r1, r3
 80a3b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3b64:	f04f 0000 	mov.w	r0, #0
 80a3b68:	bd70      	pop	{r4, r5, r6, pc}
 80a3b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3b72:	bd70      	pop	{r4, r5, r6, pc}

080a3b74 <__aeabi_ddiv>:
 80a3b74:	b570      	push	{r4, r5, r6, lr}
 80a3b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3b82:	bf1d      	ittte	ne
 80a3b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3b88:	ea94 0f0c 	teqne	r4, ip
 80a3b8c:	ea95 0f0c 	teqne	r5, ip
 80a3b90:	f000 f8a7 	bleq	80a3ce2 <__aeabi_ddiv+0x16e>
 80a3b94:	eba4 0405 	sub.w	r4, r4, r5
 80a3b98:	ea81 0e03 	eor.w	lr, r1, r3
 80a3b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ba4:	f000 8088 	beq.w	80a3cb8 <__aeabi_ddiv+0x144>
 80a3ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3bcc:	429d      	cmp	r5, r3
 80a3bce:	bf08      	it	eq
 80a3bd0:	4296      	cmpeq	r6, r2
 80a3bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3bda:	d202      	bcs.n	80a3be2 <__aeabi_ddiv+0x6e>
 80a3bdc:	085b      	lsrs	r3, r3, #1
 80a3bde:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3be2:	1ab6      	subs	r6, r6, r2
 80a3be4:	eb65 0503 	sbc.w	r5, r5, r3
 80a3be8:	085b      	lsrs	r3, r3, #1
 80a3bea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3bfe:	bf22      	ittt	cs
 80a3c00:	1ab6      	subcs	r6, r6, r2
 80a3c02:	4675      	movcs	r5, lr
 80a3c04:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3c08:	085b      	lsrs	r3, r3, #1
 80a3c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c16:	bf22      	ittt	cs
 80a3c18:	1ab6      	subcs	r6, r6, r2
 80a3c1a:	4675      	movcs	r5, lr
 80a3c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3c20:	085b      	lsrs	r3, r3, #1
 80a3c22:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c26:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c2e:	bf22      	ittt	cs
 80a3c30:	1ab6      	subcs	r6, r6, r2
 80a3c32:	4675      	movcs	r5, lr
 80a3c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3c38:	085b      	lsrs	r3, r3, #1
 80a3c3a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c3e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c42:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c46:	bf22      	ittt	cs
 80a3c48:	1ab6      	subcs	r6, r6, r2
 80a3c4a:	4675      	movcs	r5, lr
 80a3c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3c50:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3c54:	d018      	beq.n	80a3c88 <__aeabi_ddiv+0x114>
 80a3c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3c72:	d1c0      	bne.n	80a3bf6 <__aeabi_ddiv+0x82>
 80a3c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3c78:	d10b      	bne.n	80a3c92 <__aeabi_ddiv+0x11e>
 80a3c7a:	ea41 0100 	orr.w	r1, r1, r0
 80a3c7e:	f04f 0000 	mov.w	r0, #0
 80a3c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3c86:	e7b6      	b.n	80a3bf6 <__aeabi_ddiv+0x82>
 80a3c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3c8c:	bf04      	itt	eq
 80a3c8e:	4301      	orreq	r1, r0
 80a3c90:	2000      	moveq	r0, #0
 80a3c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3c96:	bf88      	it	hi
 80a3c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3c9c:	f63f aeaf 	bhi.w	80a39fe <__aeabi_dmul+0xde>
 80a3ca0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3ca4:	bf04      	itt	eq
 80a3ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3cae:	f150 0000 	adcs.w	r0, r0, #0
 80a3cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3cb6:	bd70      	pop	{r4, r5, r6, pc}
 80a3cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3cc4:	bfc2      	ittt	gt
 80a3cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3cce:	bd70      	popgt	{r4, r5, r6, pc}
 80a3cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3cd4:	f04f 0e00 	mov.w	lr, #0
 80a3cd8:	3c01      	subs	r4, #1
 80a3cda:	e690      	b.n	80a39fe <__aeabi_dmul+0xde>
 80a3cdc:	ea45 0e06 	orr.w	lr, r5, r6
 80a3ce0:	e68d      	b.n	80a39fe <__aeabi_dmul+0xde>
 80a3ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3ce6:	ea94 0f0c 	teq	r4, ip
 80a3cea:	bf08      	it	eq
 80a3cec:	ea95 0f0c 	teqeq	r5, ip
 80a3cf0:	f43f af3b 	beq.w	80a3b6a <__aeabi_dmul+0x24a>
 80a3cf4:	ea94 0f0c 	teq	r4, ip
 80a3cf8:	d10a      	bne.n	80a3d10 <__aeabi_ddiv+0x19c>
 80a3cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3cfe:	f47f af34 	bne.w	80a3b6a <__aeabi_dmul+0x24a>
 80a3d02:	ea95 0f0c 	teq	r5, ip
 80a3d06:	f47f af25 	bne.w	80a3b54 <__aeabi_dmul+0x234>
 80a3d0a:	4610      	mov	r0, r2
 80a3d0c:	4619      	mov	r1, r3
 80a3d0e:	e72c      	b.n	80a3b6a <__aeabi_dmul+0x24a>
 80a3d10:	ea95 0f0c 	teq	r5, ip
 80a3d14:	d106      	bne.n	80a3d24 <__aeabi_ddiv+0x1b0>
 80a3d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3d1a:	f43f aefd 	beq.w	80a3b18 <__aeabi_dmul+0x1f8>
 80a3d1e:	4610      	mov	r0, r2
 80a3d20:	4619      	mov	r1, r3
 80a3d22:	e722      	b.n	80a3b6a <__aeabi_dmul+0x24a>
 80a3d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3d28:	bf18      	it	ne
 80a3d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3d2e:	f47f aec5 	bne.w	80a3abc <__aeabi_dmul+0x19c>
 80a3d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3d36:	f47f af0d 	bne.w	80a3b54 <__aeabi_dmul+0x234>
 80a3d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3d3e:	f47f aeeb 	bne.w	80a3b18 <__aeabi_dmul+0x1f8>
 80a3d42:	e712      	b.n	80a3b6a <__aeabi_dmul+0x24a>

080a3d44 <__gedf2>:
 80a3d44:	f04f 3cff 	mov.w	ip, #4294967295
 80a3d48:	e006      	b.n	80a3d58 <__cmpdf2+0x4>
 80a3d4a:	bf00      	nop

080a3d4c <__ledf2>:
 80a3d4c:	f04f 0c01 	mov.w	ip, #1
 80a3d50:	e002      	b.n	80a3d58 <__cmpdf2+0x4>
 80a3d52:	bf00      	nop

080a3d54 <__cmpdf2>:
 80a3d54:	f04f 0c01 	mov.w	ip, #1
 80a3d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3d68:	bf18      	it	ne
 80a3d6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3d6e:	d01b      	beq.n	80a3da8 <__cmpdf2+0x54>
 80a3d70:	b001      	add	sp, #4
 80a3d72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3d76:	bf0c      	ite	eq
 80a3d78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3d7c:	ea91 0f03 	teqne	r1, r3
 80a3d80:	bf02      	ittt	eq
 80a3d82:	ea90 0f02 	teqeq	r0, r2
 80a3d86:	2000      	moveq	r0, #0
 80a3d88:	4770      	bxeq	lr
 80a3d8a:	f110 0f00 	cmn.w	r0, #0
 80a3d8e:	ea91 0f03 	teq	r1, r3
 80a3d92:	bf58      	it	pl
 80a3d94:	4299      	cmppl	r1, r3
 80a3d96:	bf08      	it	eq
 80a3d98:	4290      	cmpeq	r0, r2
 80a3d9a:	bf2c      	ite	cs
 80a3d9c:	17d8      	asrcs	r0, r3, #31
 80a3d9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3da2:	f040 0001 	orr.w	r0, r0, #1
 80a3da6:	4770      	bx	lr
 80a3da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3db0:	d102      	bne.n	80a3db8 <__cmpdf2+0x64>
 80a3db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3db6:	d107      	bne.n	80a3dc8 <__cmpdf2+0x74>
 80a3db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3dc0:	d1d6      	bne.n	80a3d70 <__cmpdf2+0x1c>
 80a3dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3dc6:	d0d3      	beq.n	80a3d70 <__cmpdf2+0x1c>
 80a3dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3dcc:	4770      	bx	lr
 80a3dce:	bf00      	nop

080a3dd0 <__aeabi_cdrcmple>:
 80a3dd0:	4684      	mov	ip, r0
 80a3dd2:	4610      	mov	r0, r2
 80a3dd4:	4662      	mov	r2, ip
 80a3dd6:	468c      	mov	ip, r1
 80a3dd8:	4619      	mov	r1, r3
 80a3dda:	4663      	mov	r3, ip
 80a3ddc:	e000      	b.n	80a3de0 <__aeabi_cdcmpeq>
 80a3dde:	bf00      	nop

080a3de0 <__aeabi_cdcmpeq>:
 80a3de0:	b501      	push	{r0, lr}
 80a3de2:	f7ff ffb7 	bl	80a3d54 <__cmpdf2>
 80a3de6:	2800      	cmp	r0, #0
 80a3de8:	bf48      	it	mi
 80a3dea:	f110 0f00 	cmnmi.w	r0, #0
 80a3dee:	bd01      	pop	{r0, pc}

080a3df0 <__aeabi_dcmpeq>:
 80a3df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3df4:	f7ff fff4 	bl	80a3de0 <__aeabi_cdcmpeq>
 80a3df8:	bf0c      	ite	eq
 80a3dfa:	2001      	moveq	r0, #1
 80a3dfc:	2000      	movne	r0, #0
 80a3dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e02:	bf00      	nop

080a3e04 <__aeabi_dcmplt>:
 80a3e04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e08:	f7ff ffea 	bl	80a3de0 <__aeabi_cdcmpeq>
 80a3e0c:	bf34      	ite	cc
 80a3e0e:	2001      	movcc	r0, #1
 80a3e10:	2000      	movcs	r0, #0
 80a3e12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e16:	bf00      	nop

080a3e18 <__aeabi_dcmple>:
 80a3e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e1c:	f7ff ffe0 	bl	80a3de0 <__aeabi_cdcmpeq>
 80a3e20:	bf94      	ite	ls
 80a3e22:	2001      	movls	r0, #1
 80a3e24:	2000      	movhi	r0, #0
 80a3e26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e2a:	bf00      	nop

080a3e2c <__aeabi_dcmpge>:
 80a3e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e30:	f7ff ffce 	bl	80a3dd0 <__aeabi_cdrcmple>
 80a3e34:	bf94      	ite	ls
 80a3e36:	2001      	movls	r0, #1
 80a3e38:	2000      	movhi	r0, #0
 80a3e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e3e:	bf00      	nop

080a3e40 <__aeabi_dcmpgt>:
 80a3e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e44:	f7ff ffc4 	bl	80a3dd0 <__aeabi_cdrcmple>
 80a3e48:	bf34      	ite	cc
 80a3e4a:	2001      	movcc	r0, #1
 80a3e4c:	2000      	movcs	r0, #0
 80a3e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e52:	bf00      	nop

080a3e54 <__aeabi_dcmpun>:
 80a3e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e5c:	d102      	bne.n	80a3e64 <__aeabi_dcmpun+0x10>
 80a3e5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3e62:	d10a      	bne.n	80a3e7a <__aeabi_dcmpun+0x26>
 80a3e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3e68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e6c:	d102      	bne.n	80a3e74 <__aeabi_dcmpun+0x20>
 80a3e6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3e72:	d102      	bne.n	80a3e7a <__aeabi_dcmpun+0x26>
 80a3e74:	f04f 0000 	mov.w	r0, #0
 80a3e78:	4770      	bx	lr
 80a3e7a:	f04f 0001 	mov.w	r0, #1
 80a3e7e:	4770      	bx	lr

080a3e80 <__aeabi_d2iz>:
 80a3e80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3e84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3e88:	d215      	bcs.n	80a3eb6 <__aeabi_d2iz+0x36>
 80a3e8a:	d511      	bpl.n	80a3eb0 <__aeabi_d2iz+0x30>
 80a3e8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3e90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3e94:	d912      	bls.n	80a3ebc <__aeabi_d2iz+0x3c>
 80a3e96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3e9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3ea2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3ea6:	fa23 f002 	lsr.w	r0, r3, r2
 80a3eaa:	bf18      	it	ne
 80a3eac:	4240      	negne	r0, r0
 80a3eae:	4770      	bx	lr
 80a3eb0:	f04f 0000 	mov.w	r0, #0
 80a3eb4:	4770      	bx	lr
 80a3eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3eba:	d105      	bne.n	80a3ec8 <__aeabi_d2iz+0x48>
 80a3ebc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3ec0:	bf08      	it	eq
 80a3ec2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3ec6:	4770      	bx	lr
 80a3ec8:	f04f 0000 	mov.w	r0, #0
 80a3ecc:	4770      	bx	lr
 80a3ece:	bf00      	nop

080a3ed0 <__aeabi_d2uiz>:
 80a3ed0:	004a      	lsls	r2, r1, #1
 80a3ed2:	d211      	bcs.n	80a3ef8 <__aeabi_d2uiz+0x28>
 80a3ed4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3ed8:	d211      	bcs.n	80a3efe <__aeabi_d2uiz+0x2e>
 80a3eda:	d50d      	bpl.n	80a3ef8 <__aeabi_d2uiz+0x28>
 80a3edc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3ee0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3ee4:	d40e      	bmi.n	80a3f04 <__aeabi_d2uiz+0x34>
 80a3ee6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3eee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3ef2:	fa23 f002 	lsr.w	r0, r3, r2
 80a3ef6:	4770      	bx	lr
 80a3ef8:	f04f 0000 	mov.w	r0, #0
 80a3efc:	4770      	bx	lr
 80a3efe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3f02:	d102      	bne.n	80a3f0a <__aeabi_d2uiz+0x3a>
 80a3f04:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f08:	4770      	bx	lr
 80a3f0a:	f04f 0000 	mov.w	r0, #0
 80a3f0e:	4770      	bx	lr

080a3f10 <__aeabi_d2f>:
 80a3f10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3f14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3f18:	bf24      	itt	cs
 80a3f1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3f1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3f22:	d90d      	bls.n	80a3f40 <__aeabi_d2f+0x30>
 80a3f24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3f28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3f2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3f30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3f34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3f38:	bf08      	it	eq
 80a3f3a:	f020 0001 	biceq.w	r0, r0, #1
 80a3f3e:	4770      	bx	lr
 80a3f40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3f44:	d121      	bne.n	80a3f8a <__aeabi_d2f+0x7a>
 80a3f46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3f4a:	bfbc      	itt	lt
 80a3f4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3f50:	4770      	bxlt	lr
 80a3f52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3f56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3f5a:	f1c2 0218 	rsb	r2, r2, #24
 80a3f5e:	f1c2 0c20 	rsb	ip, r2, #32
 80a3f62:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3f66:	fa20 f002 	lsr.w	r0, r0, r2
 80a3f6a:	bf18      	it	ne
 80a3f6c:	f040 0001 	orrne.w	r0, r0, #1
 80a3f70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3f74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3f78:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3f7c:	ea40 000c 	orr.w	r0, r0, ip
 80a3f80:	fa23 f302 	lsr.w	r3, r3, r2
 80a3f84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3f88:	e7cc      	b.n	80a3f24 <__aeabi_d2f+0x14>
 80a3f8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3f8e:	d107      	bne.n	80a3fa0 <__aeabi_d2f+0x90>
 80a3f90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3f94:	bf1e      	ittt	ne
 80a3f96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3f9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3f9e:	4770      	bxne	lr
 80a3fa0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3fa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3fa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3fac:	4770      	bx	lr
 80a3fae:	bf00      	nop

080a3fb0 <__aeabi_frsub>:
 80a3fb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3fb4:	e002      	b.n	80a3fbc <__addsf3>
 80a3fb6:	bf00      	nop

080a3fb8 <__aeabi_fsub>:
 80a3fb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3fbc <__addsf3>:
 80a3fbc:	0042      	lsls	r2, r0, #1
 80a3fbe:	bf1f      	itttt	ne
 80a3fc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3fc4:	ea92 0f03 	teqne	r2, r3
 80a3fc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3fcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3fd0:	d06a      	beq.n	80a40a8 <__addsf3+0xec>
 80a3fd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3fd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3fda:	bfc1      	itttt	gt
 80a3fdc:	18d2      	addgt	r2, r2, r3
 80a3fde:	4041      	eorgt	r1, r0
 80a3fe0:	4048      	eorgt	r0, r1
 80a3fe2:	4041      	eorgt	r1, r0
 80a3fe4:	bfb8      	it	lt
 80a3fe6:	425b      	neglt	r3, r3
 80a3fe8:	2b19      	cmp	r3, #25
 80a3fea:	bf88      	it	hi
 80a3fec:	4770      	bxhi	lr
 80a3fee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3ff2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ff6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3ffa:	bf18      	it	ne
 80a3ffc:	4240      	negne	r0, r0
 80a3ffe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4002:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4006:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a400a:	bf18      	it	ne
 80a400c:	4249      	negne	r1, r1
 80a400e:	ea92 0f03 	teq	r2, r3
 80a4012:	d03f      	beq.n	80a4094 <__addsf3+0xd8>
 80a4014:	f1a2 0201 	sub.w	r2, r2, #1
 80a4018:	fa41 fc03 	asr.w	ip, r1, r3
 80a401c:	eb10 000c 	adds.w	r0, r0, ip
 80a4020:	f1c3 0320 	rsb	r3, r3, #32
 80a4024:	fa01 f103 	lsl.w	r1, r1, r3
 80a4028:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a402c:	d502      	bpl.n	80a4034 <__addsf3+0x78>
 80a402e:	4249      	negs	r1, r1
 80a4030:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4034:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4038:	d313      	bcc.n	80a4062 <__addsf3+0xa6>
 80a403a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a403e:	d306      	bcc.n	80a404e <__addsf3+0x92>
 80a4040:	0840      	lsrs	r0, r0, #1
 80a4042:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4046:	f102 0201 	add.w	r2, r2, #1
 80a404a:	2afe      	cmp	r2, #254	; 0xfe
 80a404c:	d251      	bcs.n	80a40f2 <__addsf3+0x136>
 80a404e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4052:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4056:	bf08      	it	eq
 80a4058:	f020 0001 	biceq.w	r0, r0, #1
 80a405c:	ea40 0003 	orr.w	r0, r0, r3
 80a4060:	4770      	bx	lr
 80a4062:	0049      	lsls	r1, r1, #1
 80a4064:	eb40 0000 	adc.w	r0, r0, r0
 80a4068:	3a01      	subs	r2, #1
 80a406a:	bf28      	it	cs
 80a406c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a4070:	d2ed      	bcs.n	80a404e <__addsf3+0x92>
 80a4072:	fab0 fc80 	clz	ip, r0
 80a4076:	f1ac 0c08 	sub.w	ip, ip, #8
 80a407a:	ebb2 020c 	subs.w	r2, r2, ip
 80a407e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4082:	bfaa      	itet	ge
 80a4084:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4088:	4252      	neglt	r2, r2
 80a408a:	4318      	orrge	r0, r3
 80a408c:	bfbc      	itt	lt
 80a408e:	40d0      	lsrlt	r0, r2
 80a4090:	4318      	orrlt	r0, r3
 80a4092:	4770      	bx	lr
 80a4094:	f092 0f00 	teq	r2, #0
 80a4098:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a409c:	bf06      	itte	eq
 80a409e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a40a2:	3201      	addeq	r2, #1
 80a40a4:	3b01      	subne	r3, #1
 80a40a6:	e7b5      	b.n	80a4014 <__addsf3+0x58>
 80a40a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a40ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a40b0:	bf18      	it	ne
 80a40b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a40b6:	d021      	beq.n	80a40fc <__addsf3+0x140>
 80a40b8:	ea92 0f03 	teq	r2, r3
 80a40bc:	d004      	beq.n	80a40c8 <__addsf3+0x10c>
 80a40be:	f092 0f00 	teq	r2, #0
 80a40c2:	bf08      	it	eq
 80a40c4:	4608      	moveq	r0, r1
 80a40c6:	4770      	bx	lr
 80a40c8:	ea90 0f01 	teq	r0, r1
 80a40cc:	bf1c      	itt	ne
 80a40ce:	2000      	movne	r0, #0
 80a40d0:	4770      	bxne	lr
 80a40d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a40d6:	d104      	bne.n	80a40e2 <__addsf3+0x126>
 80a40d8:	0040      	lsls	r0, r0, #1
 80a40da:	bf28      	it	cs
 80a40dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a40e0:	4770      	bx	lr
 80a40e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a40e6:	bf3c      	itt	cc
 80a40e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a40ec:	4770      	bxcc	lr
 80a40ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a40f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a40f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a40fa:	4770      	bx	lr
 80a40fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4100:	bf16      	itet	ne
 80a4102:	4608      	movne	r0, r1
 80a4104:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4108:	4601      	movne	r1, r0
 80a410a:	0242      	lsls	r2, r0, #9
 80a410c:	bf06      	itte	eq
 80a410e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4112:	ea90 0f01 	teqeq	r0, r1
 80a4116:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a411a:	4770      	bx	lr

080a411c <__aeabi_ui2f>:
 80a411c:	f04f 0300 	mov.w	r3, #0
 80a4120:	e004      	b.n	80a412c <__aeabi_i2f+0x8>
 80a4122:	bf00      	nop

080a4124 <__aeabi_i2f>:
 80a4124:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4128:	bf48      	it	mi
 80a412a:	4240      	negmi	r0, r0
 80a412c:	ea5f 0c00 	movs.w	ip, r0
 80a4130:	bf08      	it	eq
 80a4132:	4770      	bxeq	lr
 80a4134:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4138:	4601      	mov	r1, r0
 80a413a:	f04f 0000 	mov.w	r0, #0
 80a413e:	e01c      	b.n	80a417a <__aeabi_l2f+0x2a>

080a4140 <__aeabi_ul2f>:
 80a4140:	ea50 0201 	orrs.w	r2, r0, r1
 80a4144:	bf08      	it	eq
 80a4146:	4770      	bxeq	lr
 80a4148:	f04f 0300 	mov.w	r3, #0
 80a414c:	e00a      	b.n	80a4164 <__aeabi_l2f+0x14>
 80a414e:	bf00      	nop

080a4150 <__aeabi_l2f>:
 80a4150:	ea50 0201 	orrs.w	r2, r0, r1
 80a4154:	bf08      	it	eq
 80a4156:	4770      	bxeq	lr
 80a4158:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a415c:	d502      	bpl.n	80a4164 <__aeabi_l2f+0x14>
 80a415e:	4240      	negs	r0, r0
 80a4160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4164:	ea5f 0c01 	movs.w	ip, r1
 80a4168:	bf02      	ittt	eq
 80a416a:	4684      	moveq	ip, r0
 80a416c:	4601      	moveq	r1, r0
 80a416e:	2000      	moveq	r0, #0
 80a4170:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4174:	bf08      	it	eq
 80a4176:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a417a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a417e:	fabc f28c 	clz	r2, ip
 80a4182:	3a08      	subs	r2, #8
 80a4184:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4188:	db10      	blt.n	80a41ac <__aeabi_l2f+0x5c>
 80a418a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a418e:	4463      	add	r3, ip
 80a4190:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4194:	f1c2 0220 	rsb	r2, r2, #32
 80a4198:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a419c:	fa20 f202 	lsr.w	r2, r0, r2
 80a41a0:	eb43 0002 	adc.w	r0, r3, r2
 80a41a4:	bf08      	it	eq
 80a41a6:	f020 0001 	biceq.w	r0, r0, #1
 80a41aa:	4770      	bx	lr
 80a41ac:	f102 0220 	add.w	r2, r2, #32
 80a41b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a41b4:	f1c2 0220 	rsb	r2, r2, #32
 80a41b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a41bc:	fa21 f202 	lsr.w	r2, r1, r2
 80a41c0:	eb43 0002 	adc.w	r0, r3, r2
 80a41c4:	bf08      	it	eq
 80a41c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a41ca:	4770      	bx	lr

080a41cc <__aeabi_fmul>:
 80a41cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a41d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a41d4:	bf1e      	ittt	ne
 80a41d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a41da:	ea92 0f0c 	teqne	r2, ip
 80a41de:	ea93 0f0c 	teqne	r3, ip
 80a41e2:	d06f      	beq.n	80a42c4 <__aeabi_fmul+0xf8>
 80a41e4:	441a      	add	r2, r3
 80a41e6:	ea80 0c01 	eor.w	ip, r0, r1
 80a41ea:	0240      	lsls	r0, r0, #9
 80a41ec:	bf18      	it	ne
 80a41ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a41f2:	d01e      	beq.n	80a4232 <__aeabi_fmul+0x66>
 80a41f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a41f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a41fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4200:	fba0 3101 	umull	r3, r1, r0, r1
 80a4204:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4208:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a420c:	bf3e      	ittt	cc
 80a420e:	0049      	lslcc	r1, r1, #1
 80a4210:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4214:	005b      	lslcc	r3, r3, #1
 80a4216:	ea40 0001 	orr.w	r0, r0, r1
 80a421a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a421e:	2afd      	cmp	r2, #253	; 0xfd
 80a4220:	d81d      	bhi.n	80a425e <__aeabi_fmul+0x92>
 80a4222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4226:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a422a:	bf08      	it	eq
 80a422c:	f020 0001 	biceq.w	r0, r0, #1
 80a4230:	4770      	bx	lr
 80a4232:	f090 0f00 	teq	r0, #0
 80a4236:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a423a:	bf08      	it	eq
 80a423c:	0249      	lsleq	r1, r1, #9
 80a423e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4242:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4246:	3a7f      	subs	r2, #127	; 0x7f
 80a4248:	bfc2      	ittt	gt
 80a424a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a424e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4252:	4770      	bxgt	lr
 80a4254:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4258:	f04f 0300 	mov.w	r3, #0
 80a425c:	3a01      	subs	r2, #1
 80a425e:	dc5d      	bgt.n	80a431c <__aeabi_fmul+0x150>
 80a4260:	f112 0f19 	cmn.w	r2, #25
 80a4264:	bfdc      	itt	le
 80a4266:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a426a:	4770      	bxle	lr
 80a426c:	f1c2 0200 	rsb	r2, r2, #0
 80a4270:	0041      	lsls	r1, r0, #1
 80a4272:	fa21 f102 	lsr.w	r1, r1, r2
 80a4276:	f1c2 0220 	rsb	r2, r2, #32
 80a427a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a427e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4282:	f140 0000 	adc.w	r0, r0, #0
 80a4286:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a428a:	bf08      	it	eq
 80a428c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4290:	4770      	bx	lr
 80a4292:	f092 0f00 	teq	r2, #0
 80a4296:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a429a:	bf02      	ittt	eq
 80a429c:	0040      	lsleq	r0, r0, #1
 80a429e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a42a2:	3a01      	subeq	r2, #1
 80a42a4:	d0f9      	beq.n	80a429a <__aeabi_fmul+0xce>
 80a42a6:	ea40 000c 	orr.w	r0, r0, ip
 80a42aa:	f093 0f00 	teq	r3, #0
 80a42ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a42b2:	bf02      	ittt	eq
 80a42b4:	0049      	lsleq	r1, r1, #1
 80a42b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a42ba:	3b01      	subeq	r3, #1
 80a42bc:	d0f9      	beq.n	80a42b2 <__aeabi_fmul+0xe6>
 80a42be:	ea41 010c 	orr.w	r1, r1, ip
 80a42c2:	e78f      	b.n	80a41e4 <__aeabi_fmul+0x18>
 80a42c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a42c8:	ea92 0f0c 	teq	r2, ip
 80a42cc:	bf18      	it	ne
 80a42ce:	ea93 0f0c 	teqne	r3, ip
 80a42d2:	d00a      	beq.n	80a42ea <__aeabi_fmul+0x11e>
 80a42d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a42d8:	bf18      	it	ne
 80a42da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a42de:	d1d8      	bne.n	80a4292 <__aeabi_fmul+0xc6>
 80a42e0:	ea80 0001 	eor.w	r0, r0, r1
 80a42e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a42e8:	4770      	bx	lr
 80a42ea:	f090 0f00 	teq	r0, #0
 80a42ee:	bf17      	itett	ne
 80a42f0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a42f4:	4608      	moveq	r0, r1
 80a42f6:	f091 0f00 	teqne	r1, #0
 80a42fa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a42fe:	d014      	beq.n	80a432a <__aeabi_fmul+0x15e>
 80a4300:	ea92 0f0c 	teq	r2, ip
 80a4304:	d101      	bne.n	80a430a <__aeabi_fmul+0x13e>
 80a4306:	0242      	lsls	r2, r0, #9
 80a4308:	d10f      	bne.n	80a432a <__aeabi_fmul+0x15e>
 80a430a:	ea93 0f0c 	teq	r3, ip
 80a430e:	d103      	bne.n	80a4318 <__aeabi_fmul+0x14c>
 80a4310:	024b      	lsls	r3, r1, #9
 80a4312:	bf18      	it	ne
 80a4314:	4608      	movne	r0, r1
 80a4316:	d108      	bne.n	80a432a <__aeabi_fmul+0x15e>
 80a4318:	ea80 0001 	eor.w	r0, r0, r1
 80a431c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4320:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4324:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4328:	4770      	bx	lr
 80a432a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a432e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4332:	4770      	bx	lr

080a4334 <__aeabi_fdiv>:
 80a4334:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4338:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a433c:	bf1e      	ittt	ne
 80a433e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4342:	ea92 0f0c 	teqne	r2, ip
 80a4346:	ea93 0f0c 	teqne	r3, ip
 80a434a:	d069      	beq.n	80a4420 <__aeabi_fdiv+0xec>
 80a434c:	eba2 0203 	sub.w	r2, r2, r3
 80a4350:	ea80 0c01 	eor.w	ip, r0, r1
 80a4354:	0249      	lsls	r1, r1, #9
 80a4356:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a435a:	d037      	beq.n	80a43cc <__aeabi_fdiv+0x98>
 80a435c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4360:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4364:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4368:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a436c:	428b      	cmp	r3, r1
 80a436e:	bf38      	it	cc
 80a4370:	005b      	lslcc	r3, r3, #1
 80a4372:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4376:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a437a:	428b      	cmp	r3, r1
 80a437c:	bf24      	itt	cs
 80a437e:	1a5b      	subcs	r3, r3, r1
 80a4380:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4384:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4388:	bf24      	itt	cs
 80a438a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a438e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4392:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4396:	bf24      	itt	cs
 80a4398:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a439c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a43a0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a43a4:	bf24      	itt	cs
 80a43a6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a43aa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a43ae:	011b      	lsls	r3, r3, #4
 80a43b0:	bf18      	it	ne
 80a43b2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a43b6:	d1e0      	bne.n	80a437a <__aeabi_fdiv+0x46>
 80a43b8:	2afd      	cmp	r2, #253	; 0xfd
 80a43ba:	f63f af50 	bhi.w	80a425e <__aeabi_fmul+0x92>
 80a43be:	428b      	cmp	r3, r1
 80a43c0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a43c4:	bf08      	it	eq
 80a43c6:	f020 0001 	biceq.w	r0, r0, #1
 80a43ca:	4770      	bx	lr
 80a43cc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a43d0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a43d4:	327f      	adds	r2, #127	; 0x7f
 80a43d6:	bfc2      	ittt	gt
 80a43d8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a43dc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a43e0:	4770      	bxgt	lr
 80a43e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a43e6:	f04f 0300 	mov.w	r3, #0
 80a43ea:	3a01      	subs	r2, #1
 80a43ec:	e737      	b.n	80a425e <__aeabi_fmul+0x92>
 80a43ee:	f092 0f00 	teq	r2, #0
 80a43f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a43f6:	bf02      	ittt	eq
 80a43f8:	0040      	lsleq	r0, r0, #1
 80a43fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a43fe:	3a01      	subeq	r2, #1
 80a4400:	d0f9      	beq.n	80a43f6 <__aeabi_fdiv+0xc2>
 80a4402:	ea40 000c 	orr.w	r0, r0, ip
 80a4406:	f093 0f00 	teq	r3, #0
 80a440a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a440e:	bf02      	ittt	eq
 80a4410:	0049      	lsleq	r1, r1, #1
 80a4412:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4416:	3b01      	subeq	r3, #1
 80a4418:	d0f9      	beq.n	80a440e <__aeabi_fdiv+0xda>
 80a441a:	ea41 010c 	orr.w	r1, r1, ip
 80a441e:	e795      	b.n	80a434c <__aeabi_fdiv+0x18>
 80a4420:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4424:	ea92 0f0c 	teq	r2, ip
 80a4428:	d108      	bne.n	80a443c <__aeabi_fdiv+0x108>
 80a442a:	0242      	lsls	r2, r0, #9
 80a442c:	f47f af7d 	bne.w	80a432a <__aeabi_fmul+0x15e>
 80a4430:	ea93 0f0c 	teq	r3, ip
 80a4434:	f47f af70 	bne.w	80a4318 <__aeabi_fmul+0x14c>
 80a4438:	4608      	mov	r0, r1
 80a443a:	e776      	b.n	80a432a <__aeabi_fmul+0x15e>
 80a443c:	ea93 0f0c 	teq	r3, ip
 80a4440:	d104      	bne.n	80a444c <__aeabi_fdiv+0x118>
 80a4442:	024b      	lsls	r3, r1, #9
 80a4444:	f43f af4c 	beq.w	80a42e0 <__aeabi_fmul+0x114>
 80a4448:	4608      	mov	r0, r1
 80a444a:	e76e      	b.n	80a432a <__aeabi_fmul+0x15e>
 80a444c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4450:	bf18      	it	ne
 80a4452:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4456:	d1ca      	bne.n	80a43ee <__aeabi_fdiv+0xba>
 80a4458:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a445c:	f47f af5c 	bne.w	80a4318 <__aeabi_fmul+0x14c>
 80a4460:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4464:	f47f af3c 	bne.w	80a42e0 <__aeabi_fmul+0x114>
 80a4468:	e75f      	b.n	80a432a <__aeabi_fmul+0x15e>
 80a446a:	bf00      	nop

080a446c <__aeabi_f2iz>:
 80a446c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4470:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4474:	d30f      	bcc.n	80a4496 <__aeabi_f2iz+0x2a>
 80a4476:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a447a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a447e:	d90d      	bls.n	80a449c <__aeabi_f2iz+0x30>
 80a4480:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4488:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a448c:	fa23 f002 	lsr.w	r0, r3, r2
 80a4490:	bf18      	it	ne
 80a4492:	4240      	negne	r0, r0
 80a4494:	4770      	bx	lr
 80a4496:	f04f 0000 	mov.w	r0, #0
 80a449a:	4770      	bx	lr
 80a449c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a44a0:	d101      	bne.n	80a44a6 <__aeabi_f2iz+0x3a>
 80a44a2:	0242      	lsls	r2, r0, #9
 80a44a4:	d105      	bne.n	80a44b2 <__aeabi_f2iz+0x46>
 80a44a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a44aa:	bf08      	it	eq
 80a44ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a44b0:	4770      	bx	lr
 80a44b2:	f04f 0000 	mov.w	r0, #0
 80a44b6:	4770      	bx	lr

080a44b8 <atexit>:
 80a44b8:	2300      	movs	r3, #0
 80a44ba:	4601      	mov	r1, r0
 80a44bc:	461a      	mov	r2, r3
 80a44be:	4618      	mov	r0, r3
 80a44c0:	f000 b868 	b.w	80a4594 <__register_exitproc>

080a44c4 <memcpy>:
 80a44c4:	440a      	add	r2, r1
 80a44c6:	4291      	cmp	r1, r2
 80a44c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a44cc:	d100      	bne.n	80a44d0 <memcpy+0xc>
 80a44ce:	4770      	bx	lr
 80a44d0:	b510      	push	{r4, lr}
 80a44d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a44d6:	4291      	cmp	r1, r2
 80a44d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a44dc:	d1f9      	bne.n	80a44d2 <memcpy+0xe>
 80a44de:	bd10      	pop	{r4, pc}

080a44e0 <memset>:
 80a44e0:	4603      	mov	r3, r0
 80a44e2:	4402      	add	r2, r0
 80a44e4:	4293      	cmp	r3, r2
 80a44e6:	d100      	bne.n	80a44ea <memset+0xa>
 80a44e8:	4770      	bx	lr
 80a44ea:	f803 1b01 	strb.w	r1, [r3], #1
 80a44ee:	e7f9      	b.n	80a44e4 <memset+0x4>

080a44f0 <srand>:
 80a44f0:	b538      	push	{r3, r4, r5, lr}
 80a44f2:	4b10      	ldr	r3, [pc, #64]	; (80a4534 <srand+0x44>)
 80a44f4:	4604      	mov	r4, r0
 80a44f6:	681d      	ldr	r5, [r3, #0]
 80a44f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a44fa:	b9b3      	cbnz	r3, 80a452a <srand+0x3a>
 80a44fc:	2018      	movs	r0, #24
 80a44fe:	f7fd fe99 	bl	80a2234 <malloc>
 80a4502:	4602      	mov	r2, r0
 80a4504:	63a8      	str	r0, [r5, #56]	; 0x38
 80a4506:	b920      	cbnz	r0, 80a4512 <srand+0x22>
 80a4508:	2142      	movs	r1, #66	; 0x42
 80a450a:	4b0b      	ldr	r3, [pc, #44]	; (80a4538 <srand+0x48>)
 80a450c:	480b      	ldr	r0, [pc, #44]	; (80a453c <srand+0x4c>)
 80a450e:	f7fd feb9 	bl	80a2284 <__assert_func>
 80a4512:	490b      	ldr	r1, [pc, #44]	; (80a4540 <srand+0x50>)
 80a4514:	4b0b      	ldr	r3, [pc, #44]	; (80a4544 <srand+0x54>)
 80a4516:	e9c0 1300 	strd	r1, r3, [r0]
 80a451a:	4b0b      	ldr	r3, [pc, #44]	; (80a4548 <srand+0x58>)
 80a451c:	2100      	movs	r1, #0
 80a451e:	6083      	str	r3, [r0, #8]
 80a4520:	230b      	movs	r3, #11
 80a4522:	8183      	strh	r3, [r0, #12]
 80a4524:	2001      	movs	r0, #1
 80a4526:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a452a:	2200      	movs	r2, #0
 80a452c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a452e:	611c      	str	r4, [r3, #16]
 80a4530:	615a      	str	r2, [r3, #20]
 80a4532:	bd38      	pop	{r3, r4, r5, pc}
 80a4534:	2000000c 	.word	0x2000000c
 80a4538:	080a4891 	.word	0x080a4891
 80a453c:	080a48a8 	.word	0x080a48a8
 80a4540:	abcd330e 	.word	0xabcd330e
 80a4544:	e66d1234 	.word	0xe66d1234
 80a4548:	0005deec 	.word	0x0005deec

080a454c <strdup>:
 80a454c:	4b02      	ldr	r3, [pc, #8]	; (80a4558 <strdup+0xc>)
 80a454e:	4601      	mov	r1, r0
 80a4550:	6818      	ldr	r0, [r3, #0]
 80a4552:	f000 b803 	b.w	80a455c <_strdup_r>
 80a4556:	bf00      	nop
 80a4558:	2000000c 	.word	0x2000000c

080a455c <_strdup_r>:
 80a455c:	b570      	push	{r4, r5, r6, lr}
 80a455e:	4604      	mov	r4, r0
 80a4560:	4608      	mov	r0, r1
 80a4562:	460d      	mov	r5, r1
 80a4564:	f000 f80d 	bl	80a4582 <strlen>
 80a4568:	1c46      	adds	r6, r0, #1
 80a456a:	4631      	mov	r1, r6
 80a456c:	4620      	mov	r0, r4
 80a456e:	f7fd fe81 	bl	80a2274 <_malloc_r>
 80a4572:	4604      	mov	r4, r0
 80a4574:	b118      	cbz	r0, 80a457e <_strdup_r+0x22>
 80a4576:	4632      	mov	r2, r6
 80a4578:	4629      	mov	r1, r5
 80a457a:	f7ff ffa3 	bl	80a44c4 <memcpy>
 80a457e:	4620      	mov	r0, r4
 80a4580:	bd70      	pop	{r4, r5, r6, pc}

080a4582 <strlen>:
 80a4582:	4603      	mov	r3, r0
 80a4584:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4588:	2a00      	cmp	r2, #0
 80a458a:	d1fb      	bne.n	80a4584 <strlen+0x2>
 80a458c:	1a18      	subs	r0, r3, r0
 80a458e:	3801      	subs	r0, #1
 80a4590:	4770      	bx	lr
	...

080a4594 <__register_exitproc>:
 80a4594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4598:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a4648 <__register_exitproc+0xb4>
 80a459c:	4606      	mov	r6, r0
 80a459e:	f8d8 0000 	ldr.w	r0, [r8]
 80a45a2:	461f      	mov	r7, r3
 80a45a4:	460d      	mov	r5, r1
 80a45a6:	4691      	mov	r9, r2
 80a45a8:	f000 f858 	bl	80a465c <__retarget_lock_acquire_recursive>
 80a45ac:	4b27      	ldr	r3, [pc, #156]	; (80a464c <__register_exitproc+0xb8>)
 80a45ae:	681c      	ldr	r4, [r3, #0]
 80a45b0:	b934      	cbnz	r4, 80a45c0 <__register_exitproc+0x2c>
 80a45b2:	4c27      	ldr	r4, [pc, #156]	; (80a4650 <__register_exitproc+0xbc>)
 80a45b4:	601c      	str	r4, [r3, #0]
 80a45b6:	4b27      	ldr	r3, [pc, #156]	; (80a4654 <__register_exitproc+0xc0>)
 80a45b8:	b113      	cbz	r3, 80a45c0 <__register_exitproc+0x2c>
 80a45ba:	681b      	ldr	r3, [r3, #0]
 80a45bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a45c0:	6863      	ldr	r3, [r4, #4]
 80a45c2:	2b1f      	cmp	r3, #31
 80a45c4:	dd07      	ble.n	80a45d6 <__register_exitproc+0x42>
 80a45c6:	f8d8 0000 	ldr.w	r0, [r8]
 80a45ca:	f000 f849 	bl	80a4660 <__retarget_lock_release_recursive>
 80a45ce:	f04f 30ff 	mov.w	r0, #4294967295
 80a45d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a45d6:	b35e      	cbz	r6, 80a4630 <__register_exitproc+0x9c>
 80a45d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a45dc:	b988      	cbnz	r0, 80a4602 <__register_exitproc+0x6e>
 80a45de:	4b1e      	ldr	r3, [pc, #120]	; (80a4658 <__register_exitproc+0xc4>)
 80a45e0:	b923      	cbnz	r3, 80a45ec <__register_exitproc+0x58>
 80a45e2:	f8d8 0000 	ldr.w	r0, [r8]
 80a45e6:	f000 f83a 	bl	80a465e <__retarget_lock_release>
 80a45ea:	e7f0      	b.n	80a45ce <__register_exitproc+0x3a>
 80a45ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a45f0:	f7fd fe20 	bl	80a2234 <malloc>
 80a45f4:	2800      	cmp	r0, #0
 80a45f6:	d0f4      	beq.n	80a45e2 <__register_exitproc+0x4e>
 80a45f8:	2300      	movs	r3, #0
 80a45fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a45fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a4602:	2201      	movs	r2, #1
 80a4604:	6863      	ldr	r3, [r4, #4]
 80a4606:	2e02      	cmp	r6, #2
 80a4608:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a460c:	fa02 f203 	lsl.w	r2, r2, r3
 80a4610:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a4614:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a4618:	ea43 0302 	orr.w	r3, r3, r2
 80a461c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a4620:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a4624:	bf02      	ittt	eq
 80a4626:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a462a:	4313      	orreq	r3, r2
 80a462c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a4630:	6863      	ldr	r3, [r4, #4]
 80a4632:	f8d8 0000 	ldr.w	r0, [r8]
 80a4636:	1c5a      	adds	r2, r3, #1
 80a4638:	3302      	adds	r3, #2
 80a463a:	6062      	str	r2, [r4, #4]
 80a463c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a4640:	f000 f80e 	bl	80a4660 <__retarget_lock_release_recursive>
 80a4644:	2000      	movs	r0, #0
 80a4646:	e7c4      	b.n	80a45d2 <__register_exitproc+0x3e>
 80a4648:	20000070 	.word	0x20000070
 80a464c:	20000574 	.word	0x20000574
 80a4650:	200004e8 	.word	0x200004e8
 80a4654:	00000000 	.word	0x00000000
 80a4658:	080a2235 	.word	0x080a2235

080a465c <__retarget_lock_acquire_recursive>:
 80a465c:	4770      	bx	lr

080a465e <__retarget_lock_release>:
 80a465e:	4770      	bx	lr

080a4660 <__retarget_lock_release_recursive>:
 80a4660:	4770      	bx	lr

080a4662 <link_code_end>:
	...

080a4664 <dynalib_user>:
 80a4664:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a4674:	0000 0000 4157 4d52 4e49 2047 5055 2e2e     ....WARMING UP..
 80a4684:	002e 7661 5067 4d50 6d00 7861 5050 004d     ..avgPPM.maxPPM.
 80a4694:	414d 2058 5050 3a4d 4100 4756 5020 4d50     MAX PPM:.AVG PPM
 80a46a4:	003a 414d 2058 4142 3a43 4100 4756 4220     :.MAX BAC:.AVG B
 80a46b4:	4341 003a 6544 6976 6563 4d20 646f 3a65     AC:.Device Mode:
 80a46c4:	0020 4552 4441 2e59 2e2e 4200 7475 6f74      .READY....Butto
 80a46d4:	206e 7270 7365 0073 5050 654d 6576 746e     n press.PPMevent
 80a46e4:	5000 4d50 7665 6e65 3274 5200 4145 4944     .PPMevent2.READI
 80a46f4:	474e 2e2e 002e 5050 3a4d 0020 4142 3a43     NG....PPM: .BAC:
 80a4704:	0020 0000                                    ...

080a4708 <CSWTCH.215>:
 80a4708:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4718:	0050 0000                                   P...

080a471c <_ZTV7rgb_lcd>:
	...
 80a4724:	1c51 080a 1c53 080a 1c93 080a 245b 080a     Q...S.......[$..
 80a4734:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
 80a4744:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a4754:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a4760 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4768:	28b1 080a 28b7 080a 28f5 080a 28c5 080a     .(...(...(...(..
 80a4778:	28b3 080a                                   .(..

080a477c <_ZTV9IPAddress>:
	...
 80a4784:	2deb 080a 2de9 080a 2e1d 080a               .-...-......

080a4790 <_ZTV9USBSerial>:
	...
 80a4798:	2eb7 080a 2f1d 080a 2ef5 080a 245b 080a     ...../......[$..
 80a47a8:	2ee7 080a 2eb9 080a 2ec9 080a 2f17 080a     ............./..
 80a47b8:	2ed9 080a 2eb1 080a                         ........

080a47c0 <_ZTV11USARTSerial>:
	...
 80a47c8:	3045 080a 30ad 080a 3089 080a 245b 080a     E0...0...0..[$..
 80a47d8:	3059 080a 3075 080a 3067 080a 3083 080a     Y0..u0..g0...0..
 80a47e8:	3047 080a 304b 080a                         G0..K0..

080a47f0 <_ZTV7TwoWire>:
	...
 80a47f8:	310d 080a 3157 080a 312f 080a 310f 080a     .1..W1../1...1..
 80a4808:	3137 080a 313f 080a 3147 080a 314f 080a     71..?1..G1..O1..

080a4818 <_ZTVN5spark9WiFiClassE>:
	...
 80a4820:	3253 080a 3249 080a 323f 080a 31b1 080a     S2..I2..?2...1..
 80a4830:	3233 080a 3227 080a 32b1 080a 32b9 080a     32..'2...2...2..
 80a4840:	321b 080a 3213 080a 3209 080a 31ff 080a     .2...2...2...1..
 80a4850:	31bb 080a                                   .1..

080a4854 <_ZTVN5spark12NetworkClassE>:
	...
 80a485c:	3271 080a 327b 080a 3285 080a 328f 080a     q2..{2...2...2..
 80a486c:	3299 080a 32a5 080a 32b1 080a 32b9 080a     .2...2...2...2..
 80a487c:	32c1 080a 32cd 080a 32d5 080a 32df 080a     .2...2...2...2..
 80a488c:	32e9 080a                                   .2..

080a4890 <_ZSt7nothrow>:
 80a4890:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a48a0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a48b0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a48c0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a48d0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a48e0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a48f0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a4900:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a4910:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a4920:	646e 632e                                    nd.c.

080a4925 <link_const_variable_data_end>:
 80a4925:	00          	.byte	0x00
	...

080a4928 <link_constructors_location>:
 80a4928:	080a093d 	.word	0x080a093d
 80a492c:	080a1c41 	.word	0x080a1c41
 80a4930:	080a22c5 	.word	0x080a22c5
 80a4934:	080a26e5 	.word	0x080a26e5
 80a4938:	080a26f5 	.word	0x080a26f5
 80a493c:	080a2745 	.word	0x080a2745
 80a4940:	080a325d 	.word	0x080a325d
 80a4944:	080a3339 	.word	0x080a3339
 80a4948:	080a3509 	.word	0x080a3509

080a494c <link_constructors_end>:
 80a494c:	00000000 	.word	0x00000000
