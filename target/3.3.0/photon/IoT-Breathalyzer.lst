
c:/Users/alext/gitRepositories/IoT-Breathalyzer/target/3.3.0/photon/IoT-Breathalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003db0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3dd0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a3dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000504  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3e50  080a3e50  00023e50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3e78  080a3e78  00023e78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aba3a  00000000  00000000  00023e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000f9d9  00000000  00000000  000cf8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00014ae9  00000000  00000000  000df28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d10  00000000  00000000  000f3d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003fe8  00000000  00000000  000f5a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000288e5  00000000  00000000  000f9a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002abb0  00000000  00000000  00122355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b45f1  00000000  00000000  0014cf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004ab0  00000000  00000000  002014f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fcb9 	bl	80a39a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fcc1 	bl	80a39c4 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3dd4 	.word	0x080a3dd4
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	2000007c 	.word	0x2000007c
 80a0058:	2000057d 	.word	0x2000057d
 80a005c:	2000057d 	.word	0x2000057d

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fa69 	bl	80a2538 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a3da4 	.word	0x080a3da4
 80a0084:	080a3dc8 	.word	0x080a3dc8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b850 	b.w	80a012c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f95b 	bl	80a0348 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 ba07 	b.w	80a24a8 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f002 b82d 	b.w	80a20f8 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f002 b833 	b.w	80a2108 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z9handleLEDii.part.0>:
    lcd.setCursor(8, AVG_ROW);
    lcd.print(avgBAC);
  }
}

void handleLED(int timeDifference, int color) {
 80a00b4:	b410      	push	{r4}

  if(timeDifference != SOLID) {
    if(currentTime > nextLedFlashTime) {
 80a00b6:	4b0b      	ldr	r3, [pc, #44]	; (80a00e4 <_Z9handleLEDii.part.0+0x30>)
 80a00b8:	4c0b      	ldr	r4, [pc, #44]	; (80a00e8 <_Z9handleLEDii.part.0+0x34>)
 80a00ba:	681b      	ldr	r3, [r3, #0]
 80a00bc:	6821      	ldr	r1, [r4, #0]
 80a00be:	4a0b      	ldr	r2, [pc, #44]	; (80a00ec <_Z9handleLEDii.part.0+0x38>)
 80a00c0:	428b      	cmp	r3, r1
 80a00c2:	d906      	bls.n	80a00d2 <_Z9handleLEDii.part.0+0x1e>
      ledFlashOn = !ledFlashOn;
 80a00c4:	6813      	ldr	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00c6:	31c8      	adds	r1, #200	; 0xc8
      ledFlashOn = !ledFlashOn;
 80a00c8:	fab3 f383 	clz	r3, r3
 80a00cc:	095b      	lsrs	r3, r3, #5
 80a00ce:	6013      	str	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00d0:	6021      	str	r1, [r4, #0]
    }

    if (ledFlashOn) {
 80a00d2:	6812      	ldr	r2, [r2, #0]
 80a00d4:	b102      	cbz	r2, 80a00d8 <_Z9handleLEDii.part.0+0x24>
      strip.setPixelColor(LED_INDEX, color);
 80a00d6:	4602      	mov	r2, r0
 80a00d8:	2100      	movs	r1, #0
 80a00da:	4805      	ldr	r0, [pc, #20]	; (80a00f0 <_Z9handleLEDii.part.0+0x3c>)
      strip.setPixelColor(LED_INDEX, 0);
    }
  } else {
    strip.setPixelColor(LED_INDEX, color);
  }
}
 80a00dc:	bc10      	pop	{r4}
      strip.setPixelColor(LED_INDEX, color);
 80a00de:	f001 bce9 	b.w	80a1ab4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00e2:	bf00      	nop
 80a00e4:	200000b4 	.word	0x200000b4
 80a00e8:	200000f0 	.word	0x200000f0
 80a00ec:	200000e0 	.word	0x200000e0
 80a00f0:	20000100 	.word	0x20000100

080a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00f4:	b570      	push	{r4, r5, r6, lr}
 80a00f6:	4606      	mov	r6, r0
 80a00f8:	460c      	mov	r4, r1
{
    if (base == 0) {
 80a00fa:	4615      	mov	r5, r2
 80a00fc:	b92a      	cbnz	r2, 80a010a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 80a00fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 80a0102:	6803      	ldr	r3, [r0, #0]
 80a0104:	b2c9      	uxtb	r1, r1
 80a0106:	689b      	ldr	r3, [r3, #8]
 80a0108:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80a010a:	2900      	cmp	r1, #0
 80a010c:	da0b      	bge.n	80a0126 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
 80a010e:	2a0a      	cmp	r2, #10
 80a0110:	d109      	bne.n	80a0126 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 80a0112:	212d      	movs	r1, #45	; 0x2d
 80a0114:	f002 f85c 	bl	80a21d0 <_ZN5Print5printEc>
            val = -n;
 80a0118:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a011a:	4630      	mov	r0, r6
 80a011c:	b2ea      	uxtb	r2, r5
}
 80a011e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 80a0122:	f002 b864 	b.w	80a21ee <_ZN5Print11printNumberEmh>
            val = n;
 80a0126:	4621      	mov	r1, r4
 80a0128:	e7f7      	b.n	80a011a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>
	...

080a012c <setup>:
void setup() {
 80a012c:	b510      	push	{r4, lr}
  Serial.begin(9600);     // Initialize the Serial communication
 80a012e:	f002 fb05 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0132:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0136:	f002 fae7 	bl	80a2708 <_ZN9USBSerial5beginEl>
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a013a:	2103      	movs	r1, #3
  lcd.begin(16, 2);
 80a013c:	4c1b      	ldr	r4, [pc, #108]	; (80a01ac <setup+0x80>)
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a013e:	4608      	mov	r0, r1
 80a0140:	f002 fd14 	bl	80a2b6c <pinMode>
  strip.begin();
 80a0144:	481a      	ldr	r0, [pc, #104]	; (80a01b0 <setup+0x84>)
 80a0146:	f000 fbd3 	bl	80a08f0 <_ZN17Adafruit_NeoPixel5beginEv>
  lcd.begin(16, 2);
 80a014a:	4620      	mov	r0, r4
 80a014c:	2300      	movs	r3, #0
 80a014e:	2202      	movs	r2, #2
 80a0150:	2110      	movs	r1, #16
 80a0152:	f001 fd96 	bl	80a1c82 <_ZN7rgb_lcd5beginEhhh>
  lcd.setRGB(displayBacklightR, displayBacklightG, displayBacklightB);
 80a0156:	2300      	movs	r3, #0
 80a0158:	4620      	mov	r0, r4
 80a015a:	461a      	mov	r2, r3
 80a015c:	21ff      	movs	r1, #255	; 0xff
 80a015e:	f001 fd7c 	bl	80a1c5a <_ZN7rgb_lcd6setRGBEhhh>
  lcd.setCursor(0, 0);
 80a0162:	2200      	movs	r2, #0
 80a0164:	4620      	mov	r0, r4
 80a0166:	4611      	mov	r1, r2
 80a0168:	f001 fd42 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
  lcd.print("WARMING UP...");
 80a016c:	4620      	mov	r0, r4
  deviceMode = WARMING_UP;
 80a016e:	2400      	movs	r4, #0
  lcd.print("WARMING UP...");
 80a0170:	4910      	ldr	r1, [pc, #64]	; (80a01b4 <setup+0x88>)
 80a0172:	f002 f829 	bl	80a21c8 <_ZN5Print5printEPKc>
  deviceMode = WARMING_UP;
 80a0176:	4b10      	ldr	r3, [pc, #64]	; (80a01b8 <setup+0x8c>)
 80a0178:	701c      	strb	r4, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017a:	f001 fe2f 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
  stateChangeTime = millis() + WARMING_UP_MODE_TIME;
 80a017e:	4b0f      	ldr	r3, [pc, #60]	; (80a01bc <setup+0x90>)
 80a0180:	f500 409c 	add.w	r0, r0, #19968	; 0x4e00
 80a0184:	3020      	adds	r0, #32
 80a0186:	6018      	str	r0, [r3, #0]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0188:	2202      	movs	r2, #2
 80a018a:	4623      	mov	r3, r4
 80a018c:	490c      	ldr	r1, [pc, #48]	; (80a01c0 <setup+0x94>)
 80a018e:	480d      	ldr	r0, [pc, #52]	; (80a01c4 <setup+0x98>)
 80a0190:	f001 ffa2 	bl	80a20d8 <spark_variable>
 80a0194:	4623      	mov	r3, r4
 80a0196:	2202      	movs	r2, #2
 80a0198:	490b      	ldr	r1, [pc, #44]	; (80a01c8 <setup+0x9c>)
 80a019a:	480c      	ldr	r0, [pc, #48]	; (80a01cc <setup+0xa0>)
 80a019c:	f001 ff9c 	bl	80a20d8 <spark_variable>
}
 80a01a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(100);
 80a01a4:	2064      	movs	r0, #100	; 0x64
 80a01a6:	f002 b93f 	b.w	80a2428 <delay>
 80a01aa:	bf00      	nop
 80a01ac:	200000d0 	.word	0x200000d0
 80a01b0:	20000100 	.word	0x20000100
 80a01b4:	080a3b24 	.word	0x080a3b24
 80a01b8:	200000bc 	.word	0x200000bc
 80a01bc:	200000fc 	.word	0x200000fc
 80a01c0:	200000a8 	.word	0x200000a8
 80a01c4:	080a3b32 	.word	0x080a3b32
 80a01c8:	200000e8 	.word	0x200000e8
 80a01cc:	080a3b39 	.word	0x080a3b39

080a01d0 <_Z13updateDisplayv>:
void updateDisplay() {
 80a01d0:	b510      	push	{r4, lr}
  lcd.clear();
 80a01d2:	482a      	ldr	r0, [pc, #168]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a01d4:	f001 fd02 	bl	80a1bdc <_ZN7rgb_lcd5clearEv>
  if(displayMode == PPM) {
 80a01d8:	4b29      	ldr	r3, [pc, #164]	; (80a0280 <_Z13updateDisplayv+0xb0>)
 80a01da:	781c      	ldrb	r4, [r3, #0]
 80a01dc:	bb4c      	cbnz	r4, 80a0232 <_Z13updateDisplayv+0x62>
    lcd.setCursor(0, MAX_ROW);
 80a01de:	4622      	mov	r2, r4
 80a01e0:	4621      	mov	r1, r4
 80a01e2:	4826      	ldr	r0, [pc, #152]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a01e4:	f001 fd04 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX PPM:");
 80a01e8:	4926      	ldr	r1, [pc, #152]	; (80a0284 <_Z13updateDisplayv+0xb4>)
 80a01ea:	4824      	ldr	r0, [pc, #144]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a01ec:	f001 ffec 	bl	80a21c8 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a01f0:	4622      	mov	r2, r4
 80a01f2:	2108      	movs	r1, #8
 80a01f4:	4821      	ldr	r0, [pc, #132]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a01f6:	f001 fcfb 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxPPM);
 80a01fa:	4b23      	ldr	r3, [pc, #140]	; (80a0288 <_Z13updateDisplayv+0xb8>)
 80a01fc:	220a      	movs	r2, #10
 80a01fe:	6819      	ldr	r1, [r3, #0]
 80a0200:	481e      	ldr	r0, [pc, #120]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0202:	f7ff ff77 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, AVG_ROW);
 80a0206:	2201      	movs	r2, #1
 80a0208:	4621      	mov	r1, r4
 80a020a:	481c      	ldr	r0, [pc, #112]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a020c:	f001 fcf0 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG PPM:");
 80a0210:	491e      	ldr	r1, [pc, #120]	; (80a028c <_Z13updateDisplayv+0xbc>)
 80a0212:	481a      	ldr	r0, [pc, #104]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0214:	f001 ffd8 	bl	80a21c8 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a0218:	2201      	movs	r2, #1
 80a021a:	2108      	movs	r1, #8
 80a021c:	4817      	ldr	r0, [pc, #92]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a021e:	f001 fce7 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(avgPPM);
 80a0222:	220a      	movs	r2, #10
 80a0224:	4b1a      	ldr	r3, [pc, #104]	; (80a0290 <_Z13updateDisplayv+0xc0>)
    lcd.print(avgBAC);
 80a0226:	6819      	ldr	r1, [r3, #0]
 80a0228:	4814      	ldr	r0, [pc, #80]	; (80a027c <_Z13updateDisplayv+0xac>)
}
 80a022a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(avgBAC);
 80a022e:	f7ff bf61 	b.w	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, MAX_ROW);
 80a0232:	2200      	movs	r2, #0
 80a0234:	4811      	ldr	r0, [pc, #68]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0236:	4611      	mov	r1, r2
 80a0238:	f001 fcda 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX BAC:");
 80a023c:	4915      	ldr	r1, [pc, #84]	; (80a0294 <_Z13updateDisplayv+0xc4>)
 80a023e:	480f      	ldr	r0, [pc, #60]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0240:	f001 ffc2 	bl	80a21c8 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a0244:	2200      	movs	r2, #0
 80a0246:	2108      	movs	r1, #8
 80a0248:	480c      	ldr	r0, [pc, #48]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a024a:	f001 fcd1 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxBAC);
 80a024e:	4b12      	ldr	r3, [pc, #72]	; (80a0298 <_Z13updateDisplayv+0xc8>)
 80a0250:	220a      	movs	r2, #10
 80a0252:	6819      	ldr	r1, [r3, #0]
 80a0254:	4809      	ldr	r0, [pc, #36]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0256:	f7ff ff4d 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, AVG_ROW);
 80a025a:	2201      	movs	r2, #1
 80a025c:	2100      	movs	r1, #0
 80a025e:	4807      	ldr	r0, [pc, #28]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0260:	f001 fcc6 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG BAC:");
 80a0264:	490d      	ldr	r1, [pc, #52]	; (80a029c <_Z13updateDisplayv+0xcc>)
 80a0266:	4805      	ldr	r0, [pc, #20]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0268:	f001 ffae 	bl	80a21c8 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a026c:	2201      	movs	r2, #1
 80a026e:	2108      	movs	r1, #8
 80a0270:	4802      	ldr	r0, [pc, #8]	; (80a027c <_Z13updateDisplayv+0xac>)
 80a0272:	f001 fcbd 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(avgBAC);
 80a0276:	220a      	movs	r2, #10
 80a0278:	4b09      	ldr	r3, [pc, #36]	; (80a02a0 <_Z13updateDisplayv+0xd0>)
 80a027a:	e7d4      	b.n	80a0226 <_Z13updateDisplayv+0x56>
 80a027c:	200000d0 	.word	0x200000d0
 80a0280:	200000bd 	.word	0x200000bd
 80a0284:	080a3b40 	.word	0x080a3b40
 80a0288:	200000e8 	.word	0x200000e8
 80a028c:	080a3b49 	.word	0x080a3b49
 80a0290:	200000a8 	.word	0x200000a8
 80a0294:	080a3b52 	.word	0x080a3b52
 80a0298:	200000e4 	.word	0x200000e4
 80a029c:	080a3b5b 	.word	0x080a3b5b
 80a02a0:	200000a4 	.word	0x200000a4

080a02a4 <_Z9handleLEDii>:
void handleLED(int timeDifference, int color) {
 80a02a4:	460a      	mov	r2, r1
  if(timeDifference != SOLID) {
 80a02a6:	4601      	mov	r1, r0
 80a02a8:	b110      	cbz	r0, 80a02b0 <_Z9handleLEDii+0xc>
 80a02aa:	4610      	mov	r0, r2
 80a02ac:	f7ff bf02 	b.w	80a00b4 <_Z9handleLEDii.part.0>
    strip.setPixelColor(LED_INDEX, color);
 80a02b0:	4801      	ldr	r0, [pc, #4]	; (80a02b8 <_Z9handleLEDii+0x14>)
 80a02b2:	f001 bbff 	b.w	80a1ab4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a02b6:	bf00      	nop
 80a02b8:	20000100 	.word	0x20000100

080a02bc <_Z11checkButtoni>:

// Return true if falling edge of button press
BUTTON_ACTION checkButton(int buttonReading) {
 80a02bc:	b538      	push	{r3, r4, r5, lr}
  // Serial.print("Reading: ");
  // Serial.println(buttonReading);
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a02be:	4d1c      	ldr	r5, [pc, #112]	; (80a0330 <_Z11checkButtoni+0x74>)
BUTTON_ACTION checkButton(int buttonReading) {
 80a02c0:	4604      	mov	r4, r0
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a02c2:	782b      	ldrb	r3, [r5, #0]
 80a02c4:	b96b      	cbnz	r3, 80a02e2 <_Z11checkButtoni+0x26>
 80a02c6:	2801      	cmp	r0, #1
 80a02c8:	d12c      	bne.n	80a0324 <_Z11checkButtoni+0x68>
 80a02ca:	4b1a      	ldr	r3, [pc, #104]	; (80a0334 <_Z11checkButtoni+0x78>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	bb4b      	cbnz	r3, 80a0324 <_Z11checkButtoni+0x68>
 80a02d0:	f001 fd84 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
    buttonHoldBeginTime = millis();
 80a02d4:	4b18      	ldr	r3, [pc, #96]	; (80a0338 <_Z11checkButtoni+0x7c>)
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02d6:	4a19      	ldr	r2, [pc, #100]	; (80a033c <_Z11checkButtoni+0x80>)
    buttonHoldBeginTime = millis();
 80a02d8:	6018      	str	r0, [r3, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02da:	6813      	ldr	r3, [r2, #0]
    watchingButton = true;
 80a02dc:	702c      	strb	r4, [r5, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a02de:	3332      	adds	r3, #50	; 0x32
 80a02e0:	6013      	str	r3, [r2, #0]

// Serial.println(watchingButton);
// Serial.println(buttonHoldBeginTime);
  
  if (watchingButton) {
    if (currentTime > debounceEndWaitTime) {
 80a02e2:	4b17      	ldr	r3, [pc, #92]	; (80a0340 <_Z11checkButtoni+0x84>)
 80a02e4:	681a      	ldr	r2, [r3, #0]
 80a02e6:	4b15      	ldr	r3, [pc, #84]	; (80a033c <_Z11checkButtoni+0x80>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	429a      	cmp	r2, r3
 80a02ec:	d90f      	bls.n	80a030e <_Z11checkButtoni+0x52>
 80a02ee:	f001 fd75 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>

      if(millis() - buttonHoldBeginTime > DOUBLE_CLICK_WAIT_TIME) {
 80a02f2:	4b11      	ldr	r3, [pc, #68]	; (80a0338 <_Z11checkButtoni+0x7c>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	1ac0      	subs	r0, r0, r3
 80a02f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80a02fc:	d909      	bls.n	80a0312 <_Z11checkButtoni+0x56>
        if(buttonReading == HIGH){
 80a02fe:	2c01      	cmp	r4, #1
 80a0300:	d103      	bne.n	80a030a <_Z11checkButtoni+0x4e>
          lastButtonReading = buttonReading;
          return HOLD;
 80a0302:	2002      	movs	r0, #2
          lastButtonReading = buttonReading;
 80a0304:	4b0b      	ldr	r3, [pc, #44]	; (80a0334 <_Z11checkButtoni+0x78>)
 80a0306:	601c      	str	r4, [r3, #0]
  } 

  lastButtonReading = buttonReading;

  return buttonReading == HIGH ? PRESSED : UNPRESSED;
}
 80a0308:	bd38      	pop	{r3, r4, r5, pc}
        } else if (buttonReading == LOW) {
 80a030a:	b95c      	cbnz	r4, 80a0324 <_Z11checkButtoni+0x68>
          watchingButton = false;
 80a030c:	702c      	strb	r4, [r5, #0]
      return UNPRESSED;
 80a030e:	2000      	movs	r0, #0
 80a0310:	e7fa      	b.n	80a0308 <_Z11checkButtoni+0x4c>
      } else if (lastButtonReading == LOW && buttonReading == HIGH) {
 80a0312:	4b08      	ldr	r3, [pc, #32]	; (80a0334 <_Z11checkButtoni+0x78>)
 80a0314:	681a      	ldr	r2, [r3, #0]
 80a0316:	b92a      	cbnz	r2, 80a0324 <_Z11checkButtoni+0x68>
 80a0318:	2c01      	cmp	r4, #1
 80a031a:	d103      	bne.n	80a0324 <_Z11checkButtoni+0x68>
        return DOUBLE_CLICK;
 80a031c:	2003      	movs	r0, #3
        watchingButton = false;
 80a031e:	702a      	strb	r2, [r5, #0]
        lastButtonReading = buttonReading;
 80a0320:	601c      	str	r4, [r3, #0]
        return DOUBLE_CLICK;
 80a0322:	e7f1      	b.n	80a0308 <_Z11checkButtoni+0x4c>
  lastButtonReading = buttonReading;
 80a0324:	4b03      	ldr	r3, [pc, #12]	; (80a0334 <_Z11checkButtoni+0x78>)
 80a0326:	601c      	str	r4, [r3, #0]
          return HOLD;
 80a0328:	1e63      	subs	r3, r4, #1
 80a032a:	4258      	negs	r0, r3
 80a032c:	4158      	adcs	r0, r3
 80a032e:	e7eb      	b.n	80a0308 <_Z11checkButtoni+0x4c>
 80a0330:	20000114 	.word	0x20000114
 80a0334:	200000c8 	.word	0x200000c8
 80a0338:	200000ac 	.word	0x200000ac
 80a033c:	200000b8 	.word	0x200000b8
 80a0340:	200000b4 	.word	0x200000b4
 80a0344:	00000000 	.word	0x00000000

080a0348 <loop>:
void loop() {
 80a0348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a034c:	f001 fd46 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();  // get the current time
 80a0350:	4d89      	ldr	r5, [pc, #548]	; (80a0578 <loop+0x230>)
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a0352:	4e8a      	ldr	r6, [pc, #552]	; (80a057c <loop+0x234>)
  currentTime = millis();  // get the current time
 80a0354:	6028      	str	r0, [r5, #0]
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a0356:	2003      	movs	r0, #3
 80a0358:	f002 fc32 	bl	80a2bc0 <digitalRead>
 80a035c:	f7ff ffae 	bl	80a02bc <_Z11checkButtoni>
 80a0360:	7030      	strb	r0, [r6, #0]
  Serial.println(buttonState);
 80a0362:	f002 f9eb 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0366:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a0368:	220a      	movs	r2, #10
 80a036a:	7831      	ldrb	r1, [r6, #0]
 80a036c:	f001 ff3f 	bl	80a21ee <_ZN5Print11printNumberEmh>
        n += println();
 80a0370:	4620      	mov	r0, r4
 80a0372:	f001 ff30 	bl	80a21d6 <_ZN5Print7printlnEv>
  Serial.print("Device Mode: ");
 80a0376:	f002 f9e1 	bl	80a273c <_Z16_fetch_usbserialv>
 80a037a:	4981      	ldr	r1, [pc, #516]	; (80a0580 <loop+0x238>)
 80a037c:	f001 ff24 	bl	80a21c8 <_ZN5Print5printEPKc>
  Serial.println(deviceMode);
 80a0380:	f002 f9dc 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0384:	4607      	mov	r7, r0
 80a0386:	4c7f      	ldr	r4, [pc, #508]	; (80a0584 <loop+0x23c>)
        return printNumber(val, base) + t;
 80a0388:	220a      	movs	r2, #10
 80a038a:	7821      	ldrb	r1, [r4, #0]
 80a038c:	f001 ff2f 	bl	80a21ee <_ZN5Print11printNumberEmh>
        n += println();
 80a0390:	4638      	mov	r0, r7
 80a0392:	f001 ff20 	bl	80a21d6 <_ZN5Print7printlnEv>
  switch (deviceMode) {
 80a0396:	7823      	ldrb	r3, [r4, #0]
 80a0398:	2b04      	cmp	r3, #4
 80a039a:	d863      	bhi.n	80a0464 <loop+0x11c>
 80a039c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a03a0:	00650005 	.word	0x00650005
 80a03a4:	0062007f 	.word	0x0062007f
 80a03a8:	01e6      	.short	0x01e6
      static unsigned long int readingLastCalled = millis();
 80a03aa:	4f77      	ldr	r7, [pc, #476]	; (80a0588 <loop+0x240>)
 80a03ac:	4e77      	ldr	r6, [pc, #476]	; (80a058c <loop+0x244>)
 80a03ae:	783b      	ldrb	r3, [r7, #0]
 80a03b0:	f3bf 8f5b 	dmb	ish
 80a03b4:	f013 0f01 	tst.w	r3, #1
 80a03b8:	d109      	bne.n	80a03ce <loop+0x86>
 80a03ba:	4638      	mov	r0, r7
 80a03bc:	f7ff fe71 	bl	80a00a2 <__cxa_guard_acquire>
 80a03c0:	b128      	cbz	r0, 80a03ce <loop+0x86>
 80a03c2:	f001 fd0b 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
 80a03c6:	6030      	str	r0, [r6, #0]
 80a03c8:	4638      	mov	r0, r7
 80a03ca:	f7ff fe6f 	bl	80a00ac <__cxa_guard_release>
      if(currentTime > stateChangeTime) {
 80a03ce:	4b70      	ldr	r3, [pc, #448]	; (80a0590 <loop+0x248>)
 80a03d0:	682a      	ldr	r2, [r5, #0]
 80a03d2:	681b      	ldr	r3, [r3, #0]
 80a03d4:	429a      	cmp	r2, r3
 80a03d6:	d90d      	bls.n	80a03f4 <loop+0xac>
        deviceMode = IDLE;
 80a03d8:	2301      	movs	r3, #1
        lcd.clear();
 80a03da:	486e      	ldr	r0, [pc, #440]	; (80a0594 <loop+0x24c>)
        deviceMode = IDLE;
 80a03dc:	7023      	strb	r3, [r4, #0]
        lcd.clear();
 80a03de:	f001 fbfd 	bl	80a1bdc <_ZN7rgb_lcd5clearEv>
        lcd.setCursor(0, 0);
 80a03e2:	2200      	movs	r2, #0
 80a03e4:	486b      	ldr	r0, [pc, #428]	; (80a0594 <loop+0x24c>)
 80a03e6:	4611      	mov	r1, r2
 80a03e8:	f001 fc02 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READY...");
 80a03ec:	496a      	ldr	r1, [pc, #424]	; (80a0598 <loop+0x250>)
 80a03ee:	4869      	ldr	r0, [pc, #420]	; (80a0594 <loop+0x24c>)
 80a03f0:	f001 feea 	bl	80a21c8 <_ZN5Print5printEPKc>
      if(currentTime > nextLedFlashTime) {
 80a03f4:	4969      	ldr	r1, [pc, #420]	; (80a059c <loop+0x254>)
 80a03f6:	682b      	ldr	r3, [r5, #0]
 80a03f8:	680a      	ldr	r2, [r1, #0]
 80a03fa:	4c69      	ldr	r4, [pc, #420]	; (80a05a0 <loop+0x258>)
 80a03fc:	4293      	cmp	r3, r2
 80a03fe:	d907      	bls.n	80a0410 <loop+0xc8>
        ledFlashOn = !ledFlashOn;
 80a0400:	6823      	ldr	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a0402:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
        ledFlashOn = !ledFlashOn;
 80a0406:	fab3 f383 	clz	r3, r3
 80a040a:	095b      	lsrs	r3, r3, #5
 80a040c:	6023      	str	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a040e:	600a      	str	r2, [r1, #0]
      Serial.print(ledFlashOn);
 80a0410:	f002 f994 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0414:	220a      	movs	r2, #10
 80a0416:	6821      	ldr	r1, [r4, #0]
 80a0418:	f7ff fe6c 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a041c:	f001 fcde 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
      if (millis() - readingLastCalled > 1000) {
 80a0420:	6833      	ldr	r3, [r6, #0]
 80a0422:	1ac0      	subs	r0, r0, r3
 80a0424:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0428:	d91c      	bls.n	80a0464 <loop+0x11c>
        if(countdown <= 9) {
 80a042a:	4c5e      	ldr	r4, [pc, #376]	; (80a05a4 <loop+0x25c>)
        lcd.setCursor(14, 0);
 80a042c:	2200      	movs	r2, #0
 80a042e:	210e      	movs	r1, #14
 80a0430:	4858      	ldr	r0, [pc, #352]	; (80a0594 <loop+0x24c>)
 80a0432:	f001 fbdd 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        if(countdown <= 9) {
 80a0436:	6823      	ldr	r3, [r4, #0]
 80a0438:	2b09      	cmp	r3, #9
 80a043a:	dc09      	bgt.n	80a0450 <loop+0x108>
          lcd.print(0);
 80a043c:	220a      	movs	r2, #10
 80a043e:	2100      	movs	r1, #0
 80a0440:	4854      	ldr	r0, [pc, #336]	; (80a0594 <loop+0x24c>)
 80a0442:	f7ff fe57 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a0446:	2200      	movs	r2, #0
 80a0448:	210f      	movs	r1, #15
 80a044a:	4852      	ldr	r0, [pc, #328]	; (80a0594 <loop+0x24c>)
 80a044c:	f001 fbd0 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(countdown--);
 80a0450:	6821      	ldr	r1, [r4, #0]
 80a0452:	220a      	movs	r2, #10
 80a0454:	1e4b      	subs	r3, r1, #1
 80a0456:	484f      	ldr	r0, [pc, #316]	; (80a0594 <loop+0x24c>)
 80a0458:	6023      	str	r3, [r4, #0]
 80a045a:	f7ff fe4b 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a045e:	f001 fcbd 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
        readingLastCalled = millis();
 80a0462:	6030      	str	r0, [r6, #0]
      handleLED(READING_LED_TIME_DIFFERENCE, PixelColorRed);
 80a0464:	4b50      	ldr	r3, [pc, #320]	; (80a05a8 <loop+0x260>)
 80a0466:	6818      	ldr	r0, [r3, #0]
 80a0468:	e161      	b.n	80a072e <loop+0x3e6>
      if (buttonState == PRESSED || buttonState == HOLD) {
 80a046a:	7833      	ldrb	r3, [r6, #0]
 80a046c:	3b01      	subs	r3, #1
 80a046e:	2b01      	cmp	r3, #1
 80a0470:	d810      	bhi.n	80a0494 <loop+0x14c>
        deviceMode = READING;
 80a0472:	2302      	movs	r3, #2
 80a0474:	7023      	strb	r3, [r4, #0]
 80a0476:	f001 fcb1 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
        stateChangeTime = millis() + READING_MODE_TIME;
 80a047a:	4b45      	ldr	r3, [pc, #276]	; (80a0590 <loop+0x248>)
 80a047c:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a0480:	3010      	adds	r0, #16
 80a0482:	6018      	str	r0, [r3, #0]
        lcd.clear();
 80a0484:	4843      	ldr	r0, [pc, #268]	; (80a0594 <loop+0x24c>)
 80a0486:	f001 fba9 	bl	80a1bdc <_ZN7rgb_lcd5clearEv>
        Serial.print("Button press");
 80a048a:	f002 f957 	bl	80a273c <_Z16_fetch_usbserialv>
 80a048e:	4947      	ldr	r1, [pc, #284]	; (80a05ac <loop+0x264>)
 80a0490:	f001 fe9a 	bl	80a21c8 <_ZN5Print5printEPKc>
}
 80a0494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  strip.show();
 80a0498:	4845      	ldr	r0, [pc, #276]	; (80a05b0 <loop+0x268>)
 80a049a:	f000 ba5f 	b.w	80a095c <_ZN17Adafruit_NeoPixel4showEv>
      static unsigned long int readingLastCalled = millis();
 80a049e:	4e45      	ldr	r6, [pc, #276]	; (80a05b4 <loop+0x26c>)
 80a04a0:	7833      	ldrb	r3, [r6, #0]
 80a04a2:	f3bf 8f5b 	dmb	ish
 80a04a6:	07db      	lsls	r3, r3, #31
 80a04a8:	d40a      	bmi.n	80a04c0 <loop+0x178>
 80a04aa:	4630      	mov	r0, r6
 80a04ac:	f7ff fdf9 	bl	80a00a2 <__cxa_guard_acquire>
 80a04b0:	b130      	cbz	r0, 80a04c0 <loop+0x178>
 80a04b2:	f001 fc93 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
 80a04b6:	4b40      	ldr	r3, [pc, #256]	; (80a05b8 <loop+0x270>)
 80a04b8:	6018      	str	r0, [r3, #0]
 80a04ba:	4630      	mov	r0, r6
 80a04bc:	f7ff fdf6 	bl	80a00ac <__cxa_guard_release>
      if (currentTime > stateChangeTime) {
 80a04c0:	4b33      	ldr	r3, [pc, #204]	; (80a0590 <loop+0x248>)
 80a04c2:	682a      	ldr	r2, [r5, #0]
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	4e3d      	ldr	r6, [pc, #244]	; (80a05bc <loop+0x274>)
 80a04c8:	429a      	cmp	r2, r3
 80a04ca:	f240 8090 	bls.w	80a05ee <loop+0x2a6>
        deviceMode = COOLDOWN;
 80a04ce:	2304      	movs	r3, #4
 80a04d0:	7023      	strb	r3, [r4, #0]
        float averageVoltage = fullSampleTotal / fullSampleCount;
 80a04d2:	4b3b      	ldr	r3, [pc, #236]	; (80a05c0 <loop+0x278>)
        avgPPM = getPPM(averageVoltage);
 80a04d4:	4f3b      	ldr	r7, [pc, #236]	; (80a05c4 <loop+0x27c>)
        float averageVoltage = fullSampleTotal / fullSampleCount;
 80a04d6:	6818      	ldr	r0, [r3, #0]
 80a04d8:	4b3b      	ldr	r3, [pc, #236]	; (80a05c8 <loop+0x280>)
 80a04da:	681b      	ldr	r3, [r3, #0]
 80a04dc:	fb90 f0f3 	sdiv	r0, r0, r3
 80a04e0:	f003 f9e2 	bl	80a38a8 <__aeabi_i2f>
        maxPPM = getPPM(maxVoltage);
 80a04e4:	4b39      	ldr	r3, [pc, #228]	; (80a05cc <loop+0x284>)
        float averageVoltage = fullSampleTotal / fullSampleCount;
 80a04e6:	4604      	mov	r4, r0
        maxPPM = getPPM(maxVoltage);
 80a04e8:	6818      	ldr	r0, [r3, #0]
 80a04ea:	f003 f9dd 	bl	80a38a8 <__aeabi_i2f>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a04ee:	f002 fd81 	bl	80a2ff4 <__aeabi_f2d>
 80a04f2:	a31d      	add	r3, pc, #116	; (adr r3, 80a0568 <loop+0x220>)
 80a04f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04f8:	f002 fdd4 	bl	80a30a4 <__aeabi_dmul>
 80a04fc:	f003 f8ca 	bl	80a3694 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a0500:	f002 fd78 	bl	80a2ff4 <__aeabi_f2d>
 80a0504:	a31a      	add	r3, pc, #104	; (adr r3, 80a0570 <loop+0x228>)
 80a0506:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a050a:	f002 fdcb 	bl	80a30a4 <__aeabi_dmul>
 80a050e:	f003 f8c1 	bl	80a3694 <__aeabi_d2f>
        maxPPM = getPPM(maxVoltage);
 80a0512:	f003 fa1d 	bl	80a3950 <__aeabi_f2iz>
 80a0516:	4b2e      	ldr	r3, [pc, #184]	; (80a05d0 <loop+0x288>)
 80a0518:	6018      	str	r0, [r3, #0]
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a051a:	4620      	mov	r0, r4
 80a051c:	f002 fd6a 	bl	80a2ff4 <__aeabi_f2d>
 80a0520:	a311      	add	r3, pc, #68	; (adr r3, 80a0568 <loop+0x220>)
 80a0522:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0526:	f002 fdbd 	bl	80a30a4 <__aeabi_dmul>
 80a052a:	f003 f8b3 	bl	80a3694 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a052e:	f002 fd61 	bl	80a2ff4 <__aeabi_f2d>
 80a0532:	a30f      	add	r3, pc, #60	; (adr r3, 80a0570 <loop+0x228>)
 80a0534:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0538:	f002 fdb4 	bl	80a30a4 <__aeabi_dmul>
        maxBAC = getBAC(maxVoltage);
 80a053c:	2400      	movs	r4, #0
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a053e:	f003 f8a9 	bl	80a3694 <__aeabi_d2f>
        avgPPM = getPPM(averageVoltage);
 80a0542:	f003 fa05 	bl	80a3950 <__aeabi_f2iz>
        maxBAC = getBAC(maxVoltage);
 80a0546:	4b23      	ldr	r3, [pc, #140]	; (80a05d4 <loop+0x28c>)
        avgPPM = getPPM(averageVoltage);
 80a0548:	6038      	str	r0, [r7, #0]
        maxBAC = getBAC(maxVoltage);
 80a054a:	601c      	str	r4, [r3, #0]
        avgBAC = getBAC(averageVoltage);
 80a054c:	4b22      	ldr	r3, [pc, #136]	; (80a05d8 <loop+0x290>)
 80a054e:	601c      	str	r4, [r3, #0]
        updateDisplay();
 80a0550:	f7ff fe3e 	bl	80a01d0 <_Z13updateDisplayv>
        if(avgPPM >= HIGH_PPM) {
 80a0554:	f643 2297 	movw	r2, #14999	; 0x3a97
 80a0558:	683b      	ldr	r3, [r7, #0]
 80a055a:	4293      	cmp	r3, r2
 80a055c:	dd3e      	ble.n	80a05dc <loop+0x294>
          handleLED(SOLID, PixelColorRed);
 80a055e:	4b12      	ldr	r3, [pc, #72]	; (80a05a8 <loop+0x260>)
          handleLED(SOLID, PixelColorGreen);
 80a0560:	6819      	ldr	r1, [r3, #0]
 80a0562:	e041      	b.n	80a05e8 <loop+0x2a0>
 80a0564:	f3af 8000 	nop.w
 80a0568:	13bacbaf 	.word	0x13bacbaf
 80a056c:	3f540140 	.word	0x3f540140
 80a0570:	2e8ba608 	.word	0x2e8ba608
 80a0574:	408c68ba 	.word	0x408c68ba
 80a0578:	200000b4 	.word	0x200000b4
 80a057c:	200000b0 	.word	0x200000b0
 80a0580:	080a3b64 	.word	0x080a3b64
 80a0584:	200000bc 	.word	0x200000bc
 80a0588:	2000008c 	.word	0x2000008c
 80a058c:	20000098 	.word	0x20000098
 80a0590:	200000fc 	.word	0x200000fc
 80a0594:	200000d0 	.word	0x200000d0
 80a0598:	080a3b72 	.word	0x080a3b72
 80a059c:	200000f0 	.word	0x200000f0
 80a05a0:	200000e0 	.word	0x200000e0
 80a05a4:	20000000 	.word	0x20000000
 80a05a8:	20000084 	.word	0x20000084
 80a05ac:	080a3b7b 	.word	0x080a3b7b
 80a05b0:	20000100 	.word	0x20000100
 80a05b4:	20000090 	.word	0x20000090
 80a05b8:	2000009c 	.word	0x2000009c
 80a05bc:	20000088 	.word	0x20000088
 80a05c0:	200000c4 	.word	0x200000c4
 80a05c4:	200000a8 	.word	0x200000a8
 80a05c8:	200000c0 	.word	0x200000c0
 80a05cc:	200000ec 	.word	0x200000ec
 80a05d0:	200000e8 	.word	0x200000e8
 80a05d4:	200000e4 	.word	0x200000e4
 80a05d8:	200000a4 	.word	0x200000a4
        } else if (avgPPM >= MEDIUM_PPM) {
 80a05dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80a05e0:	4293      	cmp	r3, r2
 80a05e2:	f340 80a7 	ble.w	80a0734 <loop+0x3ec>
          handleLED(SOLID, PixelColorYellow);
 80a05e6:	6831      	ldr	r1, [r6, #0]
          handleLED(SOLID, PixelColorGreen);
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	f7ff fe5b 	bl	80a02a4 <_Z9handleLEDii>
      if (currentTime - lastSensorReadTime > MS_BETWEEN_SAMPLES) {
 80a05ee:	4c84      	ldr	r4, [pc, #528]	; (80a0800 <loop+0x4b8>)
 80a05f0:	682b      	ldr	r3, [r5, #0]
 80a05f2:	6822      	ldr	r2, [r4, #0]
 80a05f4:	4f83      	ldr	r7, [pc, #524]	; (80a0804 <loop+0x4bc>)
 80a05f6:	1a9b      	subs	r3, r3, r2
 80a05f8:	2b14      	cmp	r3, #20
 80a05fa:	d90b      	bls.n	80a0614 <loop+0x2cc>
        smallSampleTotal += analogRead(MQ3_PIN);
 80a05fc:	200a      	movs	r0, #10
 80a05fe:	f002 faf2 	bl	80a2be6 <analogRead>
 80a0602:	4a81      	ldr	r2, [pc, #516]	; (80a0808 <loop+0x4c0>)
 80a0604:	6813      	ldr	r3, [r2, #0]
 80a0606:	4403      	add	r3, r0
 80a0608:	6013      	str	r3, [r2, #0]
        smallSampleCount++;
 80a060a:	683b      	ldr	r3, [r7, #0]
 80a060c:	3301      	adds	r3, #1
 80a060e:	603b      	str	r3, [r7, #0]
        lastSensorReadTime = currentTime;
 80a0610:	682b      	ldr	r3, [r5, #0]
 80a0612:	6023      	str	r3, [r4, #0]
      if (smallSampleCount == 10) { 
 80a0614:	683b      	ldr	r3, [r7, #0]
 80a0616:	2b0a      	cmp	r3, #10
 80a0618:	f040 8088 	bne.w	80a072c <loop+0x3e4>
        smallSampleAvg = smallSampleTotal * 0.1;
 80a061c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80a0808 <loop+0x4c0>
        smallSampleTotal = 0;
 80a0620:	2400      	movs	r4, #0
        smallSampleAvg = smallSampleTotal * 0.1;
 80a0622:	f8d8 0000 	ldr.w	r0, [r8]
 80a0626:	f002 fcd3 	bl	80a2fd0 <__aeabi_i2d>
 80a062a:	a36f      	add	r3, pc, #444	; (adr r3, 80a07e8 <loop+0x4a0>)
 80a062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0630:	f002 fd38 	bl	80a30a4 <__aeabi_dmul>
 80a0634:	f002 ffe6 	bl	80a3604 <__aeabi_d2iz>
        fullSampleTotal += smallSampleAvg;
 80a0638:	4a74      	ldr	r2, [pc, #464]	; (80a080c <loop+0x4c4>)
        lcd.setCursor(0, 0);
 80a063a:	4621      	mov	r1, r4
        fullSampleTotal += smallSampleAvg;
 80a063c:	6813      	ldr	r3, [r2, #0]
        smallSampleAvg = smallSampleTotal * 0.1;
 80a063e:	4605      	mov	r5, r0
        fullSampleTotal += smallSampleAvg;
 80a0640:	4403      	add	r3, r0
 80a0642:	6013      	str	r3, [r2, #0]
        fullSampleCount++;
 80a0644:	4a72      	ldr	r2, [pc, #456]	; (80a0810 <loop+0x4c8>)
        smallSampleTotal = 0;
 80a0646:	f8c8 4000 	str.w	r4, [r8]
        fullSampleCount++;
 80a064a:	6813      	ldr	r3, [r2, #0]
        smallSampleCount = 0;
 80a064c:	603c      	str	r4, [r7, #0]
        fullSampleCount++;
 80a064e:	3301      	adds	r3, #1
 80a0650:	6013      	str	r3, [r2, #0]
        if(smallSampleAvg > maxVoltage) {
 80a0652:	4b70      	ldr	r3, [pc, #448]	; (80a0814 <loop+0x4cc>)
        if (millis() - readingLastCalled > 1000) {
 80a0654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80a0818 <loop+0x4d0>
        if(smallSampleAvg > maxVoltage) {
 80a0658:	681a      	ldr	r2, [r3, #0]
 80a065a:	4282      	cmp	r2, r0
          maxVoltage = smallSampleAvg;
 80a065c:	bfb8      	it	lt
 80a065e:	6018      	strlt	r0, [r3, #0]
        lcd.setCursor(0, 0);
 80a0660:	4622      	mov	r2, r4
 80a0662:	486e      	ldr	r0, [pc, #440]	; (80a081c <loop+0x4d4>)
 80a0664:	f001 fac4 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READING...");
 80a0668:	496d      	ldr	r1, [pc, #436]	; (80a0820 <loop+0x4d8>)
 80a066a:	486c      	ldr	r0, [pc, #432]	; (80a081c <loop+0x4d4>)
 80a066c:	f001 fdac 	bl	80a21c8 <_ZN5Print5printEPKc>
 80a0670:	f001 fbb4 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
        if (millis() - readingLastCalled > 1000) {
 80a0674:	f8d8 3000 	ldr.w	r3, [r8]
 80a0678:	1ac0      	subs	r0, r0, r3
 80a067a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a067e:	d91d      	bls.n	80a06bc <loop+0x374>
          if(countdown <= 9) {
 80a0680:	4f68      	ldr	r7, [pc, #416]	; (80a0824 <loop+0x4dc>)
          lcd.setCursor(14, 0);
 80a0682:	4622      	mov	r2, r4
 80a0684:	210e      	movs	r1, #14
 80a0686:	4865      	ldr	r0, [pc, #404]	; (80a081c <loop+0x4d4>)
 80a0688:	f001 fab2 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
          if(countdown <= 9) {
 80a068c:	683b      	ldr	r3, [r7, #0]
 80a068e:	2b09      	cmp	r3, #9
 80a0690:	dc09      	bgt.n	80a06a6 <loop+0x35e>
            lcd.print(0);
 80a0692:	220a      	movs	r2, #10
 80a0694:	4621      	mov	r1, r4
 80a0696:	4861      	ldr	r0, [pc, #388]	; (80a081c <loop+0x4d4>)
 80a0698:	f7ff fd2c 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
            lcd.setCursor(15, 0);
 80a069c:	4622      	mov	r2, r4
 80a069e:	210f      	movs	r1, #15
 80a06a0:	485e      	ldr	r0, [pc, #376]	; (80a081c <loop+0x4d4>)
 80a06a2:	f001 faa5 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
          lcd.print(countdown--);
 80a06a6:	6839      	ldr	r1, [r7, #0]
 80a06a8:	220a      	movs	r2, #10
 80a06aa:	1e4b      	subs	r3, r1, #1
 80a06ac:	485b      	ldr	r0, [pc, #364]	; (80a081c <loop+0x4d4>)
 80a06ae:	603b      	str	r3, [r7, #0]
 80a06b0:	f7ff fd20 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a06b4:	f001 fb92 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
          readingLastCalled = millis();
 80a06b8:	f8c8 0000 	str.w	r0, [r8]
        lcd.setCursor(0, 1);
 80a06bc:	2201      	movs	r2, #1
 80a06be:	2100      	movs	r1, #0
 80a06c0:	4856      	ldr	r0, [pc, #344]	; (80a081c <loop+0x4d4>)
 80a06c2:	f001 fa95 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        if (displayMode == PPM) {
 80a06c6:	4b58      	ldr	r3, [pc, #352]	; (80a0828 <loop+0x4e0>)
 80a06c8:	781c      	ldrb	r4, [r3, #0]
 80a06ca:	2c00      	cmp	r4, #0
 80a06cc:	d134      	bne.n	80a0738 <loop+0x3f0>
          lcd.print("PPM:");
 80a06ce:	4957      	ldr	r1, [pc, #348]	; (80a082c <loop+0x4e4>)
 80a06d0:	4852      	ldr	r0, [pc, #328]	; (80a081c <loop+0x4d4>)
 80a06d2:	f001 fd79 	bl	80a21c8 <_ZN5Print5printEPKc>
          Serial.print("PPM: ");
 80a06d6:	f002 f831 	bl	80a273c <_Z16_fetch_usbserialv>
 80a06da:	4955      	ldr	r1, [pc, #340]	; (80a0830 <loop+0x4e8>)
 80a06dc:	f001 fd74 	bl	80a21c8 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a06e0:	2201      	movs	r2, #1
 80a06e2:	2104      	movs	r1, #4
 80a06e4:	484d      	ldr	r0, [pc, #308]	; (80a081c <loop+0x4d4>)
 80a06e6:	f001 fa83 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
          float ppm = getPPM(smallSampleAvg);
 80a06ea:	4628      	mov	r0, r5
 80a06ec:	f003 f8dc 	bl	80a38a8 <__aeabi_i2f>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a06f0:	f002 fc80 	bl	80a2ff4 <__aeabi_f2d>
 80a06f4:	a33e      	add	r3, pc, #248	; (adr r3, 80a07f0 <loop+0x4a8>)
 80a06f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06fa:	f002 fcd3 	bl	80a30a4 <__aeabi_dmul>
 80a06fe:	f002 ffc9 	bl	80a3694 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a0702:	f002 fc77 	bl	80a2ff4 <__aeabi_f2d>
 80a0706:	a33c      	add	r3, pc, #240	; (adr r3, 80a07f8 <loop+0x4b0>)
 80a0708:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a070c:	f002 fcca 	bl	80a30a4 <__aeabi_dmul>
 80a0710:	f002 ffc0 	bl	80a3694 <__aeabi_d2f>
 80a0714:	4604      	mov	r4, r0
          lcd.print(ppm);
 80a0716:	4601      	mov	r1, r0
 80a0718:	2202      	movs	r2, #2
 80a071a:	4840      	ldr	r0, [pc, #256]	; (80a081c <loop+0x4d4>)
 80a071c:	f001 fe46 	bl	80a23ac <_ZN5Print5printEfi>
          Serial.println(ppm);
 80a0720:	f002 f80c 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0724:	2202      	movs	r2, #2
 80a0726:	4621      	mov	r1, r4
          Serial.println(bac);
 80a0728:	f001 fe5d 	bl	80a23e6 <_ZN5Print7printlnEfi>
  if(timeDifference != SOLID) {
 80a072c:	6830      	ldr	r0, [r6, #0]
 80a072e:	f7ff fcc1 	bl	80a00b4 <_Z9handleLEDii.part.0>
 80a0732:	e6af      	b.n	80a0494 <loop+0x14c>
          handleLED(SOLID, PixelColorGreen);
 80a0734:	4b3f      	ldr	r3, [pc, #252]	; (80a0834 <loop+0x4ec>)
 80a0736:	e713      	b.n	80a0560 <loop+0x218>
        } else if (displayMode == BAC) {
 80a0738:	2c01      	cmp	r4, #1
 80a073a:	d1f7      	bne.n	80a072c <loop+0x3e4>
          lcd.print("BAC:");
 80a073c:	493e      	ldr	r1, [pc, #248]	; (80a0838 <loop+0x4f0>)
 80a073e:	4837      	ldr	r0, [pc, #220]	; (80a081c <loop+0x4d4>)
 80a0740:	f001 fd42 	bl	80a21c8 <_ZN5Print5printEPKc>
          Serial.print("BAC: ");
 80a0744:	f001 fffa 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0748:	493c      	ldr	r1, [pc, #240]	; (80a083c <loop+0x4f4>)
 80a074a:	f001 fd3d 	bl	80a21c8 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a074e:	4622      	mov	r2, r4
 80a0750:	2104      	movs	r1, #4
 80a0752:	4832      	ldr	r0, [pc, #200]	; (80a081c <loop+0x4d4>)
 80a0754:	f001 fa4c 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
          lcd.print(bac);
 80a0758:	2202      	movs	r2, #2
 80a075a:	2100      	movs	r1, #0
 80a075c:	482f      	ldr	r0, [pc, #188]	; (80a081c <loop+0x4d4>)
 80a075e:	f001 fe25 	bl	80a23ac <_ZN5Print5printEfi>
          Serial.println(bac);
 80a0762:	f001 ffeb 	bl	80a273c <_Z16_fetch_usbserialv>
 80a0766:	2202      	movs	r2, #2
 80a0768:	2100      	movs	r1, #0
 80a076a:	e7dd      	b.n	80a0728 <loop+0x3e0>
      static unsigned long int cooldownLastCalled = millis();
 80a076c:	4d34      	ldr	r5, [pc, #208]	; (80a0840 <loop+0x4f8>)
 80a076e:	4e35      	ldr	r6, [pc, #212]	; (80a0844 <loop+0x4fc>)
 80a0770:	782b      	ldrb	r3, [r5, #0]
 80a0772:	f3bf 8f5b 	dmb	ish
 80a0776:	f013 0f01 	tst.w	r3, #1
 80a077a:	d109      	bne.n	80a0790 <loop+0x448>
 80a077c:	4628      	mov	r0, r5
 80a077e:	f7ff fc90 	bl	80a00a2 <__cxa_guard_acquire>
 80a0782:	b128      	cbz	r0, 80a0790 <loop+0x448>
 80a0784:	f001 fb2a 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
 80a0788:	6030      	str	r0, [r6, #0]
 80a078a:	4628      	mov	r0, r5
 80a078c:	f7ff fc8e 	bl	80a00ac <__cxa_guard_release>
      if (countdown == 0) {
 80a0790:	4d2d      	ldr	r5, [pc, #180]	; (80a0848 <loop+0x500>)
 80a0792:	682b      	ldr	r3, [r5, #0]
 80a0794:	b90b      	cbnz	r3, 80a079a <loop+0x452>
        deviceMode = IDLE;
 80a0796:	2301      	movs	r3, #1
 80a0798:	7023      	strb	r3, [r4, #0]
 80a079a:	f001 fb1f 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
      if (millis() - cooldownLastCalled > 1000) {
 80a079e:	6833      	ldr	r3, [r6, #0]
 80a07a0:	1ac0      	subs	r0, r0, r3
 80a07a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a07a6:	f67f ae75 	bls.w	80a0494 <loop+0x14c>
        lcd.setCursor(14, 0);
 80a07aa:	2200      	movs	r2, #0
 80a07ac:	210e      	movs	r1, #14
 80a07ae:	481b      	ldr	r0, [pc, #108]	; (80a081c <loop+0x4d4>)
 80a07b0:	f001 fa1e 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        if(countdown <= 9) {
 80a07b4:	682b      	ldr	r3, [r5, #0]
 80a07b6:	2b09      	cmp	r3, #9
 80a07b8:	dc09      	bgt.n	80a07ce <loop+0x486>
          lcd.print(0);
 80a07ba:	220a      	movs	r2, #10
 80a07bc:	2100      	movs	r1, #0
 80a07be:	4817      	ldr	r0, [pc, #92]	; (80a081c <loop+0x4d4>)
 80a07c0:	f7ff fc98 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a07c4:	2200      	movs	r2, #0
 80a07c6:	210f      	movs	r1, #15
 80a07c8:	4814      	ldr	r0, [pc, #80]	; (80a081c <loop+0x4d4>)
 80a07ca:	f001 fa11 	bl	80a1bf0 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(countdown--);
 80a07ce:	6829      	ldr	r1, [r5, #0]
 80a07d0:	220a      	movs	r2, #10
 80a07d2:	1e4b      	subs	r3, r1, #1
 80a07d4:	4811      	ldr	r0, [pc, #68]	; (80a081c <loop+0x4d4>)
 80a07d6:	602b      	str	r3, [r5, #0]
 80a07d8:	f7ff fc8c 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a07dc:	f001 fafe 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
        cooldownLastCalled = millis();
 80a07e0:	6030      	str	r0, [r6, #0]
 80a07e2:	e657      	b.n	80a0494 <loop+0x14c>
 80a07e4:	f3af 8000 	nop.w
 80a07e8:	9999999a 	.word	0x9999999a
 80a07ec:	3fb99999 	.word	0x3fb99999
 80a07f0:	13bacbaf 	.word	0x13bacbaf
 80a07f4:	3f540140 	.word	0x3f540140
 80a07f8:	2e8ba608 	.word	0x2e8ba608
 80a07fc:	408c68ba 	.word	0x408c68ba
 80a0800:	200000cc 	.word	0x200000cc
 80a0804:	200000f4 	.word	0x200000f4
 80a0808:	200000f8 	.word	0x200000f8
 80a080c:	200000c4 	.word	0x200000c4
 80a0810:	200000c0 	.word	0x200000c0
 80a0814:	200000ec 	.word	0x200000ec
 80a0818:	2000009c 	.word	0x2000009c
 80a081c:	200000d0 	.word	0x200000d0
 80a0820:	080a3b88 	.word	0x080a3b88
 80a0824:	20000004 	.word	0x20000004
 80a0828:	200000bd 	.word	0x200000bd
 80a082c:	080a3b4d 	.word	0x080a3b4d
 80a0830:	080a3b93 	.word	0x080a3b93
 80a0834:	2000007c 	.word	0x2000007c
 80a0838:	080a3b5f 	.word	0x080a3b5f
 80a083c:	080a3b99 	.word	0x080a3b99
 80a0840:	20000094 	.word	0x20000094
 80a0844:	200000a0 	.word	0x200000a0
 80a0848:	20000008 	.word	0x20000008

080a084c <_GLOBAL__sub_I_lcd>:
}
 80a084c:	b510      	push	{r4, lr}
rgb_lcd lcd;
 80a084e:	4813      	ldr	r0, [pc, #76]	; (80a089c <_GLOBAL__sub_I_lcd+0x50>)
 80a0850:	f001 f9bc 	bl	80a1bcc <_ZN7rgb_lcdC1Ev>
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0854:	2302      	movs	r3, #2
 80a0856:	2204      	movs	r2, #4
 80a0858:	2101      	movs	r1, #1
 80a085a:	4811      	ldr	r0, [pc, #68]	; (80a08a0 <_GLOBAL__sub_I_lcd+0x54>)
 80a085c:	f000 f86d 	bl	80a093a <_ZN17Adafruit_NeoPixelC1Ethh>
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0860:	2200      	movs	r2, #0
 80a0862:	4c10      	ldr	r4, [pc, #64]	; (80a08a4 <_GLOBAL__sub_I_lcd+0x58>)
 80a0864:	4610      	mov	r0, r2
 80a0866:	7821      	ldrb	r1, [r4, #0]
 80a0868:	f001 f967 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a086c:	2200      	movs	r2, #0
int PixelColorRed = strip.Color(0, intensity, 0);
 80a086e:	4b0e      	ldr	r3, [pc, #56]	; (80a08a8 <_GLOBAL__sub_I_lcd+0x5c>)
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0870:	4611      	mov	r1, r2
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0872:	6018      	str	r0, [r3, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0874:	7820      	ldrb	r0, [r4, #0]
 80a0876:	f001 f960 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a087a:	4b0c      	ldr	r3, [pc, #48]	; (80a08ac <_GLOBAL__sub_I_lcd+0x60>)
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a087c:	7821      	ldrb	r1, [r4, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a087e:	6018      	str	r0, [r3, #0]
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0880:	2200      	movs	r2, #0
 80a0882:	4608      	mov	r0, r1
 80a0884:	f001 f959 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0888:	2200      	movs	r2, #0
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a088a:	4b09      	ldr	r3, [pc, #36]	; (80a08b0 <_GLOBAL__sub_I_lcd+0x64>)
int PixelColorOff = strip.Color(  0,  0,  0);
 80a088c:	4611      	mov	r1, r2
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a088e:	6018      	str	r0, [r3, #0]
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0890:	4610      	mov	r0, r2
 80a0892:	f001 f952 	bl	80a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0896:	4b07      	ldr	r3, [pc, #28]	; (80a08b4 <_GLOBAL__sub_I_lcd+0x68>)
 80a0898:	6018      	str	r0, [r3, #0]
}
 80a089a:	bd10      	pop	{r4, pc}
 80a089c:	200000d0 	.word	0x200000d0
 80a08a0:	20000100 	.word	0x20000100
 80a08a4:	2000000c 	.word	0x2000000c
 80a08a8:	20000084 	.word	0x20000084
 80a08ac:	2000007c 	.word	0x2000007c
 80a08b0:	20000088 	.word	0x20000088
 80a08b4:	20000080 	.word	0x20000080

080a08b8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a08b8:	b538      	push	{r3, r4, r5, lr}
 80a08ba:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a08bc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a08be:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a08c0:	b108      	cbz	r0, 80a08c6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a08c2:	f001 fc21 	bl	80a2108 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a08c6:	79a3      	ldrb	r3, [r4, #6]
 80a08c8:	2b06      	cmp	r3, #6
 80a08ca:	bf0c      	ite	eq
 80a08cc:	2004      	moveq	r0, #4
 80a08ce:	2003      	movne	r0, #3
 80a08d0:	4368      	muls	r0, r5
 80a08d2:	b280      	uxth	r0, r0
 80a08d4:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a08d6:	f001 fc0f 	bl	80a20f8 <malloc>
 80a08da:	60e0      	str	r0, [r4, #12]
 80a08dc:	b128      	cbz	r0, 80a08ea <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a08de:	2100      	movs	r1, #0
 80a08e0:	88a2      	ldrh	r2, [r4, #4]
 80a08e2:	f003 f86f 	bl	80a39c4 <memset>
    numLEDs = n;
 80a08e6:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a08e8:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a08ea:	80a0      	strh	r0, [r4, #4]
 80a08ec:	8060      	strh	r0, [r4, #2]
}
 80a08ee:	e7fb      	b.n	80a08e8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a08f0 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a08f0:	b510      	push	{r4, lr}
 80a08f2:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a08f4:	2101      	movs	r1, #1
 80a08f6:	79c0      	ldrb	r0, [r0, #7]
 80a08f8:	f002 f938 	bl	80a2b6c <pinMode>
  digitalWrite(pin, LOW);
 80a08fc:	2100      	movs	r1, #0
 80a08fe:	79e0      	ldrb	r0, [r4, #7]
 80a0900:	f002 f945 	bl	80a2b8e <digitalWrite>
  begun = true;
 80a0904:	2301      	movs	r3, #1
 80a0906:	7023      	strb	r3, [r4, #0]
}
 80a0908:	bd10      	pop	{r4, pc}

080a090a <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a090a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a090c:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a090e:	4605      	mov	r5, r0
 80a0910:	460c      	mov	r4, r1
    if (begun) {
 80a0912:	b11b      	cbz	r3, 80a091c <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0914:	2100      	movs	r1, #0
 80a0916:	79c0      	ldrb	r0, [r0, #7]
 80a0918:	f002 f928 	bl	80a2b6c <pinMode>
    }
    pin = p;
    if (begun) {
 80a091c:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a091e:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0920:	b153      	cbz	r3, 80a0938 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0922:	b2a4      	uxth	r4, r4
 80a0924:	4620      	mov	r0, r4
 80a0926:	2101      	movs	r1, #1
 80a0928:	f002 f920 	bl	80a2b6c <pinMode>
        digitalWrite(p, LOW);
 80a092c:	4620      	mov	r0, r4
    }
}
 80a092e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0932:	2100      	movs	r1, #0
 80a0934:	f002 b92b 	b.w	80a2b8e <digitalWrite>
}
 80a0938:	bd38      	pop	{r3, r4, r5, pc}

080a093a <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a093a:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a093c:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a093e:	4604      	mov	r4, r0
 80a0940:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0942:	7183      	strb	r3, [r0, #6]
 80a0944:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0948:	7005      	strb	r5, [r0, #0]
 80a094a:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a094c:	f7ff ffb4 	bl	80a08b8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0950:	4620      	mov	r0, r4
 80a0952:	4631      	mov	r1, r6
 80a0954:	f7ff ffd9 	bl	80a090a <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0958:	4620      	mov	r0, r4
 80a095a:	bd70      	pop	{r4, r5, r6, pc}

080a095c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a095c:	68c3      	ldr	r3, [r0, #12]
 80a095e:	2b00      	cmp	r3, #0
 80a0960:	f000 8441 	beq.w	80a11e6 <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0964:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0966:	7983      	ldrb	r3, [r0, #6]
 80a0968:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a096a:	3b02      	subs	r3, #2
 80a096c:	b2db      	uxtb	r3, r3
 80a096e:	2b04      	cmp	r3, #4
 80a0970:	bf8c      	ite	hi
 80a0972:	2532      	movhi	r5, #50	; 0x32
 80a0974:	4a28      	ldrls	r2, [pc, #160]	; (80a0a18 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0976:	b087      	sub	sp, #28
 80a0978:	bf98      	it	ls
 80a097a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a097e:	f001 fa25 	bl	80a1dcc <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0982:	6923      	ldr	r3, [r4, #16]
 80a0984:	1ac0      	subs	r0, r0, r3
 80a0986:	42a8      	cmp	r0, r5
 80a0988:	d3f9      	bcc.n	80a097e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a098a:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a098c:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a098e:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0990:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0994:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0998:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a099a:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a099c:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a099e:	f000 826e 	beq.w	80a0e7e <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a09a2:	2d07      	cmp	r5, #7
 80a09a4:	f000 826b 	beq.w	80a0e7e <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a09a8:	2d06      	cmp	r5, #6
 80a09aa:	f000 841d 	beq.w	80a11e8 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a09ae:	2d05      	cmp	r5, #5
 80a09b0:	f000 83a1 	beq.w	80a10f6 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a09b4:	2d08      	cmp	r5, #8
 80a09b6:	f000 839e 	beq.w	80a10f6 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a09ba:	2d00      	cmp	r5, #0
 80a09bc:	f040 854f 	bne.w	80a145e <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a09c0:	2b00      	cmp	r3, #0
 80a09c2:	f000 8392 	beq.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a09c6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a09ca:	4a14      	ldr	r2, [pc, #80]	; (80a0a1c <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a09cc:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a09ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a09d2:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a09d4:	3b03      	subs	r3, #3
 80a09d6:	b29b      	uxth	r3, r3
 80a09d8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a09dc:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a09e0:	b2db      	uxtb	r3, r3
 80a09e2:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a09e6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a09ea:	b2db      	uxtb	r3, r3
 80a09ec:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a09f0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a09f4:	b2db      	uxtb	r3, r3
 80a09f6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a09fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0a02:	021b      	lsls	r3, r3, #8
 80a0a04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0a08:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0a0c:	4303      	orrs	r3, r0
 80a0a0e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0a10:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0a14:	e11b      	b.n	80a0c4e <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a0a16:	bf00      	nop
 80a0a18:	080a3ba0 	.word	0x080a3ba0
 80a0a1c:	20000118 	.word	0x20000118
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a0a20:	4600      	mov	r0, r0
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0b28:	79e3      	ldrb	r3, [r4, #7]
 80a0b2a:	6810      	ldr	r0, [r2, #0]
 80a0b2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b30:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b38:	88b8      	ldrh	r0, [r7, #4]
 80a0b3a:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0b3c:	4600      	mov	r0, r0
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
 80a0bec:	bf00      	nop
 80a0bee:	bf00      	nop
 80a0bf0:	bf00      	nop
 80a0bf2:	bf00      	nop
 80a0bf4:	bf00      	nop
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0c36:	9b04      	ldr	r3, [sp, #16]
 80a0c38:	085b      	lsrs	r3, r3, #1
 80a0c3a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0c40:	3301      	adds	r3, #1
 80a0c42:	b2db      	uxtb	r3, r3
 80a0c44:	2b17      	cmp	r3, #23
 80a0c46:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c4a:	f200 8723 	bhi.w	80a1a94 <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a0c4e:	79e3      	ldrb	r3, [r4, #7]
 80a0c50:	6810      	ldr	r0, [r2, #0]
 80a0c52:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c56:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c5e:	88b8      	ldrh	r0, [r7, #4]
 80a0c60:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c62:	9803      	ldr	r0, [sp, #12]
 80a0c64:	9b04      	ldr	r3, [sp, #16]
 80a0c66:	4218      	tst	r0, r3
 80a0c68:	f47f aeda 	bne.w	80a0a20 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a0c6c:	4600      	mov	r0, r0
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0cbe:	79e3      	ldrb	r3, [r4, #7]
 80a0cc0:	6810      	ldr	r0, [r2, #0]
 80a0cc2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cc6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0cce:	88b8      	ldrh	r0, [r7, #4]
 80a0cd0:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0cd2:	4600      	mov	r0, r0
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	e6db      	b.n	80a0c36 <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e7e:	2b00      	cmp	r3, #0
 80a0e80:	f000 8133 	beq.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0e84:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0e88:	f04f 0c00 	mov.w	ip, #0
 80a0e8c:	4a12      	ldr	r2, [pc, #72]	; (80a0ed8 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0e8e:	4608      	mov	r0, r1
 80a0e90:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e96:	3103      	adds	r1, #3
 80a0e98:	3b03      	subs	r3, #3
 80a0e9a:	b29b      	uxth	r3, r3
 80a0e9c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0ea0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0ea4:	b2db      	uxtb	r3, r3
 80a0ea6:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0eaa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0eae:	b2db      	uxtb	r3, r3
 80a0eb0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0eb4:	7883      	ldrb	r3, [r0, #2]
 80a0eb6:	b2db      	uxtb	r3, r3
 80a0eb8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ebc:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a0ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ec4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0ec8:	021b      	lsls	r3, r3, #8
 80a0eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a0ece:	4303      	orrs	r3, r0
 80a0ed0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ed2:	f88d c005 	strb.w	ip, [sp, #5]
 80a0ed6:	e07f      	b.n	80a0fd8 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a0ed8:	20000118 	.word	0x20000118
          asm volatile(
 80a0edc:	4600      	mov	r0, r0
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0f76:	79e3      	ldrb	r3, [r4, #7]
 80a0f78:	6810      	ldr	r0, [r2, #0]
 80a0f7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f7e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0f82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f86:	88b0      	ldrh	r0, [r6, #4]
 80a0f88:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0f8a:	4600      	mov	r0, r0
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
        mask >>= 1;
 80a0fc0:	9b04      	ldr	r3, [sp, #16]
 80a0fc2:	085b      	lsrs	r3, r3, #1
 80a0fc4:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0fc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fca:	3301      	adds	r3, #1
 80a0fcc:	b2db      	uxtb	r3, r3
 80a0fce:	2b17      	cmp	r3, #23
 80a0fd0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0fd4:	f200 8083 	bhi.w	80a10de <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a0fd8:	79e3      	ldrb	r3, [r4, #7]
 80a0fda:	6810      	ldr	r0, [r2, #0]
 80a0fdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fe0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fe8:	88b0      	ldrh	r0, [r6, #4]
 80a0fea:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0fec:	9803      	ldr	r0, [sp, #12]
 80a0fee:	9b04      	ldr	r3, [sp, #16]
 80a0ff0:	4218      	tst	r0, r3
 80a0ff2:	f47f af73 	bne.w	80a0edc <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a0ff6:	4600      	mov	r0, r0
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a101e:	79e3      	ldrb	r3, [r4, #7]
 80a1020:	6810      	ldr	r0, [r2, #0]
 80a1022:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1026:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a102a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a102e:	88b0      	ldrh	r0, [r6, #4]
 80a1030:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1032:	4600      	mov	r0, r0
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	e770      	b.n	80a0fc0 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10e2:	b29b      	uxth	r3, r3
 80a10e4:	2b00      	cmp	r3, #0
 80a10e6:	f47f aed2 	bne.w	80a0e8e <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a10ea:	b662      	cpsie	i
 80a10ec:	f000 fe6e 	bl	80a1dcc <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a10f0:	6120      	str	r0, [r4, #16]
}
 80a10f2:	b007      	add	sp, #28
 80a10f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10f6:	2b00      	cmp	r3, #0
 80a10f8:	d0f7      	beq.n	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a10fa:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a10fe:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a1102:	4b54      	ldr	r3, [pc, #336]	; (80a1254 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a1104:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a1106:	4b54      	ldr	r3, [pc, #336]	; (80a1258 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a1108:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a110a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a110e:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1110:	3a03      	subs	r2, #3
 80a1112:	b292      	uxth	r2, r2
 80a1114:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1118:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a111c:	b2d2      	uxtb	r2, r2
 80a111e:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1122:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a1126:	b2d2      	uxtb	r2, r2
 80a1128:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a112c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a1130:	b2d2      	uxtb	r2, r2
 80a1132:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1136:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a113a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a113e:	0212      	lsls	r2, r2, #8
 80a1140:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a1144:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a1148:	4332      	orrs	r2, r6
 80a114a:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a114c:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a1150:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a1152:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1154:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1158:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a115c:	88b6      	ldrh	r6, [r6, #4]
 80a115e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a1162:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1164:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a1166:	9e03      	ldr	r6, [sp, #12]
 80a1168:	9a04      	ldr	r2, [sp, #16]
 80a116a:	4216      	tst	r6, r2
 80a116c:	d025      	beq.n	80a11ba <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a116e:	685a      	ldr	r2, [r3, #4]
 80a1170:	9e05      	ldr	r6, [sp, #20]
 80a1172:	1b92      	subs	r2, r2, r6
 80a1174:	2a4f      	cmp	r2, #79	; 0x4f
 80a1176:	d9fa      	bls.n	80a116e <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1178:	79e2      	ldrb	r2, [r4, #7]
 80a117a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a117e:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1182:	88b6      	ldrh	r6, [r6, #4]
 80a1184:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1188:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a118a:	685a      	ldr	r2, [r3, #4]
 80a118c:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a118e:	685a      	ldr	r2, [r3, #4]
 80a1190:	9e05      	ldr	r6, [sp, #20]
 80a1192:	1b92      	subs	r2, r2, r6
 80a1194:	2a07      	cmp	r2, #7
 80a1196:	d9fa      	bls.n	80a118e <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a1198:	9a04      	ldr	r2, [sp, #16]
 80a119a:	0852      	lsrs	r2, r2, #1
 80a119c:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a119e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a11a2:	3201      	adds	r2, #1
 80a11a4:	b2d2      	uxtb	r2, r2
 80a11a6:	2a17      	cmp	r2, #23
 80a11a8:	f88d 2005 	strb.w	r2, [sp, #5]
 80a11ac:	d9d0      	bls.n	80a1150 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a11b2:	b292      	uxth	r2, r2
 80a11b4:	2a00      	cmp	r2, #0
 80a11b6:	d1a7      	bne.n	80a1108 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a11b8:	e797      	b.n	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a11ba:	685a      	ldr	r2, [r3, #4]
 80a11bc:	9e05      	ldr	r6, [sp, #20]
 80a11be:	1b92      	subs	r2, r2, r6
 80a11c0:	2a18      	cmp	r2, #24
 80a11c2:	d9fa      	bls.n	80a11ba <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a11c4:	79e2      	ldrb	r2, [r4, #7]
 80a11c6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a11ca:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a11ce:	88b6      	ldrh	r6, [r6, #4]
 80a11d0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a11d4:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a11d6:	685a      	ldr	r2, [r3, #4]
 80a11d8:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a11da:	685a      	ldr	r2, [r3, #4]
 80a11dc:	9e05      	ldr	r6, [sp, #20]
 80a11de:	1b92      	subs	r2, r2, r6
 80a11e0:	2a45      	cmp	r2, #69	; 0x45
 80a11e2:	d9fa      	bls.n	80a11da <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a11e4:	e7d8      	b.n	80a1198 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a11e6:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a11e8:	2b00      	cmp	r3, #0
 80a11ea:	f43f af7e 	beq.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a11ee:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a11f2:	2600      	movs	r6, #0
 80a11f4:	4a17      	ldr	r2, [pc, #92]	; (80a1254 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a11f6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a11f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a11fc:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a11fe:	3b04      	subs	r3, #4
 80a1200:	b29b      	uxth	r3, r3
 80a1202:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1206:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a120a:	b2db      	uxtb	r3, r3
 80a120c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1210:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1214:	b2db      	uxtb	r3, r3
 80a1216:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a121a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a121e:	b2db      	uxtb	r3, r3
 80a1220:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a1224:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1228:	b2db      	uxtb	r3, r3
 80a122a:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a122e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1232:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1236:	041b      	lsls	r3, r3, #16
 80a1238:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a123c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1240:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a1244:	433b      	orrs	r3, r7
 80a1246:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a124a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a124c:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1250:	e07f      	b.n	80a1352 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a1252:	bf00      	nop
 80a1254:	20000118 	.word	0x20000118
 80a1258:	e0001000 	.word	0xe0001000
          asm volatile(
 80a125c:	4600      	mov	r0, r0
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a12ca:	79e3      	ldrb	r3, [r4, #7]
 80a12cc:	6810      	ldr	r0, [r2, #0]
 80a12ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12da:	88b8      	ldrh	r0, [r7, #4]
 80a12dc:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a12de:	4600      	mov	r0, r0
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
        mask >>= 1;
 80a133c:	9b04      	ldr	r3, [sp, #16]
 80a133e:	085b      	lsrs	r3, r3, #1
 80a1340:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1346:	3301      	adds	r3, #1
 80a1348:	b2db      	uxtb	r3, r3
 80a134a:	2b1f      	cmp	r3, #31
 80a134c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1350:	d87e      	bhi.n	80a1450 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a1352:	79e3      	ldrb	r3, [r4, #7]
 80a1354:	6810      	ldr	r0, [r2, #0]
 80a1356:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a135a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a135e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1362:	88b8      	ldrh	r0, [r7, #4]
 80a1364:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1366:	9803      	ldr	r0, [sp, #12]
 80a1368:	9b04      	ldr	r3, [sp, #16]
 80a136a:	4218      	tst	r0, r3
 80a136c:	f47f af76 	bne.w	80a125c <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a1370:	4600      	mov	r0, r0
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1398:	79e3      	ldrb	r3, [r4, #7]
 80a139a:	6810      	ldr	r0, [r2, #0]
 80a139c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13a0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13a8:	88b8      	ldrh	r0, [r7, #4]
 80a13aa:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a13ac:	4600      	mov	r0, r0
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	e775      	b.n	80a133c <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1450:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1454:	b29b      	uxth	r3, r3
 80a1456:	2b00      	cmp	r3, #0
 80a1458:	f47f aecd 	bne.w	80a11f6 <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a145c:	e645      	b.n	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a145e:	2d03      	cmp	r5, #3
 80a1460:	f000 8128 	beq.w	80a16b4 <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1464:	2b00      	cmp	r3, #0
 80a1466:	f43f ae40 	beq.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a146a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a146e:	2600      	movs	r6, #0
 80a1470:	4a16      	ldr	r2, [pc, #88]	; (80a14cc <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a1472:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1474:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1478:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a147a:	3b03      	subs	r3, #3
 80a147c:	b29b      	uxth	r3, r3
 80a147e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1482:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a1484:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a1486:	b2db      	uxtb	r3, r3
 80a1488:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a148c:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a148e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a1492:	b2db      	uxtb	r3, r3
 80a1494:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1498:	788b      	ldrb	r3, [r1, #2]
 80a149a:	3103      	adds	r1, #3
 80a149c:	b2db      	uxtb	r3, r3
 80a149e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14a2:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a14a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a14aa:	021b      	lsls	r3, r3, #8
 80a14ac:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a14b0:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a14b4:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a14b8:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a14bc:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a14be:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a14c2:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a14c6:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a14ca:	e07a      	b.n	80a15c2 <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a14cc:	20000118 	.word	0x20000118
          mask >>= 1; // Do this task during the long delay of this bit
 80a14d0:	9b04      	ldr	r3, [sp, #16]
 80a14d2:	085b      	lsrs	r3, r3, #1
 80a14d4:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a14d6:	4600      	mov	r0, r0
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a155c:	79e0      	ldrb	r0, [r4, #7]
 80a155e:	6817      	ldr	r7, [r2, #0]
          j++;
 80a1560:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1564:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1568:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a156c:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a156e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a1572:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a1576:	b2db      	uxtb	r3, r3
 80a1578:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a157c:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a157e:	4600      	mov	r0, r0
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
          if(j==24) break;
 80a15a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a15ac:	2b18      	cmp	r3, #24
 80a15ae:	d07a      	beq.n	80a16a6 <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a15b0:	79e3      	ldrb	r3, [r4, #7]
 80a15b2:	6810      	ldr	r0, [r2, #0]
 80a15b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15b8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15c0:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a15c2:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a15c4:	9803      	ldr	r0, [sp, #12]
 80a15c6:	9b04      	ldr	r3, [sp, #16]
 80a15c8:	4218      	tst	r0, r3
 80a15ca:	d181      	bne.n	80a14d0 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a15cc:	4600      	mov	r0, r0
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a15ee:	79e3      	ldrb	r3, [r4, #7]
 80a15f0:	6810      	ldr	r0, [r2, #0]
 80a15f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15fe:	88b8      	ldrh	r0, [r7, #4]
 80a1600:	8318      	strh	r0, [r3, #24]
          j++;
 80a1602:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1606:	3301      	adds	r3, #1
 80a1608:	b2db      	uxtb	r3, r3
 80a160a:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a160e:	9b04      	ldr	r3, [sp, #16]
 80a1610:	085b      	lsrs	r3, r3, #1
 80a1612:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a1614:	4600      	mov	r0, r0
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
          if(j==24) break;
 80a169e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16a2:	2b18      	cmp	r3, #24
 80a16a4:	d184      	bne.n	80a15b0 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a16aa:	b29b      	uxth	r3, r3
 80a16ac:	2b00      	cmp	r3, #0
 80a16ae:	f47f aee0 	bne.w	80a1472 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a16b2:	e51a      	b.n	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16b4:	2b00      	cmp	r3, #0
 80a16b6:	f43f ad18 	beq.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a16ba:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a16be:	2600      	movs	r6, #0
 80a16c0:	4a12      	ldr	r2, [pc, #72]	; (80a170c <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a16c2:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a16c8:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a16ca:	3b03      	subs	r3, #3
 80a16cc:	b29b      	uxth	r3, r3
 80a16ce:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a16d2:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a16d6:	b2db      	uxtb	r3, r3
 80a16d8:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a16dc:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a16e0:	b2db      	uxtb	r3, r3
 80a16e2:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a16e6:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a16ea:	b2db      	uxtb	r3, r3
 80a16ec:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a16f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a16f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a16f8:	021b      	lsls	r3, r3, #8
 80a16fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a16fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1702:	4303      	orrs	r3, r0
 80a1704:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1706:	f88d 6005 	strb.w	r6, [sp, #5]
 80a170a:	e0e0      	b.n	80a18ce <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a170c:	20000118 	.word	0x20000118
          asm volatile(
 80a1710:	4600      	mov	r0, r0
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
 80a1756:	bf00      	nop
 80a1758:	bf00      	nop
 80a175a:	bf00      	nop
 80a175c:	bf00      	nop
 80a175e:	bf00      	nop
 80a1760:	bf00      	nop
 80a1762:	bf00      	nop
 80a1764:	bf00      	nop
 80a1766:	bf00      	nop
 80a1768:	bf00      	nop
 80a176a:	bf00      	nop
 80a176c:	bf00      	nop
 80a176e:	bf00      	nop
 80a1770:	bf00      	nop
 80a1772:	bf00      	nop
 80a1774:	bf00      	nop
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1832:	79e3      	ldrb	r3, [r4, #7]
 80a1834:	6810      	ldr	r0, [r2, #0]
 80a1836:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a183a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a183e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1842:	88b8      	ldrh	r0, [r7, #4]
 80a1844:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1846:	4600      	mov	r0, r0
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
        mask >>= 1;
 80a18b6:	9b04      	ldr	r3, [sp, #16]
 80a18b8:	085b      	lsrs	r3, r3, #1
 80a18ba:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a18bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18c0:	3301      	adds	r3, #1
 80a18c2:	b2db      	uxtb	r3, r3
 80a18c4:	2b17      	cmp	r3, #23
 80a18c6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a18ca:	f200 80eb 	bhi.w	80a1aa4 <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a18ce:	79e3      	ldrb	r3, [r4, #7]
 80a18d0:	6810      	ldr	r0, [r2, #0]
 80a18d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18de:	88b8      	ldrh	r0, [r7, #4]
 80a18e0:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a18e2:	9803      	ldr	r0, [sp, #12]
 80a18e4:	9b04      	ldr	r3, [sp, #16]
 80a18e6:	4218      	tst	r0, r3
 80a18e8:	f47f af12 	bne.w	80a1710 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a18ec:	4600      	mov	r0, r0
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a196e:	79e3      	ldrb	r3, [r4, #7]
 80a1970:	6810      	ldr	r0, [r2, #0]
 80a1972:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1976:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a197a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a197e:	88b8      	ldrh	r0, [r7, #4]
 80a1980:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1982:	4600      	mov	r0, r0
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	e710      	b.n	80a18b6 <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a98:	b29b      	uxth	r3, r3
 80a1a9a:	2b00      	cmp	r3, #0
 80a1a9c:	f47e af96 	bne.w	80a09cc <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1aa0:	f7ff bb23 	b.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1aa4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1aa8:	b29b      	uxth	r3, r3
 80a1aaa:	2b00      	cmp	r3, #0
 80a1aac:	f47f ae09 	bne.w	80a16c2 <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a1ab0:	f7ff bb1b 	b.w	80a10ea <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1ab4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1ab4:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1ab8:	428b      	cmp	r3, r1
 80a1aba:	d92d      	bls.n	80a1b18 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1abc:	7a06      	ldrb	r6, [r0, #8]
 80a1abe:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1ac2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1ac6:	b2d5      	uxtb	r5, r2
 80a1ac8:	b13e      	cbz	r6, 80a1ada <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a1aca:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a1acc:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a1ace:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a1ad0:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1ad4:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1ad8:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1ada:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1ade:	68c7      	ldr	r7, [r0, #12]
 80a1ae0:	f1bc 0f06 	cmp.w	ip, #6
 80a1ae4:	bf0c      	ite	eq
 80a1ae6:	2604      	moveq	r6, #4
 80a1ae8:	2603      	movne	r6, #3
 80a1aea:	434e      	muls	r6, r1
 80a1aec:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1af0:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a1af2:	f1bc 0f06 	cmp.w	ip, #6
 80a1af6:	d81d      	bhi.n	80a1b34 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1af8:	e8df f00c 	tbb	[pc, ip]
 80a1afc:	04081c04 	.word	0x04081c04
 80a1b00:	040f      	.short	0x040f
 80a1b02:	04          	.byte	0x04
 80a1b03:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1b04:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a1b06:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a1b08:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a1b0a:	e005      	b.n	80a1b18 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a1b0c:	2bfe      	cmp	r3, #254	; 0xfe
 80a1b0e:	bf28      	it	cs
 80a1b10:	23fe      	movcs	r3, #254	; 0xfe
 80a1b12:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a1b14:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a1b16:	708c      	strb	r4, [r1, #2]
}
 80a1b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1b1a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1b1c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a1b1e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b20:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a1b22:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b24:	b913      	cbnz	r3, 80a1b2c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a1b26:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b28:	70ca      	strb	r2, [r1, #3]
        } break;
 80a1b2a:	e7f5      	b.n	80a1b18 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1b2c:	435a      	muls	r2, r3
 80a1b2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1b32:	e7f9      	b.n	80a1b28 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a1b34:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1b36:	704c      	strb	r4, [r1, #1]
 80a1b38:	e7e6      	b.n	80a1b08 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a1b3a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1b3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1b3e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1b42:	4770      	bx	lr

080a1b44 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1b44:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1b46:	f000 f8f9 	bl	80a1d3c <HAL_Pin_Map>
 80a1b4a:	4b01      	ldr	r3, [pc, #4]	; (80a1b50 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1b4c:	6018      	str	r0, [r3, #0]
}
 80a1b4e:	bd08      	pop	{r3, pc}
 80a1b50:	20000118 	.word	0x20000118

080a1b54 <_ZN7rgb_lcdD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class rgb_lcd : public Print 
 80a1b54:	4770      	bx	lr

080a1b56 <_ZN7rgb_lcdD0Ev>:
 80a1b56:	b510      	push	{r4, lr}
 80a1b58:	4604      	mov	r4, r0
 80a1b5a:	2110      	movs	r1, #16
 80a1b5c:	f7fe fa9f 	bl	80a009e <_ZdlPvj>
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	bd10      	pop	{r4, pc}

080a1b64 <_Z14i2c_send_byteSPhh>:
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80a1b64:	b570      	push	{r4, r5, r6, lr}
 80a1b66:	460e      	mov	r6, r1
 80a1b68:	4605      	mov	r5, r0
    Wire.beginTransmission(LCD_ADDRESS);        // transmit to device #4
 80a1b6a:	f001 f8b9 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1b6e:	213e      	movs	r1, #62	; 0x3e
 80a1b70:	f000 feda 	bl	80a2928 <_ZN7TwoWire17beginTransmissionEi>
    for(int i=0; i<len; i++)
 80a1b74:	2400      	movs	r4, #0
 80a1b76:	42a6      	cmp	r6, r4
 80a1b78:	dd07      	ble.n	80a1b8a <_Z14i2c_send_byteSPhh+0x26>
    {
        Wire.write(dta[i]);
 80a1b7a:	f001 f8b1 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1b7e:	6803      	ldr	r3, [r0, #0]
 80a1b80:	5d29      	ldrb	r1, [r5, r4]
 80a1b82:	689b      	ldr	r3, [r3, #8]
 80a1b84:	4798      	blx	r3
    for(int i=0; i<len; i++)
 80a1b86:	3401      	adds	r4, #1
 80a1b88:	e7f5      	b.n	80a1b76 <_Z14i2c_send_byteSPhh+0x12>
    }
    Wire.endTransmission();                     // stop transmitting
 80a1b8a:	f001 f8a9 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
}
 80a1b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();                     // stop transmitting
 80a1b92:	f000 bed0 	b.w	80a2936 <_ZN7TwoWire15endTransmissionEv>

080a1b96 <_ZN7rgb_lcd5writeEh>:

// send data
inline size_t rgb_lcd::write(uint8_t value)
{

    unsigned char dta[2] = {0x40, value};
 80a1b96:	2340      	movs	r3, #64	; 0x40
{
 80a1b98:	b507      	push	{r0, r1, r2, lr}
    unsigned char dta[2] = {0x40, value};
 80a1b9a:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1b9e:	a801      	add	r0, sp, #4
 80a1ba0:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x40, value};
 80a1ba2:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1ba6:	f7ff ffdd 	bl	80a1b64 <_Z14i2c_send_byteSPhh>
    return 1; // assume sucess
}
 80a1baa:	2001      	movs	r0, #1
 80a1bac:	b003      	add	sp, #12
 80a1bae:	f85d fb04 	ldr.w	pc, [sp], #4

080a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>:
    unsigned char dta[2] = {0x80, value};
 80a1bb2:	2380      	movs	r3, #128	; 0x80
inline void rgb_lcd::command(uint8_t value)
 80a1bb4:	b507      	push	{r0, r1, r2, lr}
    i2c_send_byteS(dta, 2);
 80a1bb6:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, value};
 80a1bb8:	f88d 0005 	strb.w	r0, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1bbc:	a801      	add	r0, sp, #4
    unsigned char dta[2] = {0x80, value};
 80a1bbe:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1bc2:	f7ff ffcf 	bl	80a1b64 <_Z14i2c_send_byteSPhh>
}
 80a1bc6:	b003      	add	sp, #12
 80a1bc8:	f85d fb04 	ldr.w	pc, [sp], #4

080a1bcc <_ZN7rgb_lcdC1Ev>:
    Print() : write_error(0) {}
 80a1bcc:	2200      	movs	r2, #0
 80a1bce:	6042      	str	r2, [r0, #4]
rgb_lcd::rgb_lcd()
 80a1bd0:	4a01      	ldr	r2, [pc, #4]	; (80a1bd8 <_ZN7rgb_lcdC1Ev+0xc>)
 80a1bd2:	6002      	str	r2, [r0, #0]
}
 80a1bd4:	4770      	bx	lr
 80a1bd6:	bf00      	nop
 80a1bd8:	080a3bbc 	.word	0x080a3bbc

080a1bdc <_ZN7rgb_lcd5clearEv>:
{
 80a1bdc:	b508      	push	{r3, lr}
    command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80a1bde:	2001      	movs	r0, #1
 80a1be0:	f7ff ffe7 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
}
 80a1be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1be8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a1bec:	f000 b8e6 	b.w	80a1dbc <HAL_Delay_Microseconds>

080a1bf0 <_ZN7rgb_lcd9setCursorEhh>:
{
 80a1bf0:	b507      	push	{r0, r1, r2, lr}
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1bf2:	b96a      	cbnz	r2, 80a1c10 <_ZN7rgb_lcd9setCursorEhh+0x20>
 80a1bf4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    unsigned char dta[2] = {0x80, col};
 80a1bf8:	2380      	movs	r3, #128	; 0x80
 80a1bfa:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1bfe:	a801      	add	r0, sp, #4
 80a1c00:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, col};
 80a1c02:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1c06:	f7ff ffad 	bl	80a1b64 <_Z14i2c_send_byteSPhh>
}
 80a1c0a:	b003      	add	sp, #12
 80a1c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1c10:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80a1c14:	e7f0      	b.n	80a1bf8 <_ZN7rgb_lcd9setCursorEhh+0x8>

080a1c16 <_ZN7rgb_lcd7displayEv>:
    _displaycontrol |= LCD_DISPLAYON;
 80a1c16:	7a43      	ldrb	r3, [r0, #9]
 80a1c18:	f043 0204 	orr.w	r2, r3, #4
 80a1c1c:	7242      	strb	r2, [r0, #9]
    command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a1c1e:	f043 000c 	orr.w	r0, r3, #12
 80a1c22:	f7ff bfc6 	b.w	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>

080a1c26 <_ZN7rgb_lcd6setRegEhh>:

void rgb_lcd::setReg(unsigned char addr, unsigned char dta)
{
 80a1c26:	b538      	push	{r3, r4, r5, lr}
 80a1c28:	4614      	mov	r4, r2
 80a1c2a:	460d      	mov	r5, r1
    Wire.beginTransmission(RGB_ADDRESS); // transmit to device #4
 80a1c2c:	f001 f858 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1c30:	2162      	movs	r1, #98	; 0x62
 80a1c32:	f000 fe79 	bl	80a2928 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(addr);
 80a1c36:	f001 f853 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1c3a:	6803      	ldr	r3, [r0, #0]
 80a1c3c:	4629      	mov	r1, r5
 80a1c3e:	689b      	ldr	r3, [r3, #8]
 80a1c40:	4798      	blx	r3
    Wire.write(dta);
 80a1c42:	f001 f84d 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1c46:	6803      	ldr	r3, [r0, #0]
 80a1c48:	4621      	mov	r1, r4
 80a1c4a:	689b      	ldr	r3, [r3, #8]
 80a1c4c:	4798      	blx	r3
    Wire.endTransmission();    // stop transmitting
 80a1c4e:	f001 f847 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
}
 80a1c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();    // stop transmitting
 80a1c56:	f000 be6e 	b.w	80a2936 <_ZN7TwoWire15endTransmissionEv>

080a1c5a <_ZN7rgb_lcd6setRGBEhhh>:

void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80a1c5a:	b570      	push	{r4, r5, r6, lr}
 80a1c5c:	4604      	mov	r4, r0
 80a1c5e:	4616      	mov	r6, r2
 80a1c60:	461d      	mov	r5, r3
    setReg(REG_RED, r);
 80a1c62:	460a      	mov	r2, r1
 80a1c64:	2104      	movs	r1, #4
 80a1c66:	f7ff ffde 	bl	80a1c26 <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_GREEN, g);
 80a1c6a:	4632      	mov	r2, r6
 80a1c6c:	4620      	mov	r0, r4
 80a1c6e:	2103      	movs	r1, #3
 80a1c70:	f7ff ffd9 	bl	80a1c26 <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_BLUE, b);
 80a1c74:	462a      	mov	r2, r5
 80a1c76:	4620      	mov	r0, r4
}
 80a1c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setReg(REG_BLUE, b);
 80a1c7c:	2102      	movs	r1, #2
 80a1c7e:	f7ff bfd2 	b.w	80a1c26 <_ZN7rgb_lcd6setRegEhh>

080a1c82 <_ZN7rgb_lcd5beginEhhh>:
{
 80a1c82:	b570      	push	{r4, r5, r6, lr}
 80a1c84:	4615      	mov	r5, r2
 80a1c86:	4604      	mov	r4, r0
 80a1c88:	461e      	mov	r6, r3
    Wire.begin();
 80a1c8a:	f001 f829 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a1c8e:	f000 fe41 	bl	80a2914 <_ZN7TwoWire5beginEv>
    if (lines > 1) {
 80a1c92:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_2LINE;
 80a1c94:	bf88      	it	hi
 80a1c96:	7a23      	ldrbhi	r3, [r4, #8]
    _numlines = lines;
 80a1c98:	7325      	strb	r5, [r4, #12]
        _displayfunction |= LCD_2LINE;
 80a1c9a:	bf84      	itt	hi
 80a1c9c:	f043 0308 	orrhi.w	r3, r3, #8
 80a1ca0:	7223      	strbhi	r3, [r4, #8]
    _currline = 0;
 80a1ca2:	2300      	movs	r3, #0
 80a1ca4:	7363      	strb	r3, [r4, #13]
    if ((dotsize != 0) && (lines == 1)) {
 80a1ca6:	b12e      	cbz	r6, 80a1cb4 <_ZN7rgb_lcd5beginEhhh+0x32>
 80a1ca8:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_5x10DOTS;
 80a1caa:	bf02      	ittt	eq
 80a1cac:	7a23      	ldrbeq	r3, [r4, #8]
 80a1cae:	f043 0304 	orreq.w	r3, r3, #4
 80a1cb2:	7223      	strbeq	r3, [r4, #8]
 80a1cb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80a1cb8:	f000 f880 	bl	80a1dbc <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1cbc:	7a20      	ldrb	r0, [r4, #8]
 80a1cbe:	f040 0020 	orr.w	r0, r0, #32
 80a1cc2:	f7ff ff76 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1cc6:	f241 1094 	movw	r0, #4500	; 0x1194
 80a1cca:	f000 f877 	bl	80a1dbc <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1cce:	7a20      	ldrb	r0, [r4, #8]
 80a1cd0:	f040 0020 	orr.w	r0, r0, #32
 80a1cd4:	f7ff ff6d 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1cd8:	2096      	movs	r0, #150	; 0x96
 80a1cda:	f000 f86f 	bl	80a1dbc <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1cde:	7a20      	ldrb	r0, [r4, #8]
 80a1ce0:	f040 0020 	orr.w	r0, r0, #32
 80a1ce4:	f7ff ff65 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1ce8:	7a20      	ldrb	r0, [r4, #8]
 80a1cea:	f040 0020 	orr.w	r0, r0, #32
 80a1cee:	f7ff ff60 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1cf2:	2304      	movs	r3, #4
    display();
 80a1cf4:	4620      	mov	r0, r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1cf6:	7263      	strb	r3, [r4, #9]
    display();
 80a1cf8:	f7ff ff8d 	bl	80a1c16 <_ZN7rgb_lcd7displayEv>
    clear();
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	f7ff ff6d 	bl	80a1bdc <_ZN7rgb_lcd5clearEv>
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1d02:	2302      	movs	r3, #2
    command(LCD_ENTRYMODESET | _displaymode);
 80a1d04:	2006      	movs	r0, #6
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1d06:	72a3      	strb	r3, [r4, #10]
    command(LCD_ENTRYMODESET | _displaymode);
 80a1d08:	f7ff ff53 	bl	80a1bb2 <_ZN7rgb_lcd7commandEh.constprop.0>
    setReg(0, 0);
 80a1d0c:	2200      	movs	r2, #0
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	4611      	mov	r1, r2
 80a1d12:	f7ff ff88 	bl	80a1c26 <_ZN7rgb_lcd6setRegEhh>
    setReg(1, 0);
 80a1d16:	4620      	mov	r0, r4
 80a1d18:	2200      	movs	r2, #0
 80a1d1a:	2101      	movs	r1, #1
 80a1d1c:	f7ff ff83 	bl	80a1c26 <_ZN7rgb_lcd6setRegEhh>
    setReg(0x08, 0xAA);     // all led control by pwm
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	22aa      	movs	r2, #170	; 0xaa
 80a1d24:	2108      	movs	r1, #8
 80a1d26:	f7ff ff7e 	bl	80a1c26 <_ZN7rgb_lcd6setRegEhh>
  void setRGB(unsigned char r, unsigned char g, unsigned char b);               // set rgb
  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      // set pwm
  
  void setColor(unsigned char color);
  void setColorAll(){setRGB(0, 0, 0);}
  void setColorWhite(){setRGB(255, 255, 255);}
 80a1d2a:	23ff      	movs	r3, #255	; 0xff
 80a1d2c:	4620      	mov	r0, r4
}
 80a1d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1d32:	461a      	mov	r2, r3
 80a1d34:	4619      	mov	r1, r3
 80a1d36:	f7ff bf90 	b.w	80a1c5a <_ZN7rgb_lcd6setRGBEhhh>
	...

080a1d3c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1d3c:	b508      	push	{r3, lr}
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <HAL_Pin_Map+0xc>)
 80a1d40:	681b      	ldr	r3, [r3, #0]
 80a1d42:	681b      	ldr	r3, [r3, #0]
 80a1d44:	9301      	str	r3, [sp, #4]
 80a1d46:	bd08      	pop	{r3, pc}
 80a1d48:	080601b0 	.word	0x080601b0

080a1d4c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1d4c:	b508      	push	{r3, lr}
 80a1d4e:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <HAL_Validate_Pin_Function+0xc>)
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	685b      	ldr	r3, [r3, #4]
 80a1d54:	9301      	str	r3, [sp, #4]
 80a1d56:	bd08      	pop	{r3, pc}
 80a1d58:	080601b0 	.word	0x080601b0

080a1d5c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1d5c:	b508      	push	{r3, lr}
 80a1d5e:	4b02      	ldr	r3, [pc, #8]	; (80a1d68 <HAL_Pin_Mode+0xc>)
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	689b      	ldr	r3, [r3, #8]
 80a1d64:	9301      	str	r3, [sp, #4]
 80a1d66:	bd08      	pop	{r3, pc}
 80a1d68:	080601b0 	.word	0x080601b0

080a1d6c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1d6c:	b508      	push	{r3, lr}
 80a1d6e:	4b02      	ldr	r3, [pc, #8]	; (80a1d78 <HAL_Get_Pin_Mode+0xc>)
 80a1d70:	681b      	ldr	r3, [r3, #0]
 80a1d72:	68db      	ldr	r3, [r3, #12]
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	bd08      	pop	{r3, pc}
 80a1d78:	080601b0 	.word	0x080601b0

080a1d7c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1d7c:	b508      	push	{r3, lr}
 80a1d7e:	4b02      	ldr	r3, [pc, #8]	; (80a1d88 <HAL_GPIO_Write+0xc>)
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	691b      	ldr	r3, [r3, #16]
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	bd08      	pop	{r3, pc}
 80a1d88:	080601b0 	.word	0x080601b0

080a1d8c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1d8c:	b508      	push	{r3, lr}
 80a1d8e:	4b02      	ldr	r3, [pc, #8]	; (80a1d98 <HAL_GPIO_Read+0xc>)
 80a1d90:	681b      	ldr	r3, [r3, #0]
 80a1d92:	695b      	ldr	r3, [r3, #20]
 80a1d94:	9301      	str	r3, [sp, #4]
 80a1d96:	bd08      	pop	{r3, pc}
 80a1d98:	080601b0 	.word	0x080601b0

080a1d9c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a1d9c:	b508      	push	{r3, lr}
 80a1d9e:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <hal_adc_read+0xc>)
 80a1da0:	681b      	ldr	r3, [r3, #0]
 80a1da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1da4:	9301      	str	r3, [sp, #4]
 80a1da6:	bd08      	pop	{r3, pc}
 80a1da8:	080601b0 	.word	0x080601b0

080a1dac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1dac:	b508      	push	{r3, lr}
 80a1dae:	4b02      	ldr	r3, [pc, #8]	; (80a1db8 <HAL_RNG_GetRandomNumber+0xc>)
 80a1db0:	681b      	ldr	r3, [r3, #0]
 80a1db2:	685b      	ldr	r3, [r3, #4]
 80a1db4:	9301      	str	r3, [sp, #4]
 80a1db6:	bd08      	pop	{r3, pc}
 80a1db8:	0806019c 	.word	0x0806019c

080a1dbc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1dbc:	b508      	push	{r3, lr}
 80a1dbe:	4b02      	ldr	r3, [pc, #8]	; (80a1dc8 <HAL_Delay_Microseconds+0xc>)
 80a1dc0:	681b      	ldr	r3, [r3, #0]
 80a1dc2:	68db      	ldr	r3, [r3, #12]
 80a1dc4:	9301      	str	r3, [sp, #4]
 80a1dc6:	bd08      	pop	{r3, pc}
 80a1dc8:	0806019c 	.word	0x0806019c

080a1dcc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1dcc:	b508      	push	{r3, lr}
 80a1dce:	4b02      	ldr	r3, [pc, #8]	; (80a1dd8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1dd0:	681b      	ldr	r3, [r3, #0]
 80a1dd2:	691b      	ldr	r3, [r3, #16]
 80a1dd4:	9301      	str	r3, [sp, #4]
 80a1dd6:	bd08      	pop	{r3, pc}
 80a1dd8:	0806019c 	.word	0x0806019c

080a1ddc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1ddc:	b508      	push	{r3, lr}
 80a1dde:	4b02      	ldr	r3, [pc, #8]	; (80a1de8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1de0:	681b      	ldr	r3, [r3, #0]
 80a1de2:	695b      	ldr	r3, [r3, #20]
 80a1de4:	9301      	str	r3, [sp, #4]
 80a1de6:	bd08      	pop	{r3, pc}
 80a1de8:	0806019c 	.word	0x0806019c

080a1dec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1dec:	b508      	push	{r3, lr}
 80a1dee:	4b02      	ldr	r3, [pc, #8]	; (80a1df8 <os_mutex_recursive_create+0xc>)
 80a1df0:	681b      	ldr	r3, [r3, #0]
 80a1df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1df4:	9301      	str	r3, [sp, #4]
 80a1df6:	bd08      	pop	{r3, pc}
 80a1df8:	080601d0 	.word	0x080601d0

080a1dfc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1dfc:	b508      	push	{r3, lr}
 80a1dfe:	4b02      	ldr	r3, [pc, #8]	; (80a1e08 <os_mutex_recursive_destroy+0xc>)
 80a1e00:	681b      	ldr	r3, [r3, #0]
 80a1e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1e04:	9301      	str	r3, [sp, #4]
 80a1e06:	bd08      	pop	{r3, pc}
 80a1e08:	080601d0 	.word	0x080601d0

080a1e0c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1e0c:	b508      	push	{r3, lr}
 80a1e0e:	4b02      	ldr	r3, [pc, #8]	; (80a1e18 <hal_usart_write+0xc>)
 80a1e10:	681b      	ldr	r3, [r3, #0]
 80a1e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e14:	9301      	str	r3, [sp, #4]
 80a1e16:	bd08      	pop	{r3, pc}
 80a1e18:	080601c4 	.word	0x080601c4

080a1e1c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1e1c:	b508      	push	{r3, lr}
 80a1e1e:	4b02      	ldr	r3, [pc, #8]	; (80a1e28 <hal_usart_available+0xc>)
 80a1e20:	681b      	ldr	r3, [r3, #0]
 80a1e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1e24:	9301      	str	r3, [sp, #4]
 80a1e26:	bd08      	pop	{r3, pc}
 80a1e28:	080601c4 	.word	0x080601c4

080a1e2c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1e2c:	b508      	push	{r3, lr}
 80a1e2e:	4b02      	ldr	r3, [pc, #8]	; (80a1e38 <hal_usart_read+0xc>)
 80a1e30:	681b      	ldr	r3, [r3, #0]
 80a1e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e34:	9301      	str	r3, [sp, #4]
 80a1e36:	bd08      	pop	{r3, pc}
 80a1e38:	080601c4 	.word	0x080601c4

080a1e3c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1e3c:	b508      	push	{r3, lr}
 80a1e3e:	4b02      	ldr	r3, [pc, #8]	; (80a1e48 <hal_usart_peek+0xc>)
 80a1e40:	681b      	ldr	r3, [r3, #0]
 80a1e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e44:	9301      	str	r3, [sp, #4]
 80a1e46:	bd08      	pop	{r3, pc}
 80a1e48:	080601c4 	.word	0x080601c4

080a1e4c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1e4c:	b508      	push	{r3, lr}
 80a1e4e:	4b02      	ldr	r3, [pc, #8]	; (80a1e58 <hal_usart_flush+0xc>)
 80a1e50:	681b      	ldr	r3, [r3, #0]
 80a1e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1e54:	9301      	str	r3, [sp, #4]
 80a1e56:	bd08      	pop	{r3, pc}
 80a1e58:	080601c4 	.word	0x080601c4

080a1e5c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1e5c:	b508      	push	{r3, lr}
 80a1e5e:	4b02      	ldr	r3, [pc, #8]	; (80a1e68 <hal_usart_is_enabled+0xc>)
 80a1e60:	681b      	ldr	r3, [r3, #0]
 80a1e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1e64:	9301      	str	r3, [sp, #4]
 80a1e66:	bd08      	pop	{r3, pc}
 80a1e68:	080601c4 	.word	0x080601c4

080a1e6c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1e6c:	b508      	push	{r3, lr}
 80a1e6e:	4b02      	ldr	r3, [pc, #8]	; (80a1e78 <hal_usart_available_data_for_write+0xc>)
 80a1e70:	681b      	ldr	r3, [r3, #0]
 80a1e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1e74:	9301      	str	r3, [sp, #4]
 80a1e76:	bd08      	pop	{r3, pc}
 80a1e78:	080601c4 	.word	0x080601c4

080a1e7c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1e7c:	b508      	push	{r3, lr}
 80a1e7e:	4b02      	ldr	r3, [pc, #8]	; (80a1e88 <hal_usart_init_ex+0xc>)
 80a1e80:	681b      	ldr	r3, [r3, #0]
 80a1e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1e84:	9301      	str	r3, [sp, #4]
 80a1e86:	bd08      	pop	{r3, pc}
 80a1e88:	080601c4 	.word	0x080601c4

080a1e8c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1e8c:	b508      	push	{r3, lr}
 80a1e8e:	4b02      	ldr	r3, [pc, #8]	; (80a1e98 <hal_i2c_begin+0xc>)
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1e94:	9301      	str	r3, [sp, #4]
 80a1e96:	bd08      	pop	{r3, pc}
 80a1e98:	080601ac 	.word	0x080601ac

080a1e9c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1e9c:	b508      	push	{r3, lr}
 80a1e9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ea8 <hal_i2c_begin_transmission+0xc>)
 80a1ea0:	681b      	ldr	r3, [r3, #0]
 80a1ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1ea4:	9301      	str	r3, [sp, #4]
 80a1ea6:	bd08      	pop	{r3, pc}
 80a1ea8:	080601ac 	.word	0x080601ac

080a1eac <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1eac:	b508      	push	{r3, lr}
 80a1eae:	4b02      	ldr	r3, [pc, #8]	; (80a1eb8 <hal_i2c_end_transmission+0xc>)
 80a1eb0:	681b      	ldr	r3, [r3, #0]
 80a1eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1eb4:	9301      	str	r3, [sp, #4]
 80a1eb6:	bd08      	pop	{r3, pc}
 80a1eb8:	080601ac 	.word	0x080601ac

080a1ebc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1ebc:	b508      	push	{r3, lr}
 80a1ebe:	4b02      	ldr	r3, [pc, #8]	; (80a1ec8 <hal_i2c_write+0xc>)
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1ec4:	9301      	str	r3, [sp, #4]
 80a1ec6:	bd08      	pop	{r3, pc}
 80a1ec8:	080601ac 	.word	0x080601ac

080a1ecc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1ecc:	b508      	push	{r3, lr}
 80a1ece:	4b02      	ldr	r3, [pc, #8]	; (80a1ed8 <hal_i2c_available+0xc>)
 80a1ed0:	681b      	ldr	r3, [r3, #0]
 80a1ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1ed4:	9301      	str	r3, [sp, #4]
 80a1ed6:	bd08      	pop	{r3, pc}
 80a1ed8:	080601ac 	.word	0x080601ac

080a1edc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1edc:	b508      	push	{r3, lr}
 80a1ede:	4b02      	ldr	r3, [pc, #8]	; (80a1ee8 <hal_i2c_read+0xc>)
 80a1ee0:	681b      	ldr	r3, [r3, #0]
 80a1ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1ee4:	9301      	str	r3, [sp, #4]
 80a1ee6:	bd08      	pop	{r3, pc}
 80a1ee8:	080601ac 	.word	0x080601ac

080a1eec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1eec:	b508      	push	{r3, lr}
 80a1eee:	4b02      	ldr	r3, [pc, #8]	; (80a1ef8 <hal_i2c_peek+0xc>)
 80a1ef0:	681b      	ldr	r3, [r3, #0]
 80a1ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1ef4:	9301      	str	r3, [sp, #4]
 80a1ef6:	bd08      	pop	{r3, pc}
 80a1ef8:	080601ac 	.word	0x080601ac

080a1efc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1efc:	b508      	push	{r3, lr}
 80a1efe:	4b02      	ldr	r3, [pc, #8]	; (80a1f08 <hal_i2c_flush+0xc>)
 80a1f00:	681b      	ldr	r3, [r3, #0]
 80a1f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1f04:	9301      	str	r3, [sp, #4]
 80a1f06:	bd08      	pop	{r3, pc}
 80a1f08:	080601ac 	.word	0x080601ac

080a1f0c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1f0c:	b508      	push	{r3, lr}
 80a1f0e:	4b02      	ldr	r3, [pc, #8]	; (80a1f18 <hal_i2c_is_enabled+0xc>)
 80a1f10:	681b      	ldr	r3, [r3, #0]
 80a1f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1f14:	9301      	str	r3, [sp, #4]
 80a1f16:	bd08      	pop	{r3, pc}
 80a1f18:	080601ac 	.word	0x080601ac

080a1f1c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1f1c:	b508      	push	{r3, lr}
 80a1f1e:	4b03      	ldr	r3, [pc, #12]	; (80a1f2c <hal_i2c_init+0x10>)
 80a1f20:	681b      	ldr	r3, [r3, #0]
 80a1f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1f26:	9301      	str	r3, [sp, #4]
 80a1f28:	bd08      	pop	{r3, pc}
 80a1f2a:	0000      	.short	0x0000
 80a1f2c:	080601ac 	.word	0x080601ac

080a1f30 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1f30:	b508      	push	{r3, lr}
 80a1f32:	4b02      	ldr	r3, [pc, #8]	; (80a1f3c <hal_spi_init+0xc>)
 80a1f34:	681b      	ldr	r3, [r3, #0]
 80a1f36:	69db      	ldr	r3, [r3, #28]
 80a1f38:	9301      	str	r3, [sp, #4]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	080601b4 	.word	0x080601b4

080a1f40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1f40:	b508      	push	{r3, lr}
 80a1f42:	4b02      	ldr	r3, [pc, #8]	; (80a1f4c <hal_spi_is_enabled+0xc>)
 80a1f44:	681b      	ldr	r3, [r3, #0]
 80a1f46:	6a1b      	ldr	r3, [r3, #32]
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	bd08      	pop	{r3, pc}
 80a1f4c:	080601b4 	.word	0x080601b4

080a1f50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1f50:	b508      	push	{r3, lr}
 80a1f52:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <HAL_USB_USART_Init+0xc>)
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	681b      	ldr	r3, [r3, #0]
 80a1f58:	9301      	str	r3, [sp, #4]
 80a1f5a:	bd08      	pop	{r3, pc}
 80a1f5c:	080601d8 	.word	0x080601d8

080a1f60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	4b02      	ldr	r3, [pc, #8]	; (80a1f6c <HAL_USB_USART_Begin+0xc>)
 80a1f64:	681b      	ldr	r3, [r3, #0]
 80a1f66:	685b      	ldr	r3, [r3, #4]
 80a1f68:	9301      	str	r3, [sp, #4]
 80a1f6a:	bd08      	pop	{r3, pc}
 80a1f6c:	080601d8 	.word	0x080601d8

080a1f70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <HAL_USB_USART_Available_Data+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	691b      	ldr	r3, [r3, #16]
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601d8 	.word	0x080601d8

080a1f80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	695b      	ldr	r3, [r3, #20]
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601d8 	.word	0x080601d8

080a1f90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <HAL_USB_USART_Receive_Data+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	699b      	ldr	r3, [r3, #24]
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601d8 	.word	0x080601d8

080a1fa0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b02      	ldr	r3, [pc, #8]	; (80a1fac <HAL_USB_USART_Send_Data+0xc>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	69db      	ldr	r3, [r3, #28]
 80a1fa8:	9301      	str	r3, [sp, #4]
 80a1faa:	bd08      	pop	{r3, pc}
 80a1fac:	080601d8 	.word	0x080601d8

080a1fb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1fb0:	b508      	push	{r3, lr}
 80a1fb2:	4b02      	ldr	r3, [pc, #8]	; (80a1fbc <HAL_USB_USART_Flush_Data+0xc>)
 80a1fb4:	681b      	ldr	r3, [r3, #0]
 80a1fb6:	6a1b      	ldr	r3, [r3, #32]
 80a1fb8:	9301      	str	r3, [sp, #4]
 80a1fba:	bd08      	pop	{r3, pc}
 80a1fbc:	080601d8 	.word	0x080601d8

080a1fc0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1fc0:	b508      	push	{r3, lr}
 80a1fc2:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <inet_gethostbyname+0xc>)
 80a1fc4:	681b      	ldr	r3, [r3, #0]
 80a1fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1fc8:	9301      	str	r3, [sp, #4]
 80a1fca:	bd08      	pop	{r3, pc}
 80a1fcc:	080601c0 	.word	0x080601c0

080a1fd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <set_system_mode+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	685b      	ldr	r3, [r3, #4]
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	080601a4 	.word	0x080601a4

080a1fe0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <system_delay_ms+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	695b      	ldr	r3, [r3, #20]
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	080601a4 	.word	0x080601a4

080a1ff0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b03      	ldr	r3, [pc, #12]	; (80a2000 <system_ctrl_set_app_request_handler+0x10>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1ffa:	9301      	str	r3, [sp, #4]
 80a1ffc:	bd08      	pop	{r3, pc}
 80a1ffe:	0000      	.short	0x0000
 80a2000:	080601a4 	.word	0x080601a4

080a2004 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2004:	b508      	push	{r3, lr}
 80a2006:	4b03      	ldr	r3, [pc, #12]	; (80a2014 <system_ctrl_set_result+0x10>)
 80a2008:	681b      	ldr	r3, [r3, #0]
 80a200a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a200e:	9301      	str	r3, [sp, #4]
 80a2010:	bd08      	pop	{r3, pc}
 80a2012:	0000      	.short	0x0000
 80a2014:	080601a4 	.word	0x080601a4

080a2018 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2018:	b508      	push	{r3, lr}
 80a201a:	4b02      	ldr	r3, [pc, #8]	; (80a2024 <network_connect+0xc>)
 80a201c:	681b      	ldr	r3, [r3, #0]
 80a201e:	685b      	ldr	r3, [r3, #4]
 80a2020:	9301      	str	r3, [sp, #4]
 80a2022:	bd08      	pop	{r3, pc}
 80a2024:	080601c8 	.word	0x080601c8

080a2028 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2028:	b508      	push	{r3, lr}
 80a202a:	4b02      	ldr	r3, [pc, #8]	; (80a2034 <network_connecting+0xc>)
 80a202c:	681b      	ldr	r3, [r3, #0]
 80a202e:	689b      	ldr	r3, [r3, #8]
 80a2030:	9301      	str	r3, [sp, #4]
 80a2032:	bd08      	pop	{r3, pc}
 80a2034:	080601c8 	.word	0x080601c8

080a2038 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2038:	b508      	push	{r3, lr}
 80a203a:	4b02      	ldr	r3, [pc, #8]	; (80a2044 <network_disconnect+0xc>)
 80a203c:	681b      	ldr	r3, [r3, #0]
 80a203e:	68db      	ldr	r3, [r3, #12]
 80a2040:	9301      	str	r3, [sp, #4]
 80a2042:	bd08      	pop	{r3, pc}
 80a2044:	080601c8 	.word	0x080601c8

080a2048 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2048:	b508      	push	{r3, lr}
 80a204a:	4b02      	ldr	r3, [pc, #8]	; (80a2054 <network_ready+0xc>)
 80a204c:	681b      	ldr	r3, [r3, #0]
 80a204e:	691b      	ldr	r3, [r3, #16]
 80a2050:	9301      	str	r3, [sp, #4]
 80a2052:	bd08      	pop	{r3, pc}
 80a2054:	080601c8 	.word	0x080601c8

080a2058 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2058:	b508      	push	{r3, lr}
 80a205a:	4b02      	ldr	r3, [pc, #8]	; (80a2064 <network_on+0xc>)
 80a205c:	681b      	ldr	r3, [r3, #0]
 80a205e:	695b      	ldr	r3, [r3, #20]
 80a2060:	9301      	str	r3, [sp, #4]
 80a2062:	bd08      	pop	{r3, pc}
 80a2064:	080601c8 	.word	0x080601c8

080a2068 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2068:	b508      	push	{r3, lr}
 80a206a:	4b02      	ldr	r3, [pc, #8]	; (80a2074 <network_off+0xc>)
 80a206c:	681b      	ldr	r3, [r3, #0]
 80a206e:	699b      	ldr	r3, [r3, #24]
 80a2070:	9301      	str	r3, [sp, #4]
 80a2072:	bd08      	pop	{r3, pc}
 80a2074:	080601c8 	.word	0x080601c8

080a2078 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2078:	b508      	push	{r3, lr}
 80a207a:	4b02      	ldr	r3, [pc, #8]	; (80a2084 <network_listen+0xc>)
 80a207c:	681b      	ldr	r3, [r3, #0]
 80a207e:	69db      	ldr	r3, [r3, #28]
 80a2080:	9301      	str	r3, [sp, #4]
 80a2082:	bd08      	pop	{r3, pc}
 80a2084:	080601c8 	.word	0x080601c8

080a2088 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2088:	b508      	push	{r3, lr}
 80a208a:	4b02      	ldr	r3, [pc, #8]	; (80a2094 <network_listening+0xc>)
 80a208c:	681b      	ldr	r3, [r3, #0]
 80a208e:	6a1b      	ldr	r3, [r3, #32]
 80a2090:	9301      	str	r3, [sp, #4]
 80a2092:	bd08      	pop	{r3, pc}
 80a2094:	080601c8 	.word	0x080601c8

080a2098 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2098:	b508      	push	{r3, lr}
 80a209a:	4b02      	ldr	r3, [pc, #8]	; (80a20a4 <network_set_listen_timeout+0xc>)
 80a209c:	681b      	ldr	r3, [r3, #0]
 80a209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a20a0:	9301      	str	r3, [sp, #4]
 80a20a2:	bd08      	pop	{r3, pc}
 80a20a4:	080601c8 	.word	0x080601c8

080a20a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a20a8:	b508      	push	{r3, lr}
 80a20aa:	4b02      	ldr	r3, [pc, #8]	; (80a20b4 <network_get_listen_timeout+0xc>)
 80a20ac:	681b      	ldr	r3, [r3, #0]
 80a20ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a20b0:	9301      	str	r3, [sp, #4]
 80a20b2:	bd08      	pop	{r3, pc}
 80a20b4:	080601c8 	.word	0x080601c8

080a20b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a20b8:	b508      	push	{r3, lr}
 80a20ba:	4b02      	ldr	r3, [pc, #8]	; (80a20c4 <network_is_on+0xc>)
 80a20bc:	681b      	ldr	r3, [r3, #0]
 80a20be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a20c0:	9301      	str	r3, [sp, #4]
 80a20c2:	bd08      	pop	{r3, pc}
 80a20c4:	080601c8 	.word	0x080601c8

080a20c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a20c8:	b508      	push	{r3, lr}
 80a20ca:	4b02      	ldr	r3, [pc, #8]	; (80a20d4 <network_is_off+0xc>)
 80a20cc:	681b      	ldr	r3, [r3, #0]
 80a20ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a20d0:	9301      	str	r3, [sp, #4]
 80a20d2:	bd08      	pop	{r3, pc}
 80a20d4:	080601c8 	.word	0x080601c8

080a20d8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a20d8:	b508      	push	{r3, lr}
 80a20da:	4b02      	ldr	r3, [pc, #8]	; (80a20e4 <spark_variable+0xc>)
 80a20dc:	681b      	ldr	r3, [r3, #0]
 80a20de:	681b      	ldr	r3, [r3, #0]
 80a20e0:	9301      	str	r3, [sp, #4]
 80a20e2:	bd08      	pop	{r3, pc}
 80a20e4:	080601cc 	.word	0x080601cc

080a20e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a20e8:	b508      	push	{r3, lr}
 80a20ea:	4b02      	ldr	r3, [pc, #8]	; (80a20f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a20ec:	681b      	ldr	r3, [r3, #0]
 80a20ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a20f0:	9301      	str	r3, [sp, #4]
 80a20f2:	bd08      	pop	{r3, pc}
 80a20f4:	080601cc 	.word	0x080601cc

080a20f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a20f8:	b508      	push	{r3, lr}
 80a20fa:	4b02      	ldr	r3, [pc, #8]	; (80a2104 <malloc+0xc>)
 80a20fc:	681b      	ldr	r3, [r3, #0]
 80a20fe:	681b      	ldr	r3, [r3, #0]
 80a2100:	9301      	str	r3, [sp, #4]
 80a2102:	bd08      	pop	{r3, pc}
 80a2104:	080601a0 	.word	0x080601a0

080a2108 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2108:	b508      	push	{r3, lr}
 80a210a:	4b02      	ldr	r3, [pc, #8]	; (80a2114 <free+0xc>)
 80a210c:	681b      	ldr	r3, [r3, #0]
 80a210e:	685b      	ldr	r3, [r3, #4]
 80a2110:	9301      	str	r3, [sp, #4]
 80a2112:	bd08      	pop	{r3, pc}
 80a2114:	080601a0 	.word	0x080601a0

080a2118 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a2118:	b508      	push	{r3, lr}
 80a211a:	4b02      	ldr	r3, [pc, #8]	; (80a2124 <__assert_func+0xc>)
 80a211c:	681b      	ldr	r3, [r3, #0]
 80a211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2120:	9301      	str	r3, [sp, #4]
 80a2122:	bd08      	pop	{r3, pc}
 80a2124:	080601a0 	.word	0x080601a0

080a2128 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2128:	b508      	push	{r3, lr}
 80a212a:	4b02      	ldr	r3, [pc, #8]	; (80a2134 <newlib_impure_ptr_callback+0xc>)
 80a212c:	681b      	ldr	r3, [r3, #0]
 80a212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2130:	9301      	str	r3, [sp, #4]
 80a2132:	bd08      	pop	{r3, pc}
 80a2134:	080601a0 	.word	0x080601a0

080a2138 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2138:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a213a:	2600      	movs	r6, #0
 80a213c:	4604      	mov	r4, r0
 80a213e:	460d      	mov	r5, r1
 80a2140:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2144:	f7ff fe52 	bl	80a1dec <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2148:	4628      	mov	r0, r5
    _spi = spi;
 80a214a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a214c:	f7ff fef0 	bl	80a1f30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2150:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2152:	6066      	str	r6, [r4, #4]
}
 80a2154:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2158 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2158:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a215a:	2000      	movs	r0, #0
 80a215c:	4b04      	ldr	r3, [pc, #16]	; (80a2170 <_GLOBAL__sub_I_System+0x18>)
 80a215e:	601a      	str	r2, [r3, #0]
 80a2160:	4b04      	ldr	r3, [pc, #16]	; (80a2174 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2162:	4a05      	ldr	r2, [pc, #20]	; (80a2178 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2164:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a2168:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a216a:	f7ff bf31 	b.w	80a1fd0 <set_system_mode>
 80a216e:	bf00      	nop
 80a2170:	20000128 	.word	0x20000128
 80a2174:	2000011c 	.word	0x2000011c
 80a2178:	ffff0000 	.word	0xffff0000

080a217c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a217e:	4606      	mov	r6, r0
 80a2180:	460d      	mov	r5, r1
  size_t n = 0;
 80a2182:	2400      	movs	r4, #0
 80a2184:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2186:	42bd      	cmp	r5, r7
 80a2188:	d00c      	beq.n	80a21a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a218a:	6833      	ldr	r3, [r6, #0]
 80a218c:	4630      	mov	r0, r6
 80a218e:	689b      	ldr	r3, [r3, #8]
 80a2190:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2194:	4798      	blx	r3
     if (chunk>=0)
 80a2196:	1e03      	subs	r3, r0, #0
 80a2198:	db01      	blt.n	80a219e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a219a:	441c      	add	r4, r3
  while (size--) {
 80a219c:	e7f3      	b.n	80a2186 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a219e:	2c00      	cmp	r4, #0
 80a21a0:	bf08      	it	eq
 80a21a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a21a4:	4620      	mov	r0, r4
 80a21a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a21a8:	b570      	push	{r4, r5, r6, lr}
 80a21aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a21ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a21ae:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a21b0:	b149      	cbz	r1, 80a21c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a21b2:	f001 fc3d 	bl	80a3a30 <strlen>
 80a21b6:	682b      	ldr	r3, [r5, #0]
 80a21b8:	4602      	mov	r2, r0
 80a21ba:	4621      	mov	r1, r4
 80a21bc:	4628      	mov	r0, r5
    }
 80a21be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a21c2:	68db      	ldr	r3, [r3, #12]
 80a21c4:	4718      	bx	r3
    }
 80a21c6:	bd70      	pop	{r4, r5, r6, pc}

080a21c8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a21c8:	b508      	push	{r3, lr}
  return write(str);
 80a21ca:	f7ff ffed 	bl	80a21a8 <_ZN5Print5writeEPKc>
}
 80a21ce:	bd08      	pop	{r3, pc}

080a21d0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a21d0:	6803      	ldr	r3, [r0, #0]
 80a21d2:	689b      	ldr	r3, [r3, #8]
 80a21d4:	4718      	bx	r3

080a21d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a21d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a21d8:	210d      	movs	r1, #13
{
 80a21da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a21dc:	f7ff fff8 	bl	80a21d0 <_ZN5Print5printEc>
  n += print('\n');
 80a21e0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a21e2:	4604      	mov	r4, r0
  n += print('\n');
 80a21e4:	4628      	mov	r0, r5
 80a21e6:	f7ff fff3 	bl	80a21d0 <_ZN5Print5printEc>
  return n;
}
 80a21ea:	4420      	add	r0, r4
 80a21ec:	bd38      	pop	{r3, r4, r5, pc}

080a21ee <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a21ee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a21f0:	2a01      	cmp	r2, #1
 80a21f2:	bf98      	it	ls
 80a21f4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a21f6:	b530      	push	{r4, r5, lr}
 80a21f8:	b08b      	sub	sp, #44	; 0x2c
 80a21fa:	460c      	mov	r4, r1
  *str = '\0';
 80a21fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2200:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2202:	4625      	mov	r5, r4
 80a2204:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2208:	fb04 5312 	mls	r3, r4, r2, r5
 80a220c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a220e:	2b09      	cmp	r3, #9
 80a2210:	bf94      	ite	ls
 80a2212:	3330      	addls	r3, #48	; 0x30
 80a2214:	3337      	addhi	r3, #55	; 0x37
 80a2216:	b2db      	uxtb	r3, r3
  } while(n);
 80a2218:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a221a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a221e:	d9f0      	bls.n	80a2202 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2220:	f7ff ffc2 	bl	80a21a8 <_ZN5Print5writeEPKc>
}
 80a2224:	b00b      	add	sp, #44	; 0x2c
 80a2226:	bd30      	pop	{r4, r5, pc}

080a2228 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a222c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a222e:	4619      	mov	r1, r3
 80a2230:	4610      	mov	r0, r2
{
 80a2232:	4692      	mov	sl, r2
 80a2234:	461f      	mov	r7, r3
 80a2236:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a223a:	f001 f9cd 	bl	80a35d8 <__aeabi_dcmpun>
 80a223e:	b140      	cbz	r0, 80a2252 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2240:	4951      	ldr	r1, [pc, #324]	; (80a2388 <_ZN5Print10printFloatEdh+0x160>)
 80a2242:	4628      	mov	r0, r5
 80a2244:	f7ff ffb0 	bl	80a21a8 <_ZN5Print5writeEPKc>
 80a2248:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a224a:	4620      	mov	r0, r4
 80a224c:	b003      	add	sp, #12
 80a224e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a2252:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a2256:	f04f 32ff 	mov.w	r2, #4294967295
 80a225a:	4650      	mov	r0, sl
 80a225c:	4621      	mov	r1, r4
 80a225e:	4b4b      	ldr	r3, [pc, #300]	; (80a238c <_ZN5Print10printFloatEdh+0x164>)
 80a2260:	f001 f9ba 	bl	80a35d8 <__aeabi_dcmpun>
 80a2264:	b948      	cbnz	r0, 80a227a <_ZN5Print10printFloatEdh+0x52>
 80a2266:	f04f 32ff 	mov.w	r2, #4294967295
 80a226a:	4650      	mov	r0, sl
 80a226c:	4621      	mov	r1, r4
 80a226e:	4b47      	ldr	r3, [pc, #284]	; (80a238c <_ZN5Print10printFloatEdh+0x164>)
 80a2270:	f001 f994 	bl	80a359c <__aeabi_dcmple>
 80a2274:	b908      	cbnz	r0, 80a227a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a2276:	4946      	ldr	r1, [pc, #280]	; (80a2390 <_ZN5Print10printFloatEdh+0x168>)
 80a2278:	e7e3      	b.n	80a2242 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a227a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a227e:	4650      	mov	r0, sl
 80a2280:	4639      	mov	r1, r7
 80a2282:	4b44      	ldr	r3, [pc, #272]	; (80a2394 <_ZN5Print10printFloatEdh+0x16c>)
 80a2284:	f001 f99e 	bl	80a35c4 <__aeabi_dcmpgt>
 80a2288:	b108      	cbz	r0, 80a228e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a228a:	4943      	ldr	r1, [pc, #268]	; (80a2398 <_ZN5Print10printFloatEdh+0x170>)
 80a228c:	e7d9      	b.n	80a2242 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a228e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2292:	4650      	mov	r0, sl
 80a2294:	4639      	mov	r1, r7
 80a2296:	4b41      	ldr	r3, [pc, #260]	; (80a239c <_ZN5Print10printFloatEdh+0x174>)
 80a2298:	f001 f976 	bl	80a3588 <__aeabi_dcmplt>
 80a229c:	2800      	cmp	r0, #0
 80a229e:	d1f4      	bne.n	80a228a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a22a0:	2200      	movs	r2, #0
 80a22a2:	2300      	movs	r3, #0
 80a22a4:	4650      	mov	r0, sl
 80a22a6:	4639      	mov	r1, r7
 80a22a8:	f001 f96e 	bl	80a3588 <__aeabi_dcmplt>
 80a22ac:	4604      	mov	r4, r0
 80a22ae:	b130      	cbz	r0, 80a22be <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a22b0:	212d      	movs	r1, #45	; 0x2d
 80a22b2:	4628      	mov	r0, r5
 80a22b4:	f7ff ff8c 	bl	80a21d0 <_ZN5Print5printEc>
 80a22b8:	4604      	mov	r4, r0
     number = -number;
 80a22ba:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a22be:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a22c2:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a22c4:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a22c8:	4935      	ldr	r1, [pc, #212]	; (80a23a0 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a22ca:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a23a4 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a22ce:	fa5f f38b 	uxtb.w	r3, fp
 80a22d2:	429e      	cmp	r6, r3
 80a22d4:	d906      	bls.n	80a22e4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a22d6:	4642      	mov	r2, r8
 80a22d8:	464b      	mov	r3, r9
 80a22da:	f001 f80d 	bl	80a32f8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a22de:	f10b 0b01 	add.w	fp, fp, #1
 80a22e2:	e7f4      	b.n	80a22ce <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a22e4:	463b      	mov	r3, r7
 80a22e6:	4652      	mov	r2, sl
 80a22e8:	f000 fd26 	bl	80a2d38 <__adddf3>
 80a22ec:	4689      	mov	r9, r1
 80a22ee:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a22f0:	f001 f9b0 	bl	80a3654 <__aeabi_d2uiz>
 80a22f4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a22f6:	f000 fe5b 	bl	80a2fb0 <__aeabi_ui2d>
 80a22fa:	4602      	mov	r2, r0
 80a22fc:	460b      	mov	r3, r1
 80a22fe:	4640      	mov	r0, r8
 80a2300:	4649      	mov	r1, r9
 80a2302:	f000 fd17 	bl	80a2d34 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a2306:	220a      	movs	r2, #10
 80a2308:	4680      	mov	r8, r0
 80a230a:	4689      	mov	r9, r1
 80a230c:	4628      	mov	r0, r5
 80a230e:	4639      	mov	r1, r7
 80a2310:	f7ff ff6d 	bl	80a21ee <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a2314:	4404      	add	r4, r0
  if (digits > 0) {
 80a2316:	2e00      	cmp	r6, #0
 80a2318:	d097      	beq.n	80a224a <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a231a:	4628      	mov	r0, r5
 80a231c:	4922      	ldr	r1, [pc, #136]	; (80a23a8 <_ZN5Print10printFloatEdh+0x180>)
 80a231e:	f7ff ff43 	bl	80a21a8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a2322:	f04f 0a00 	mov.w	sl, #0
 80a2326:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a23a4 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a232a:	4404      	add	r4, r0
  while (digits-- > 0)
 80a232c:	2e00      	cmp	r6, #0
 80a232e:	d08c      	beq.n	80a224a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a2330:	4652      	mov	r2, sl
 80a2332:	465b      	mov	r3, fp
 80a2334:	4640      	mov	r0, r8
 80a2336:	4649      	mov	r1, r9
 80a2338:	f000 feb4 	bl	80a30a4 <__aeabi_dmul>
 80a233c:	4680      	mov	r8, r0
 80a233e:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a2340:	f001 f960 	bl	80a3604 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a2344:	1e07      	subs	r7, r0, #0
 80a2346:	da1b      	bge.n	80a2380 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a2348:	212d      	movs	r1, #45	; 0x2d
 80a234a:	4628      	mov	r0, r5
 80a234c:	f7ff ff40 	bl	80a21d0 <_ZN5Print5printEc>
 80a2350:	4603      	mov	r3, r0
            val = -n;
 80a2352:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a2354:	220a      	movs	r2, #10
 80a2356:	4628      	mov	r0, r5
 80a2358:	9301      	str	r3, [sp, #4]
 80a235a:	f7ff ff48 	bl	80a21ee <_ZN5Print11printNumberEmh>
 80a235e:	9b01      	ldr	r3, [sp, #4]
 80a2360:	3e01      	subs	r6, #1
 80a2362:	4403      	add	r3, r0
    remainder -= toPrint;
 80a2364:	4638      	mov	r0, r7
    n += print(toPrint);
 80a2366:	441c      	add	r4, r3
    remainder -= toPrint;
 80a2368:	f000 fe32 	bl	80a2fd0 <__aeabi_i2d>
 80a236c:	4602      	mov	r2, r0
 80a236e:	460b      	mov	r3, r1
 80a2370:	4640      	mov	r0, r8
 80a2372:	4649      	mov	r1, r9
 80a2374:	f000 fcde 	bl	80a2d34 <__aeabi_dsub>
 80a2378:	b2f6      	uxtb	r6, r6
 80a237a:	4680      	mov	r8, r0
 80a237c:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a237e:	e7d5      	b.n	80a232c <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a2380:	4639      	mov	r1, r7
        size_t t = 0;
 80a2382:	2300      	movs	r3, #0
 80a2384:	e7e6      	b.n	80a2354 <_ZN5Print10printFloatEdh+0x12c>
 80a2386:	bf00      	nop
 80a2388:	080a3bcc 	.word	0x080a3bcc
 80a238c:	7fefffff 	.word	0x7fefffff
 80a2390:	080a3bd0 	.word	0x080a3bd0
 80a2394:	41efffff 	.word	0x41efffff
 80a2398:	080a3bd4 	.word	0x080a3bd4
 80a239c:	c1efffff 	.word	0xc1efffff
 80a23a0:	3fe00000 	.word	0x3fe00000
 80a23a4:	40240000 	.word	0x40240000
 80a23a8:	080a3b91 	.word	0x080a3b91

080a23ac <_ZN5Print5printEfi>:
{
 80a23ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23ae:	4605      	mov	r5, r0
 80a23b0:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a23b2:	4608      	mov	r0, r1
 80a23b4:	f000 fe1e 	bl	80a2ff4 <__aeabi_f2d>
 80a23b8:	b2e4      	uxtb	r4, r4
 80a23ba:	4602      	mov	r2, r0
 80a23bc:	460b      	mov	r3, r1
 80a23be:	4628      	mov	r0, r5
 80a23c0:	9400      	str	r4, [sp, #0]
 80a23c2:	f7ff ff31 	bl	80a2228 <_ZN5Print10printFloatEdh>
}
 80a23c6:	b003      	add	sp, #12
 80a23c8:	bd30      	pop	{r4, r5, pc}

080a23ca <_ZN5Print7printlnEdi>:
{
 80a23ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a23cc:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a23d0:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a23d2:	9100      	str	r1, [sp, #0]
 80a23d4:	f7ff ff28 	bl	80a2228 <_ZN5Print10printFloatEdh>
 80a23d8:	4604      	mov	r4, r0
  n += println();
 80a23da:	4628      	mov	r0, r5
 80a23dc:	f7ff fefb 	bl	80a21d6 <_ZN5Print7printlnEv>
}
 80a23e0:	4420      	add	r0, r4
 80a23e2:	b003      	add	sp, #12
 80a23e4:	bd30      	pop	{r4, r5, pc}

080a23e6 <_ZN5Print7printlnEfi>:
{
 80a23e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23e8:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a23ea:	4608      	mov	r0, r1
{
 80a23ec:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a23ee:	f000 fe01 	bl	80a2ff4 <__aeabi_f2d>
 80a23f2:	9500      	str	r5, [sp, #0]
 80a23f4:	4602      	mov	r2, r0
 80a23f6:	460b      	mov	r3, r1
 80a23f8:	4620      	mov	r0, r4
 80a23fa:	f7ff ffe6 	bl	80a23ca <_ZN5Print7printlnEdi>
}
 80a23fe:	b003      	add	sp, #12
 80a2400:	bd30      	pop	{r4, r5, pc}
	...

080a2404 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2404:	4b01      	ldr	r3, [pc, #4]	; (80a240c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2406:	4a02      	ldr	r2, [pc, #8]	; (80a2410 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2408:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a240a:	4770      	bx	lr
 80a240c:	2000012c 	.word	0x2000012c
 80a2410:	080a3bd8 	.word	0x080a3bd8

080a2414 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2414:	4b02      	ldr	r3, [pc, #8]	; (80a2420 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2416:	681a      	ldr	r2, [r3, #0]
 80a2418:	4b02      	ldr	r3, [pc, #8]	; (80a2424 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a241a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a241c:	4770      	bx	lr
 80a241e:	bf00      	nop
 80a2420:	20000010 	.word	0x20000010
 80a2424:	20000130 	.word	0x20000130

080a2428 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2428:	2100      	movs	r1, #0
 80a242a:	f7ff bdd9 	b.w	80a1fe0 <system_delay_ms>
	...

080a2430 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2430:	2200      	movs	r2, #0
 80a2432:	4b01      	ldr	r3, [pc, #4]	; (80a2438 <_GLOBAL__sub_I_RGB+0x8>)
 80a2434:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2436:	4770      	bx	lr
 80a2438:	20000134 	.word	0x20000134

080a243c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a243c:	4b01      	ldr	r3, [pc, #4]	; (80a2444 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a243e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2440:	4770      	bx	lr
 80a2442:	bf00      	nop
 80a2444:	20000014 	.word	0x20000014

080a2448 <serialEventRun>:
{
 80a2448:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a244a:	4b13      	ldr	r3, [pc, #76]	; (80a2498 <serialEventRun+0x50>)
 80a244c:	b143      	cbz	r3, 80a2460 <serialEventRun+0x18>
 80a244e:	f000 f975 	bl	80a273c <_Z16_fetch_usbserialv>
 80a2452:	6803      	ldr	r3, [r0, #0]
 80a2454:	691b      	ldr	r3, [r3, #16]
 80a2456:	4798      	blx	r3
 80a2458:	2800      	cmp	r0, #0
 80a245a:	dd01      	ble.n	80a2460 <serialEventRun+0x18>
        serialEvent();
 80a245c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2460:	4b0e      	ldr	r3, [pc, #56]	; (80a249c <serialEventRun+0x54>)
 80a2462:	b143      	cbz	r3, 80a2476 <serialEventRun+0x2e>
 80a2464:	f000 fbf2 	bl	80a2c4c <_Z22__fetch_global_Serial1v>
 80a2468:	6803      	ldr	r3, [r0, #0]
 80a246a:	691b      	ldr	r3, [r3, #16]
 80a246c:	4798      	blx	r3
 80a246e:	2800      	cmp	r0, #0
 80a2470:	dd01      	ble.n	80a2476 <serialEventRun+0x2e>
        serialEvent1();
 80a2472:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2476:	4b0a      	ldr	r3, [pc, #40]	; (80a24a0 <serialEventRun+0x58>)
 80a2478:	b10b      	cbz	r3, 80a247e <serialEventRun+0x36>
 80a247a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a247e:	4b09      	ldr	r3, [pc, #36]	; (80a24a4 <serialEventRun+0x5c>)
 80a2480:	b143      	cbz	r3, 80a2494 <serialEventRun+0x4c>
 80a2482:	f000 f995 	bl	80a27b0 <_Z17_fetch_usbserial1v>
 80a2486:	6803      	ldr	r3, [r0, #0]
 80a2488:	691b      	ldr	r3, [r3, #16]
 80a248a:	4798      	blx	r3
 80a248c:	2800      	cmp	r0, #0
 80a248e:	dd01      	ble.n	80a2494 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2490:	f3af 8000 	nop.w
}
 80a2494:	bd08      	pop	{r3, pc}
 80a2496:	bf00      	nop
	...

080a24a8 <_post_loop>:
{
 80a24a8:	b508      	push	{r3, lr}
	serialEventRun();
 80a24aa:	f7ff ffcd 	bl	80a2448 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a24ae:	f7ff fc95 	bl	80a1ddc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a24b2:	4b01      	ldr	r3, [pc, #4]	; (80a24b8 <_post_loop+0x10>)
 80a24b4:	6018      	str	r0, [r3, #0]
}
 80a24b6:	bd08      	pop	{r3, pc}
 80a24b8:	200004b8 	.word	0x200004b8

080a24bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a24bc:	4805      	ldr	r0, [pc, #20]	; (80a24d4 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a24be:	4a06      	ldr	r2, [pc, #24]	; (80a24d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a24c0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a24c2:	1a12      	subs	r2, r2, r0
 80a24c4:	4905      	ldr	r1, [pc, #20]	; (80a24dc <_Z33system_initialize_user_backup_ramv+0x20>)
 80a24c6:	f001 fa6f 	bl	80a39a8 <memcpy>
    __backup_sram_signature = signature;
 80a24ca:	4b05      	ldr	r3, [pc, #20]	; (80a24e0 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a24cc:	4a05      	ldr	r2, [pc, #20]	; (80a24e4 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a24ce:	601a      	str	r2, [r3, #0]
}
 80a24d0:	bd08      	pop	{r3, pc}
 80a24d2:	bf00      	nop
 80a24d4:	40024000 	.word	0x40024000
 80a24d8:	40024004 	.word	0x40024004
 80a24dc:	080a3dd0 	.word	0x080a3dd0
 80a24e0:	40024000 	.word	0x40024000
 80a24e4:	9a271c1e 	.word	0x9a271c1e

080a24e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24e8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a24ea:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24ec:	461a      	mov	r2, r3
 80a24ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a24f2:	9300      	str	r3, [sp, #0]
 80a24f4:	f7ff fd86 	bl	80a2004 <system_ctrl_set_result>
}
 80a24f8:	b003      	add	sp, #12
 80a24fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2500 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2500:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2502:	8843      	ldrh	r3, [r0, #2]
 80a2504:	2b0a      	cmp	r3, #10
 80a2506:	d008      	beq.n	80a251a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2508:	2b50      	cmp	r3, #80	; 0x50
 80a250a:	d10b      	bne.n	80a2524 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a250c:	4b09      	ldr	r3, [pc, #36]	; (80a2534 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a250e:	681b      	ldr	r3, [r3, #0]
 80a2510:	b14b      	cbz	r3, 80a2526 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2512:	b003      	add	sp, #12
 80a2514:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2518:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a251a:	f7ff ffe5 	bl	80a24e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a251e:	b003      	add	sp, #12
 80a2520:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2524:	2300      	movs	r3, #0
 80a2526:	461a      	mov	r2, r3
 80a2528:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a252c:	9300      	str	r3, [sp, #0]
 80a252e:	f7ff fd69 	bl	80a2004 <system_ctrl_set_result>
}
 80a2532:	e7f4      	b.n	80a251e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2534:	20000148 	.word	0x20000148

080a2538 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2538:	2100      	movs	r1, #0
{
 80a253a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a253c:	4811      	ldr	r0, [pc, #68]	; (80a2584 <module_user_init_hook+0x4c>)
 80a253e:	f7ff fdf3 	bl	80a2128 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2542:	4b11      	ldr	r3, [pc, #68]	; (80a2588 <module_user_init_hook+0x50>)
 80a2544:	681a      	ldr	r2, [r3, #0]
 80a2546:	4b11      	ldr	r3, [pc, #68]	; (80a258c <module_user_init_hook+0x54>)
 80a2548:	429a      	cmp	r2, r3
 80a254a:	bf0c      	ite	eq
 80a254c:	2201      	moveq	r2, #1
 80a254e:	2200      	movne	r2, #0
 80a2550:	4b0f      	ldr	r3, [pc, #60]	; (80a2590 <module_user_init_hook+0x58>)
 80a2552:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2554:	d001      	beq.n	80a255a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2556:	f7ff ffb1 	bl	80a24bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a255a:	f7ff fc27 	bl	80a1dac <HAL_RNG_GetRandomNumber>
 80a255e:	4604      	mov	r4, r0
    srand(seed);
 80a2560:	f001 fa38 	bl	80a39d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2564:	4b0b      	ldr	r3, [pc, #44]	; (80a2594 <module_user_init_hook+0x5c>)
 80a2566:	b113      	cbz	r3, 80a256e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2568:	4620      	mov	r0, r4
 80a256a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a256e:	2100      	movs	r1, #0
 80a2570:	4808      	ldr	r0, [pc, #32]	; (80a2594 <module_user_init_hook+0x5c>)
 80a2572:	f7ff fdb9 	bl	80a20e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a257a:	2100      	movs	r1, #0
 80a257c:	4806      	ldr	r0, [pc, #24]	; (80a2598 <module_user_init_hook+0x60>)
 80a257e:	f7ff bd37 	b.w	80a1ff0 <system_ctrl_set_app_request_handler>
 80a2582:	bf00      	nop
 80a2584:	080a243d 	.word	0x080a243d
 80a2588:	40024000 	.word	0x40024000
 80a258c:	9a271c1e 	.word	0x9a271c1e
 80a2590:	20000144 	.word	0x20000144
 80a2594:	00000000 	.word	0x00000000
 80a2598:	080a2501 	.word	0x080a2501

080a259c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a259c:	4770      	bx	lr

080a259e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a259e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25a0:	460e      	mov	r6, r1
 80a25a2:	2400      	movs	r4, #0
 80a25a4:	f100 0708 	add.w	r7, r0, #8
 80a25a8:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a25aa:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a25ae:	220a      	movs	r2, #10
 80a25b0:	4630      	mov	r0, r6
 80a25b2:	f7ff fe1c 	bl	80a21ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a25b6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a25b8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a25ba:	d101      	bne.n	80a25c0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a25bc:	4620      	mov	r0, r4
 80a25be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a25c0:	2c00      	cmp	r4, #0
 80a25c2:	d0f2      	beq.n	80a25aa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a25c4:	212e      	movs	r1, #46	; 0x2e
 80a25c6:	4630      	mov	r0, r6
 80a25c8:	f7ff fe02 	bl	80a21d0 <_ZN5Print5printEc>
 80a25cc:	4404      	add	r4, r0
 80a25ce:	e7ec      	b.n	80a25aa <_ZNK9IPAddress7printToER5Print+0xc>

080a25d0 <_ZN9IPAddressD0Ev>:
 80a25d0:	b510      	push	{r4, lr}
 80a25d2:	4604      	mov	r4, r0
 80a25d4:	2118      	movs	r1, #24
 80a25d6:	f7fd fd62 	bl	80a009e <_ZdlPvj>
 80a25da:	4620      	mov	r0, r4
 80a25dc:	bd10      	pop	{r4, pc}
	...

080a25e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a25e0:	b510      	push	{r4, lr}
 80a25e2:	4604      	mov	r4, r0
 80a25e4:	4b04      	ldr	r3, [pc, #16]	; (80a25f8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a25e6:	2211      	movs	r2, #17
 80a25e8:	2100      	movs	r1, #0
 80a25ea:	f840 3b04 	str.w	r3, [r0], #4
 80a25ee:	f001 f9e9 	bl	80a39c4 <memset>
}
 80a25f2:	4620      	mov	r0, r4
 80a25f4:	bd10      	pop	{r4, pc}
 80a25f6:	bf00      	nop
 80a25f8:	080a3c00 	.word	0x080a3c00

080a25fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a25fc:	4603      	mov	r3, r0
 80a25fe:	4a07      	ldr	r2, [pc, #28]	; (80a261c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2600:	b510      	push	{r4, lr}
 80a2602:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2606:	f101 0210 	add.w	r2, r1, #16
 80a260a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a260e:	4291      	cmp	r1, r2
 80a2610:	f843 4b04 	str.w	r4, [r3], #4
 80a2614:	d1f9      	bne.n	80a260a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2616:	780a      	ldrb	r2, [r1, #0]
 80a2618:	701a      	strb	r2, [r3, #0]
}
 80a261a:	bd10      	pop	{r4, pc}
 80a261c:	080a3c00 	.word	0x080a3c00

080a2620 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a2620:	4a02      	ldr	r2, [pc, #8]	; (80a262c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a2622:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2626:	2204      	movs	r2, #4
 80a2628:	7502      	strb	r2, [r0, #20]
}
 80a262a:	4770      	bx	lr
 80a262c:	080a3c00 	.word	0x080a3c00

080a2630 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2630:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2632:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2636:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a263a:	2304      	movs	r3, #4
 80a263c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2640:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2644:	6044      	str	r4, [r0, #4]
 80a2646:	7503      	strb	r3, [r0, #20]
}
 80a2648:	bd10      	pop	{r4, pc}
	...

080a264c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a264c:	b513      	push	{r0, r1, r4, lr}
 80a264e:	4c04      	ldr	r4, [pc, #16]	; (80a2660 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2650:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2652:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a2656:	9400      	str	r4, [sp, #0]
 80a2658:	f7ff ffea 	bl	80a2630 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a265c:	b002      	add	sp, #8
 80a265e:	bd10      	pop	{r4, pc}
 80a2660:	080a3c00 	.word	0x080a3c00

080a2664 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2664:	7441      	strb	r1, [r0, #17]
}
 80a2666:	4770      	bx	lr

080a2668 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2668:	4770      	bx	lr

080a266a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a266a:	4770      	bx	lr

080a266c <_ZN9USBSerial4readEv>:
{
 80a266c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a266e:	2100      	movs	r1, #0
 80a2670:	7c00      	ldrb	r0, [r0, #16]
 80a2672:	f7ff fc8d 	bl	80a1f90 <HAL_USB_USART_Receive_Data>
}
 80a2676:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a267a:	bd08      	pop	{r3, pc}

080a267c <_ZN9USBSerial4peekEv>:
{
 80a267c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a267e:	2101      	movs	r1, #1
 80a2680:	7c00      	ldrb	r0, [r0, #16]
 80a2682:	f7ff fc85 	bl	80a1f90 <HAL_USB_USART_Receive_Data>
}
 80a2686:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a268a:	bd08      	pop	{r3, pc}

080a268c <_ZN9USBSerial17availableForWriteEv>:
{
 80a268c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a268e:	7c00      	ldrb	r0, [r0, #16]
 80a2690:	f7ff fc76 	bl	80a1f80 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2694:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2698:	bd08      	pop	{r3, pc}

080a269a <_ZN9USBSerial9availableEv>:
{
 80a269a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a269c:	7c00      	ldrb	r0, [r0, #16]
 80a269e:	f7ff fc67 	bl	80a1f70 <HAL_USB_USART_Available_Data>
}
 80a26a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a26a6:	bd08      	pop	{r3, pc}

080a26a8 <_ZN9USBSerial5writeEh>:
{
 80a26a8:	b538      	push	{r3, r4, r5, lr}
 80a26aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a26ac:	7c00      	ldrb	r0, [r0, #16]
{
 80a26ae:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a26b0:	f7ff fc66 	bl	80a1f80 <HAL_USB_USART_Available_Data_For_Write>
 80a26b4:	2800      	cmp	r0, #0
 80a26b6:	dc01      	bgt.n	80a26bc <_ZN9USBSerial5writeEh+0x14>
 80a26b8:	7c60      	ldrb	r0, [r4, #17]
 80a26ba:	b128      	cbz	r0, 80a26c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a26bc:	4629      	mov	r1, r5
 80a26be:	7c20      	ldrb	r0, [r4, #16]
 80a26c0:	f7ff fc6e 	bl	80a1fa0 <HAL_USB_USART_Send_Data>
 80a26c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a26c8:	bd38      	pop	{r3, r4, r5, pc}

080a26ca <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a26ca:	7c00      	ldrb	r0, [r0, #16]
 80a26cc:	f7ff bc70 	b.w	80a1fb0 <HAL_USB_USART_Flush_Data>

080a26d0 <_ZN9USBSerialD0Ev>:
 80a26d0:	b510      	push	{r4, lr}
 80a26d2:	4604      	mov	r4, r0
 80a26d4:	2114      	movs	r1, #20
 80a26d6:	f7fd fce2 	bl	80a009e <_ZdlPvj>
 80a26da:	4620      	mov	r0, r4
 80a26dc:	bd10      	pop	{r4, pc}

080a26de <__tcf_1>:
 80a26de:	4770      	bx	lr

080a26e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a26e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a26e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a26e6:	4604      	mov	r4, r0
 80a26e8:	4608      	mov	r0, r1
 80a26ea:	2100      	movs	r1, #0
 80a26ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a26f0:	4b04      	ldr	r3, [pc, #16]	; (80a2704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a26f2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a26f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a26f6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a26f8:	4611      	mov	r1, r2
  _blocking = true;
 80a26fa:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a26fc:	f7ff fc28 	bl	80a1f50 <HAL_USB_USART_Init>
}
 80a2700:	4620      	mov	r0, r4
 80a2702:	bd10      	pop	{r4, pc}
 80a2704:	080a3c14 	.word	0x080a3c14

080a2708 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2708:	2200      	movs	r2, #0
 80a270a:	7c00      	ldrb	r0, [r0, #16]
 80a270c:	f7ff bc28 	b.w	80a1f60 <HAL_USB_USART_Begin>

080a2710 <_Z19acquireSerialBufferv>:
{
 80a2710:	b510      	push	{r4, lr}
 80a2712:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2714:	2214      	movs	r2, #20
 80a2716:	2100      	movs	r1, #0
 80a2718:	f001 f954 	bl	80a39c4 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a271c:	4b05      	ldr	r3, [pc, #20]	; (80a2734 <_Z19acquireSerialBufferv+0x24>)
}
 80a271e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2720:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2722:	4b05      	ldr	r3, [pc, #20]	; (80a2738 <_Z19acquireSerialBufferv+0x28>)
 80a2724:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2726:	f240 1301 	movw	r3, #257	; 0x101
 80a272a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a272c:	2381      	movs	r3, #129	; 0x81
 80a272e:	8223      	strh	r3, [r4, #16]
}
 80a2730:	bd10      	pop	{r4, pc}
 80a2732:	bf00      	nop
 80a2734:	2000017c 	.word	0x2000017c
 80a2738:	2000027d 	.word	0x2000027d

080a273c <_Z16_fetch_usbserialv>:
{
 80a273c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a273e:	4d0e      	ldr	r5, [pc, #56]	; (80a2778 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2740:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2742:	a801      	add	r0, sp, #4
 80a2744:	f7ff ffe4 	bl	80a2710 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2748:	7829      	ldrb	r1, [r5, #0]
 80a274a:	f3bf 8f5b 	dmb	ish
 80a274e:	f011 0401 	ands.w	r4, r1, #1
 80a2752:	d10e      	bne.n	80a2772 <_Z16_fetch_usbserialv+0x36>
 80a2754:	4628      	mov	r0, r5
 80a2756:	f7fd fca4 	bl	80a00a2 <__cxa_guard_acquire>
 80a275a:	b150      	cbz	r0, 80a2772 <_Z16_fetch_usbserialv+0x36>
 80a275c:	4621      	mov	r1, r4
 80a275e:	aa01      	add	r2, sp, #4
 80a2760:	4806      	ldr	r0, [pc, #24]	; (80a277c <_Z16_fetch_usbserialv+0x40>)
 80a2762:	f7ff ffbd 	bl	80a26e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2766:	4628      	mov	r0, r5
 80a2768:	f7fd fca0 	bl	80a00ac <__cxa_guard_release>
 80a276c:	4804      	ldr	r0, [pc, #16]	; (80a2780 <_Z16_fetch_usbserialv+0x44>)
 80a276e:	f001 f915 	bl	80a399c <atexit>
	return _usbserial;
}
 80a2772:	4802      	ldr	r0, [pc, #8]	; (80a277c <_Z16_fetch_usbserialv+0x40>)
 80a2774:	b007      	add	sp, #28
 80a2776:	bd30      	pop	{r4, r5, pc}
 80a2778:	2000014c 	.word	0x2000014c
 80a277c:	20000154 	.word	0x20000154
 80a2780:	080a2669 	.word	0x080a2669

080a2784 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2784:	b510      	push	{r4, lr}
 80a2786:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2788:	2214      	movs	r2, #20
 80a278a:	2100      	movs	r1, #0
 80a278c:	f001 f91a 	bl	80a39c4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2790:	4b05      	ldr	r3, [pc, #20]	; (80a27a8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2792:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a2794:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2796:	4b05      	ldr	r3, [pc, #20]	; (80a27ac <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2798:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a279a:	f240 1301 	movw	r3, #257	; 0x101
 80a279e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a27a0:	2381      	movs	r3, #129	; 0x81
 80a27a2:	8223      	strh	r3, [r4, #16]
}
 80a27a4:	bd10      	pop	{r4, pc}
 80a27a6:	bf00      	nop
 80a27a8:	200002fe 	.word	0x200002fe
 80a27ac:	200003ff 	.word	0x200003ff

080a27b0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a27b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a27b2:	4c0e      	ldr	r4, [pc, #56]	; (80a27ec <_Z17_fetch_usbserial1v+0x3c>)
{
 80a27b4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a27b6:	a801      	add	r0, sp, #4
 80a27b8:	f7ff ffe4 	bl	80a2784 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a27bc:	7823      	ldrb	r3, [r4, #0]
 80a27be:	f3bf 8f5b 	dmb	ish
 80a27c2:	07db      	lsls	r3, r3, #31
 80a27c4:	d40e      	bmi.n	80a27e4 <_Z17_fetch_usbserial1v+0x34>
 80a27c6:	4620      	mov	r0, r4
 80a27c8:	f7fd fc6b 	bl	80a00a2 <__cxa_guard_acquire>
 80a27cc:	b150      	cbz	r0, 80a27e4 <_Z17_fetch_usbserial1v+0x34>
 80a27ce:	2101      	movs	r1, #1
 80a27d0:	aa01      	add	r2, sp, #4
 80a27d2:	4807      	ldr	r0, [pc, #28]	; (80a27f0 <_Z17_fetch_usbserial1v+0x40>)
 80a27d4:	f7ff ff84 	bl	80a26e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a27d8:	4620      	mov	r0, r4
 80a27da:	f7fd fc67 	bl	80a00ac <__cxa_guard_release>
 80a27de:	4805      	ldr	r0, [pc, #20]	; (80a27f4 <_Z17_fetch_usbserial1v+0x44>)
 80a27e0:	f001 f8dc 	bl	80a399c <atexit>
  return _usbserial1;
}
 80a27e4:	4802      	ldr	r0, [pc, #8]	; (80a27f0 <_Z17_fetch_usbserial1v+0x40>)
 80a27e6:	b006      	add	sp, #24
 80a27e8:	bd10      	pop	{r4, pc}
 80a27ea:	bf00      	nop
 80a27ec:	20000150 	.word	0x20000150
 80a27f0:	20000168 	.word	0x20000168
 80a27f4:	080a26df 	.word	0x080a26df

080a27f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a27f8:	4770      	bx	lr

080a27fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a27fa:	7441      	strb	r1, [r0, #17]
}
 80a27fc:	4770      	bx	lr

080a27fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a27fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2800:	7c00      	ldrb	r0, [r0, #16]
 80a2802:	f7ff fb33 	bl	80a1e6c <hal_usart_available_data_for_write>
}
 80a2806:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a280a:	bd08      	pop	{r3, pc}

080a280c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a280c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a280e:	7c00      	ldrb	r0, [r0, #16]
 80a2810:	f7ff fb04 	bl	80a1e1c <hal_usart_available>
}
 80a2814:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2818:	bd08      	pop	{r3, pc}

080a281a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a281a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a281c:	7c00      	ldrb	r0, [r0, #16]
 80a281e:	f7ff fb0d 	bl	80a1e3c <hal_usart_peek>
}
 80a2822:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2826:	bd08      	pop	{r3, pc}

080a2828 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2828:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a282a:	7c00      	ldrb	r0, [r0, #16]
 80a282c:	f7ff fafe 	bl	80a1e2c <hal_usart_read>
}
 80a2830:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2834:	bd08      	pop	{r3, pc}

080a2836 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2836:	7c00      	ldrb	r0, [r0, #16]
 80a2838:	f7ff bb08 	b.w	80a1e4c <hal_usart_flush>

080a283c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a283c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a283e:	7c46      	ldrb	r6, [r0, #17]
{
 80a2840:	4604      	mov	r4, r0
 80a2842:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2844:	b12e      	cbz	r6, 80a2852 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2846:	4629      	mov	r1, r5
 80a2848:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a284a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a284e:	f7ff badd 	b.w	80a1e0c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2852:	7c00      	ldrb	r0, [r0, #16]
 80a2854:	f7ff fb0a 	bl	80a1e6c <hal_usart_available_data_for_write>
 80a2858:	2800      	cmp	r0, #0
 80a285a:	dcf4      	bgt.n	80a2846 <_ZN11USARTSerial5writeEh+0xa>
}
 80a285c:	4630      	mov	r0, r6
 80a285e:	bd70      	pop	{r4, r5, r6, pc}

080a2860 <_ZN11USARTSerialD0Ev>:
 80a2860:	b510      	push	{r4, lr}
 80a2862:	4604      	mov	r4, r0
 80a2864:	2114      	movs	r1, #20
 80a2866:	f7fd fc1a 	bl	80a009e <_ZdlPvj>
 80a286a:	4620      	mov	r0, r4
 80a286c:	bd10      	pop	{r4, pc}
	...

080a2870 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2870:	b510      	push	{r4, lr}
 80a2872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2876:	4604      	mov	r4, r0
 80a2878:	4608      	mov	r0, r1
 80a287a:	4611      	mov	r1, r2
 80a287c:	2200      	movs	r2, #0
 80a287e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a2882:	4b04      	ldr	r3, [pc, #16]	; (80a2894 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a2884:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2886:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2888:	2301      	movs	r3, #1
 80a288a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a288c:	f7ff faf6 	bl	80a1e7c <hal_usart_init_ex>
}
 80a2890:	4620      	mov	r0, r4
 80a2892:	bd10      	pop	{r4, pc}
 80a2894:	080a3c44 	.word	0x080a3c44

080a2898 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2898:	4770      	bx	lr

080a289a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a289c:	4606      	mov	r6, r0
 80a289e:	4615      	mov	r5, r2
 80a28a0:	460c      	mov	r4, r1
 80a28a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a28a4:	42bc      	cmp	r4, r7
 80a28a6:	d006      	beq.n	80a28b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a28a8:	6833      	ldr	r3, [r6, #0]
 80a28aa:	4630      	mov	r0, r6
 80a28ac:	689b      	ldr	r3, [r3, #8]
 80a28ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a28b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a28b4:	e7f6      	b.n	80a28a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a28b6:	4628      	mov	r0, r5
 80a28b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a28ba:	2200      	movs	r2, #0
 80a28bc:	7c00      	ldrb	r0, [r0, #16]
 80a28be:	f7ff bafd 	b.w	80a1ebc <hal_i2c_write>

080a28c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a28c2:	2100      	movs	r1, #0
 80a28c4:	7c00      	ldrb	r0, [r0, #16]
 80a28c6:	f7ff bb01 	b.w	80a1ecc <hal_i2c_available>

080a28ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a28ca:	2100      	movs	r1, #0
 80a28cc:	7c00      	ldrb	r0, [r0, #16]
 80a28ce:	f7ff bb05 	b.w	80a1edc <hal_i2c_read>

080a28d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a28d2:	2100      	movs	r1, #0
 80a28d4:	7c00      	ldrb	r0, [r0, #16]
 80a28d6:	f7ff bb09 	b.w	80a1eec <hal_i2c_peek>

080a28da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a28da:	2100      	movs	r1, #0
 80a28dc:	7c00      	ldrb	r0, [r0, #16]
 80a28de:	f7ff bb0d 	b.w	80a1efc <hal_i2c_flush>

080a28e2 <_ZN7TwoWireD0Ev>:
 80a28e2:	b510      	push	{r4, lr}
 80a28e4:	4604      	mov	r4, r0
 80a28e6:	2114      	movs	r1, #20
 80a28e8:	f7fd fbd9 	bl	80a009e <_ZdlPvj>
 80a28ec:	4620      	mov	r0, r4
 80a28ee:	bd10      	pop	{r4, pc}

080a28f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a28f0:	b510      	push	{r4, lr}
 80a28f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a28f6:	4604      	mov	r4, r0
 80a28f8:	4608      	mov	r0, r1
 80a28fa:	2100      	movs	r1, #0
 80a28fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2900:	4b03      	ldr	r3, [pc, #12]	; (80a2910 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2902:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2904:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2906:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2908:	f7ff fb08 	bl	80a1f1c <hal_i2c_init>
}
 80a290c:	4620      	mov	r0, r4
 80a290e:	bd10      	pop	{r4, pc}
 80a2910:	080a3c74 	.word	0x080a3c74

080a2914 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2914:	2300      	movs	r3, #0
 80a2916:	7c00      	ldrb	r0, [r0, #16]
 80a2918:	461a      	mov	r2, r3
 80a291a:	4619      	mov	r1, r3
 80a291c:	f7ff bab6 	b.w	80a1e8c <hal_i2c_begin>

080a2920 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a2920:	2200      	movs	r2, #0
 80a2922:	7c00      	ldrb	r0, [r0, #16]
 80a2924:	f7ff baba 	b.w	80a1e9c <hal_i2c_begin_transmission>

080a2928 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a2928:	b2c9      	uxtb	r1, r1
 80a292a:	f7ff bff9 	b.w	80a2920 <_ZN7TwoWire17beginTransmissionEh>

080a292e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a292e:	2200      	movs	r2, #0
 80a2930:	7c00      	ldrb	r0, [r0, #16]
 80a2932:	f7ff babb 	b.w	80a1eac <hal_i2c_end_transmission>

080a2936 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a2936:	2101      	movs	r1, #1
 80a2938:	f7ff bff9 	b.w	80a292e <_ZN7TwoWire15endTransmissionEh>

080a293c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a293c:	2200      	movs	r2, #0
 80a293e:	6840      	ldr	r0, [r0, #4]
 80a2940:	4611      	mov	r1, r2
 80a2942:	f7ff bb81 	b.w	80a2048 <network_ready>

080a2946 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2946:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2948:	4615      	mov	r5, r2
 80a294a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a294c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a294e:	460e      	mov	r6, r1
 80a2950:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2952:	2100      	movs	r1, #0
 80a2954:	a803      	add	r0, sp, #12
 80a2956:	f001 f835 	bl	80a39c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a295a:	4628      	mov	r0, r5
 80a295c:	f001 f868 	bl	80a3a30 <strlen>
 80a2960:	2700      	movs	r7, #0
 80a2962:	b281      	uxth	r1, r0
 80a2964:	6873      	ldr	r3, [r6, #4]
 80a2966:	4628      	mov	r0, r5
 80a2968:	9700      	str	r7, [sp, #0]
 80a296a:	aa03      	add	r2, sp, #12
 80a296c:	f7ff fb28 	bl	80a1fc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2970:	b130      	cbz	r0, 80a2980 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2972:	4639      	mov	r1, r7
 80a2974:	4620      	mov	r0, r4
 80a2976:	f7ff fe53 	bl	80a2620 <_ZN9IPAddressC1Em>
    }
 80a297a:	4620      	mov	r0, r4
 80a297c:	b009      	add	sp, #36	; 0x24
 80a297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2980:	4620      	mov	r0, r4
 80a2982:	a903      	add	r1, sp, #12
 80a2984:	f7ff fe3a 	bl	80a25fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2988:	e7f7      	b.n	80a297a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a298a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a298a:	2200      	movs	r2, #0
 80a298c:	6840      	ldr	r0, [r0, #4]
 80a298e:	4611      	mov	r1, r2
 80a2990:	f7ff bb7a 	b.w	80a2088 <network_listening>

080a2994 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2994:	2200      	movs	r2, #0
 80a2996:	6840      	ldr	r0, [r0, #4]
 80a2998:	4611      	mov	r1, r2
 80a299a:	f7ff bb85 	b.w	80a20a8 <network_get_listen_timeout>

080a299e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a299e:	2200      	movs	r2, #0
 80a29a0:	6840      	ldr	r0, [r0, #4]
 80a29a2:	f7ff bb79 	b.w	80a2098 <network_set_listen_timeout>

080a29a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a29a6:	2200      	movs	r2, #0
 80a29a8:	6840      	ldr	r0, [r0, #4]
 80a29aa:	f081 0101 	eor.w	r1, r1, #1
 80a29ae:	f7ff bb63 	b.w	80a2078 <network_listen>

080a29b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a29b2:	2300      	movs	r3, #0
 80a29b4:	6840      	ldr	r0, [r0, #4]
 80a29b6:	461a      	mov	r2, r3
 80a29b8:	4619      	mov	r1, r3
 80a29ba:	f7ff bb55 	b.w	80a2068 <network_off>

080a29be <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a29be:	2300      	movs	r3, #0
 80a29c0:	6840      	ldr	r0, [r0, #4]
 80a29c2:	461a      	mov	r2, r3
 80a29c4:	4619      	mov	r1, r3
 80a29c6:	f7ff bb47 	b.w	80a2058 <network_on>

080a29ca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a29ca:	2200      	movs	r2, #0
 80a29cc:	6840      	ldr	r0, [r0, #4]
 80a29ce:	4611      	mov	r1, r2
 80a29d0:	f7ff bb2a 	b.w	80a2028 <network_connecting>

080a29d4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29d4:	2200      	movs	r2, #0
 80a29d6:	2102      	movs	r1, #2
 80a29d8:	6840      	ldr	r0, [r0, #4]
 80a29da:	f7ff bb2d 	b.w	80a2038 <network_disconnect>

080a29de <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a29de:	2300      	movs	r3, #0
 80a29e0:	6840      	ldr	r0, [r0, #4]
 80a29e2:	461a      	mov	r2, r3
 80a29e4:	f7ff bb18 	b.w	80a2018 <network_connect>

080a29e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29e8:	2204      	movs	r2, #4
 80a29ea:	4b02      	ldr	r3, [pc, #8]	; (80a29f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a29ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a29ee:	4a02      	ldr	r2, [pc, #8]	; (80a29f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a29f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a29f2:	4770      	bx	lr
 80a29f4:	20000480 	.word	0x20000480
 80a29f8:	080a3c9c 	.word	0x080a3c9c

080a29fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a29fc:	2300      	movs	r3, #0
 80a29fe:	6840      	ldr	r0, [r0, #4]
 80a2a00:	461a      	mov	r2, r3
 80a2a02:	f7ff bb09 	b.w	80a2018 <network_connect>

080a2a06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2a06:	2200      	movs	r2, #0
 80a2a08:	2102      	movs	r1, #2
 80a2a0a:	6840      	ldr	r0, [r0, #4]
 80a2a0c:	f7ff bb14 	b.w	80a2038 <network_disconnect>

080a2a10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2a10:	2200      	movs	r2, #0
 80a2a12:	6840      	ldr	r0, [r0, #4]
 80a2a14:	4611      	mov	r1, r2
 80a2a16:	f7ff bb07 	b.w	80a2028 <network_connecting>

080a2a1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2a1a:	2200      	movs	r2, #0
 80a2a1c:	6840      	ldr	r0, [r0, #4]
 80a2a1e:	4611      	mov	r1, r2
 80a2a20:	f7ff bb12 	b.w	80a2048 <network_ready>

080a2a24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2a24:	2300      	movs	r3, #0
 80a2a26:	6840      	ldr	r0, [r0, #4]
 80a2a28:	461a      	mov	r2, r3
 80a2a2a:	4619      	mov	r1, r3
 80a2a2c:	f7ff bb14 	b.w	80a2058 <network_on>

080a2a30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2a30:	2300      	movs	r3, #0
 80a2a32:	6840      	ldr	r0, [r0, #4]
 80a2a34:	461a      	mov	r2, r3
 80a2a36:	4619      	mov	r1, r3
 80a2a38:	f7ff bb16 	b.w	80a2068 <network_off>

080a2a3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2a3c:	2100      	movs	r1, #0
 80a2a3e:	6840      	ldr	r0, [r0, #4]
 80a2a40:	f7ff bb3a 	b.w	80a20b8 <network_is_on>

080a2a44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2a44:	2100      	movs	r1, #0
 80a2a46:	6840      	ldr	r0, [r0, #4]
 80a2a48:	f7ff bb3e 	b.w	80a20c8 <network_is_off>

080a2a4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2a4c:	2200      	movs	r2, #0
 80a2a4e:	6840      	ldr	r0, [r0, #4]
 80a2a50:	f081 0101 	eor.w	r1, r1, #1
 80a2a54:	f7ff bb10 	b.w	80a2078 <network_listen>

080a2a58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2a58:	2200      	movs	r2, #0
 80a2a5a:	6840      	ldr	r0, [r0, #4]
 80a2a5c:	f7ff bb1c 	b.w	80a2098 <network_set_listen_timeout>

080a2a60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2a60:	2200      	movs	r2, #0
 80a2a62:	6840      	ldr	r0, [r0, #4]
 80a2a64:	4611      	mov	r1, r2
 80a2a66:	f7ff bb1f 	b.w	80a20a8 <network_get_listen_timeout>

080a2a6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2a6a:	2200      	movs	r2, #0
 80a2a6c:	6840      	ldr	r0, [r0, #4]
 80a2a6e:	4611      	mov	r1, r2
 80a2a70:	f7ff bb0a 	b.w	80a2088 <network_listening>

080a2a74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a74:	b570      	push	{r4, r5, r6, lr}
 80a2a76:	4615      	mov	r5, r2
 80a2a78:	b08e      	sub	sp, #56	; 0x38
 80a2a7a:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a7c:	a808      	add	r0, sp, #32
 80a2a7e:	f7ff fdaf 	bl	80a25e0 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2a82:	2211      	movs	r2, #17
 80a2a84:	2100      	movs	r1, #0
 80a2a86:	a803      	add	r0, sp, #12
 80a2a88:	f000 ff9c 	bl	80a39c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a8c:	2600      	movs	r6, #0
 80a2a8e:	4628      	mov	r0, r5
 80a2a90:	f000 ffce 	bl	80a3a30 <strlen>
 80a2a94:	4b0a      	ldr	r3, [pc, #40]	; (80a2ac0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2a96:	9600      	str	r6, [sp, #0]
 80a2a98:	b281      	uxth	r1, r0
 80a2a9a:	685b      	ldr	r3, [r3, #4]
 80a2a9c:	4628      	mov	r0, r5
 80a2a9e:	aa03      	add	r2, sp, #12
 80a2aa0:	f7ff fa8e 	bl	80a1fc0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2aa4:	b130      	cbz	r0, 80a2ab4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2aa6:	4631      	mov	r1, r6
 80a2aa8:	4620      	mov	r0, r4
 80a2aaa:	f7ff fdb9 	bl	80a2620 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2aae:	4620      	mov	r0, r4
 80a2ab0:	b00e      	add	sp, #56	; 0x38
 80a2ab2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ab4:	4620      	mov	r0, r4
 80a2ab6:	a903      	add	r1, sp, #12
 80a2ab8:	f7ff fda0 	bl	80a25fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2abc:	e7f7      	b.n	80a2aae <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2abe:	bf00      	nop
 80a2ac0:	20000480 	.word	0x20000480

080a2ac4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2ac4:	4b02      	ldr	r3, [pc, #8]	; (80a2ad0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2ac6:	4a03      	ldr	r2, [pc, #12]	; (80a2ad4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2ac8:	601a      	str	r2, [r3, #0]
 80a2aca:	2200      	movs	r2, #0
 80a2acc:	605a      	str	r2, [r3, #4]

} // spark
 80a2ace:	4770      	bx	lr
 80a2ad0:	20000488 	.word	0x20000488
 80a2ad4:	080a3cd8 	.word	0x080a3cd8

080a2ad8 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2ad8:	4b02      	ldr	r3, [pc, #8]	; (80a2ae4 <__tcf_0+0xc>)
 80a2ada:	6898      	ldr	r0, [r3, #8]
 80a2adc:	b108      	cbz	r0, 80a2ae2 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2ade:	f7ff b98d 	b.w	80a1dfc <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2ae2:	4770      	bx	lr
 80a2ae4:	20000494 	.word	0x20000494

080a2ae8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2ae8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2aea:	b570      	push	{r4, r5, r6, lr}
 80a2aec:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2aee:	d901      	bls.n	80a2af4 <pinAvailable+0xc>
    return false;
 80a2af0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2af2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2af4:	f1a0 030d 	sub.w	r3, r0, #13
 80a2af8:	2b02      	cmp	r3, #2
 80a2afa:	d90b      	bls.n	80a2b14 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2afc:	2801      	cmp	r0, #1
 80a2afe:	d824      	bhi.n	80a2b4a <pinAvailable+0x62>
 80a2b00:	f000 f8ee 	bl	80a2ce0 <_Z19__fetch_global_Wirev>
 80a2b04:	2100      	movs	r1, #0
 80a2b06:	7c00      	ldrb	r0, [r0, #16]
 80a2b08:	f7ff fa00 	bl	80a1f0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2b0c:	f080 0001 	eor.w	r0, r0, #1
 80a2b10:	b2c0      	uxtb	r0, r0
 80a2b12:	e7ee      	b.n	80a2af2 <pinAvailable+0xa>
 80a2b14:	4e12      	ldr	r6, [pc, #72]	; (80a2b60 <pinAvailable+0x78>)
 80a2b16:	7831      	ldrb	r1, [r6, #0]
 80a2b18:	f3bf 8f5b 	dmb	ish
 80a2b1c:	f011 0501 	ands.w	r5, r1, #1
 80a2b20:	d10d      	bne.n	80a2b3e <pinAvailable+0x56>
 80a2b22:	4630      	mov	r0, r6
 80a2b24:	f7fd fabd 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b28:	b148      	cbz	r0, 80a2b3e <pinAvailable+0x56>
 80a2b2a:	4629      	mov	r1, r5
 80a2b2c:	480d      	ldr	r0, [pc, #52]	; (80a2b64 <pinAvailable+0x7c>)
 80a2b2e:	f7ff fb03 	bl	80a2138 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2b32:	4630      	mov	r0, r6
 80a2b34:	f7fd faba 	bl	80a00ac <__cxa_guard_release>
 80a2b38:	480b      	ldr	r0, [pc, #44]	; (80a2b68 <pinAvailable+0x80>)
 80a2b3a:	f000 ff2f 	bl	80a399c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2b3e:	4b09      	ldr	r3, [pc, #36]	; (80a2b64 <pinAvailable+0x7c>)
 80a2b40:	7818      	ldrb	r0, [r3, #0]
 80a2b42:	f7ff f9fd 	bl	80a1f40 <hal_spi_is_enabled>
 80a2b46:	2800      	cmp	r0, #0
 80a2b48:	d1d2      	bne.n	80a2af0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2b4a:	3c12      	subs	r4, #18
 80a2b4c:	2c01      	cmp	r4, #1
 80a2b4e:	d805      	bhi.n	80a2b5c <pinAvailable+0x74>
 80a2b50:	f000 f87c 	bl	80a2c4c <_Z22__fetch_global_Serial1v>
 80a2b54:	7c00      	ldrb	r0, [r0, #16]
 80a2b56:	f7ff f981 	bl	80a1e5c <hal_usart_is_enabled>
 80a2b5a:	e7d7      	b.n	80a2b0c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2b5c:	2001      	movs	r0, #1
 80a2b5e:	e7c8      	b.n	80a2af2 <pinAvailable+0xa>
 80a2b60:	20000490 	.word	0x20000490
 80a2b64:	20000494 	.word	0x20000494
 80a2b68:	080a2ad9 	.word	0x080a2ad9

080a2b6c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b6c:	2817      	cmp	r0, #23
{
 80a2b6e:	b538      	push	{r3, r4, r5, lr}
 80a2b70:	4604      	mov	r4, r0
 80a2b72:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b74:	d80a      	bhi.n	80a2b8c <pinMode+0x20>
 80a2b76:	29ff      	cmp	r1, #255	; 0xff
 80a2b78:	d008      	beq.n	80a2b8c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2b7a:	f7ff ffb5 	bl	80a2ae8 <pinAvailable>
 80a2b7e:	b128      	cbz	r0, 80a2b8c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2b80:	4629      	mov	r1, r5
 80a2b82:	4620      	mov	r0, r4
}
 80a2b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2b88:	f7ff b8e8 	b.w	80a1d5c <HAL_Pin_Mode>
}
 80a2b8c:	bd38      	pop	{r3, r4, r5, pc}

080a2b8e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2b8e:	b538      	push	{r3, r4, r5, lr}
 80a2b90:	4604      	mov	r4, r0
 80a2b92:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2b94:	f7ff f8ea 	bl	80a1d6c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2b98:	28ff      	cmp	r0, #255	; 0xff
 80a2b9a:	d010      	beq.n	80a2bbe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2b9c:	2806      	cmp	r0, #6
 80a2b9e:	d804      	bhi.n	80a2baa <digitalWrite+0x1c>
 80a2ba0:	234d      	movs	r3, #77	; 0x4d
 80a2ba2:	fa23 f000 	lsr.w	r0, r3, r0
 80a2ba6:	07c3      	lsls	r3, r0, #31
 80a2ba8:	d409      	bmi.n	80a2bbe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2baa:	4620      	mov	r0, r4
 80a2bac:	f7ff ff9c 	bl	80a2ae8 <pinAvailable>
 80a2bb0:	b128      	cbz	r0, 80a2bbe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2bb2:	4629      	mov	r1, r5
 80a2bb4:	4620      	mov	r0, r4
}
 80a2bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2bba:	f7ff b8df 	b.w	80a1d7c <HAL_GPIO_Write>
}
 80a2bbe:	bd38      	pop	{r3, r4, r5, pc}

080a2bc0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2bc0:	b510      	push	{r4, lr}
 80a2bc2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2bc4:	f7ff f8d2 	bl	80a1d6c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2bc8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2bca:	b2db      	uxtb	r3, r3
 80a2bcc:	2b01      	cmp	r3, #1
 80a2bce:	d908      	bls.n	80a2be2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2bd0:	4620      	mov	r0, r4
 80a2bd2:	f7ff ff89 	bl	80a2ae8 <pinAvailable>
 80a2bd6:	b120      	cbz	r0, 80a2be2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2bd8:	4620      	mov	r0, r4
}
 80a2bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2bde:	f7ff b8d5 	b.w	80a1d8c <HAL_GPIO_Read>
}
 80a2be2:	2000      	movs	r0, #0
 80a2be4:	bd10      	pop	{r4, pc}

080a2be6 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2be6:	b510      	push	{r4, lr}
 80a2be8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a2bea:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2bec:	bf9c      	itt	ls
 80a2bee:	340a      	addls	r4, #10
 80a2bf0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2bf2:	4620      	mov	r0, r4
 80a2bf4:	f7ff ff78 	bl	80a2ae8 <pinAvailable>
 80a2bf8:	b150      	cbz	r0, 80a2c10 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2bfa:	2103      	movs	r1, #3
 80a2bfc:	4620      	mov	r0, r4
 80a2bfe:	f7ff f8a5 	bl	80a1d4c <HAL_Validate_Pin_Function>
 80a2c02:	2803      	cmp	r0, #3
 80a2c04:	d104      	bne.n	80a2c10 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a2c06:	4620      	mov	r0, r4
}
 80a2c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a2c0c:	f7ff b8c6 	b.w	80a1d9c <hal_adc_read>
}
 80a2c10:	2000      	movs	r0, #0
 80a2c12:	bd10      	pop	{r4, pc}

080a2c14 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2c14:	4770      	bx	lr
	...

080a2c18 <_Z20acquireSerial1Bufferv>:
{
 80a2c18:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2c1a:	2514      	movs	r5, #20
{
 80a2c1c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a2c1e:	462a      	mov	r2, r5
 80a2c20:	2100      	movs	r1, #0
 80a2c22:	f000 fecf 	bl	80a39c4 <memset>
 80a2c26:	8025      	strh	r5, [r4, #0]
 80a2c28:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c2a:	4e07      	ldr	r6, [pc, #28]	; (80a2c48 <_Z20acquireSerial1Bufferv+0x30>)
 80a2c2c:	4628      	mov	r0, r5
 80a2c2e:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a2c30:	8125      	strh	r5, [r4, #8]
 80a2c32:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c34:	f000 f878 	bl	80a2d28 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c38:	4631      	mov	r1, r6
    };
 80a2c3a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2c3c:	4628      	mov	r0, r5
 80a2c3e:	f000 f873 	bl	80a2d28 <_ZnajRKSt9nothrow_t>
    };
 80a2c42:	60e0      	str	r0, [r4, #12]
}
 80a2c44:	4620      	mov	r0, r4
 80a2c46:	bd70      	pop	{r4, r5, r6, pc}
 80a2c48:	080a3d0c 	.word	0x080a3d0c

080a2c4c <_Z22__fetch_global_Serial1v>:
{
 80a2c4c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2c4e:	4d0e      	ldr	r5, [pc, #56]	; (80a2c88 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2c50:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2c52:	7829      	ldrb	r1, [r5, #0]
 80a2c54:	f3bf 8f5b 	dmb	ish
 80a2c58:	f011 0401 	ands.w	r4, r1, #1
 80a2c5c:	d111      	bne.n	80a2c82 <_Z22__fetch_global_Serial1v+0x36>
 80a2c5e:	4628      	mov	r0, r5
 80a2c60:	f7fd fa1f 	bl	80a00a2 <__cxa_guard_acquire>
 80a2c64:	b168      	cbz	r0, 80a2c82 <_Z22__fetch_global_Serial1v+0x36>
 80a2c66:	a801      	add	r0, sp, #4
 80a2c68:	f7ff ffd6 	bl	80a2c18 <_Z20acquireSerial1Bufferv>
 80a2c6c:	4621      	mov	r1, r4
 80a2c6e:	aa01      	add	r2, sp, #4
 80a2c70:	4806      	ldr	r0, [pc, #24]	; (80a2c8c <_Z22__fetch_global_Serial1v+0x40>)
 80a2c72:	f7ff fdfd 	bl	80a2870 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2c76:	4628      	mov	r0, r5
 80a2c78:	f7fd fa18 	bl	80a00ac <__cxa_guard_release>
 80a2c7c:	4804      	ldr	r0, [pc, #16]	; (80a2c90 <_Z22__fetch_global_Serial1v+0x44>)
 80a2c7e:	f000 fe8d 	bl	80a399c <atexit>
    return serial1;
}
 80a2c82:	4802      	ldr	r0, [pc, #8]	; (80a2c8c <_Z22__fetch_global_Serial1v+0x40>)
 80a2c84:	b007      	add	sp, #28
 80a2c86:	bd30      	pop	{r4, r5, pc}
 80a2c88:	200004a0 	.word	0x200004a0
 80a2c8c:	200004a4 	.word	0x200004a4
 80a2c90:	080a2c15 	.word	0x080a2c15

080a2c94 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2c94:	2300      	movs	r3, #0
 80a2c96:	b507      	push	{r0, r1, r2, lr}
 80a2c98:	461a      	mov	r2, r3
 80a2c9a:	4619      	mov	r1, r3
 80a2c9c:	9300      	str	r3, [sp, #0]
 80a2c9e:	4803      	ldr	r0, [pc, #12]	; (80a2cac <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2ca0:	f7ff fcd4 	bl	80a264c <_ZN9IPAddressC1Ehhhh>
 80a2ca4:	b003      	add	sp, #12
 80a2ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2caa:	bf00      	nop
 80a2cac:	200004bc 	.word	0x200004bc

080a2cb0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2cb0:	4770      	bx	lr
	...

080a2cb4 <_Z17acquireWireBufferv>:
{
 80a2cb4:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2cb6:	2314      	movs	r3, #20
 80a2cb8:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cba:	4e08      	ldr	r6, [pc, #32]	; (80a2cdc <_Z17acquireWireBufferv+0x28>)
{
 80a2cbc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2cbe:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cc0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2cc2:	6085      	str	r5, [r0, #8]
 80a2cc4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cc6:	4628      	mov	r0, r5
 80a2cc8:	f000 f82e 	bl	80a2d28 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2ccc:	4631      	mov	r1, r6
	};
 80a2cce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2cd0:	4628      	mov	r0, r5
 80a2cd2:	f000 f829 	bl	80a2d28 <_ZnajRKSt9nothrow_t>
	};
 80a2cd6:	60e0      	str	r0, [r4, #12]
}
 80a2cd8:	4620      	mov	r0, r4
 80a2cda:	bd70      	pop	{r4, r5, r6, pc}
 80a2cdc:	080a3d0c 	.word	0x080a3d0c

080a2ce0 <_Z19__fetch_global_Wirev>:
{
 80a2ce0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2ce2:	4d0e      	ldr	r5, [pc, #56]	; (80a2d1c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2ce4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2ce6:	7829      	ldrb	r1, [r5, #0]
 80a2ce8:	f3bf 8f5b 	dmb	ish
 80a2cec:	f011 0401 	ands.w	r4, r1, #1
 80a2cf0:	d111      	bne.n	80a2d16 <_Z19__fetch_global_Wirev+0x36>
 80a2cf2:	4628      	mov	r0, r5
 80a2cf4:	f7fd f9d5 	bl	80a00a2 <__cxa_guard_acquire>
 80a2cf8:	b168      	cbz	r0, 80a2d16 <_Z19__fetch_global_Wirev+0x36>
 80a2cfa:	a801      	add	r0, sp, #4
 80a2cfc:	f7ff ffda 	bl	80a2cb4 <_Z17acquireWireBufferv>
 80a2d00:	4621      	mov	r1, r4
 80a2d02:	aa01      	add	r2, sp, #4
 80a2d04:	4806      	ldr	r0, [pc, #24]	; (80a2d20 <_Z19__fetch_global_Wirev+0x40>)
 80a2d06:	f7ff fdf3 	bl	80a28f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2d0a:	4628      	mov	r0, r5
 80a2d0c:	f7fd f9ce 	bl	80a00ac <__cxa_guard_release>
 80a2d10:	4804      	ldr	r0, [pc, #16]	; (80a2d24 <_Z19__fetch_global_Wirev+0x44>)
 80a2d12:	f000 fe43 	bl	80a399c <atexit>
	return wire;
}
 80a2d16:	4802      	ldr	r0, [pc, #8]	; (80a2d20 <_Z19__fetch_global_Wirev+0x40>)
 80a2d18:	b007      	add	sp, #28
 80a2d1a:	bd30      	pop	{r4, r5, pc}
 80a2d1c:	200004d4 	.word	0x200004d4
 80a2d20:	200004d8 	.word	0x200004d8
 80a2d24:	080a2cb1 	.word	0x080a2cb1

080a2d28 <_ZnajRKSt9nothrow_t>:
 80a2d28:	f7fd b9b7 	b.w	80a009a <_Znaj>

080a2d2c <__aeabi_drsub>:
 80a2d2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2d30:	e002      	b.n	80a2d38 <__adddf3>
 80a2d32:	bf00      	nop

080a2d34 <__aeabi_dsub>:
 80a2d34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2d38 <__adddf3>:
 80a2d38:	b530      	push	{r4, r5, lr}
 80a2d3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2d3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2d42:	ea94 0f05 	teq	r4, r5
 80a2d46:	bf08      	it	eq
 80a2d48:	ea90 0f02 	teqeq	r0, r2
 80a2d4c:	bf1f      	itttt	ne
 80a2d4e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2d52:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2d56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2d5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2d5e:	f000 80e2 	beq.w	80a2f26 <__adddf3+0x1ee>
 80a2d62:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2d66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2d6a:	bfb8      	it	lt
 80a2d6c:	426d      	neglt	r5, r5
 80a2d6e:	dd0c      	ble.n	80a2d8a <__adddf3+0x52>
 80a2d70:	442c      	add	r4, r5
 80a2d72:	ea80 0202 	eor.w	r2, r0, r2
 80a2d76:	ea81 0303 	eor.w	r3, r1, r3
 80a2d7a:	ea82 0000 	eor.w	r0, r2, r0
 80a2d7e:	ea83 0101 	eor.w	r1, r3, r1
 80a2d82:	ea80 0202 	eor.w	r2, r0, r2
 80a2d86:	ea81 0303 	eor.w	r3, r1, r3
 80a2d8a:	2d36      	cmp	r5, #54	; 0x36
 80a2d8c:	bf88      	it	hi
 80a2d8e:	bd30      	pophi	{r4, r5, pc}
 80a2d90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2d94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2d98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2d9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2da0:	d002      	beq.n	80a2da8 <__adddf3+0x70>
 80a2da2:	4240      	negs	r0, r0
 80a2da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2da8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2dac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2db0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2db4:	d002      	beq.n	80a2dbc <__adddf3+0x84>
 80a2db6:	4252      	negs	r2, r2
 80a2db8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2dbc:	ea94 0f05 	teq	r4, r5
 80a2dc0:	f000 80a7 	beq.w	80a2f12 <__adddf3+0x1da>
 80a2dc4:	f1a4 0401 	sub.w	r4, r4, #1
 80a2dc8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2dcc:	db0d      	blt.n	80a2dea <__adddf3+0xb2>
 80a2dce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2dd2:	fa22 f205 	lsr.w	r2, r2, r5
 80a2dd6:	1880      	adds	r0, r0, r2
 80a2dd8:	f141 0100 	adc.w	r1, r1, #0
 80a2ddc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2de0:	1880      	adds	r0, r0, r2
 80a2de2:	fa43 f305 	asr.w	r3, r3, r5
 80a2de6:	4159      	adcs	r1, r3
 80a2de8:	e00e      	b.n	80a2e08 <__adddf3+0xd0>
 80a2dea:	f1a5 0520 	sub.w	r5, r5, #32
 80a2dee:	f10e 0e20 	add.w	lr, lr, #32
 80a2df2:	2a01      	cmp	r2, #1
 80a2df4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2df8:	bf28      	it	cs
 80a2dfa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2dfe:	fa43 f305 	asr.w	r3, r3, r5
 80a2e02:	18c0      	adds	r0, r0, r3
 80a2e04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2e0c:	d507      	bpl.n	80a2e1e <__adddf3+0xe6>
 80a2e0e:	f04f 0e00 	mov.w	lr, #0
 80a2e12:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2e16:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2e1a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2e1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2e22:	d31b      	bcc.n	80a2e5c <__adddf3+0x124>
 80a2e24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2e28:	d30c      	bcc.n	80a2e44 <__adddf3+0x10c>
 80a2e2a:	0849      	lsrs	r1, r1, #1
 80a2e2c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2e30:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2e34:	f104 0401 	add.w	r4, r4, #1
 80a2e38:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2e3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2e40:	f080 809a 	bcs.w	80a2f78 <__adddf3+0x240>
 80a2e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2e48:	bf08      	it	eq
 80a2e4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2e4e:	f150 0000 	adcs.w	r0, r0, #0
 80a2e52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2e56:	ea41 0105 	orr.w	r1, r1, r5
 80a2e5a:	bd30      	pop	{r4, r5, pc}
 80a2e5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2e60:	4140      	adcs	r0, r0
 80a2e62:	eb41 0101 	adc.w	r1, r1, r1
 80a2e66:	3c01      	subs	r4, #1
 80a2e68:	bf28      	it	cs
 80a2e6a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2e6e:	d2e9      	bcs.n	80a2e44 <__adddf3+0x10c>
 80a2e70:	f091 0f00 	teq	r1, #0
 80a2e74:	bf04      	itt	eq
 80a2e76:	4601      	moveq	r1, r0
 80a2e78:	2000      	moveq	r0, #0
 80a2e7a:	fab1 f381 	clz	r3, r1
 80a2e7e:	bf08      	it	eq
 80a2e80:	3320      	addeq	r3, #32
 80a2e82:	f1a3 030b 	sub.w	r3, r3, #11
 80a2e86:	f1b3 0220 	subs.w	r2, r3, #32
 80a2e8a:	da0c      	bge.n	80a2ea6 <__adddf3+0x16e>
 80a2e8c:	320c      	adds	r2, #12
 80a2e8e:	dd08      	ble.n	80a2ea2 <__adddf3+0x16a>
 80a2e90:	f102 0c14 	add.w	ip, r2, #20
 80a2e94:	f1c2 020c 	rsb	r2, r2, #12
 80a2e98:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2e9c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2ea0:	e00c      	b.n	80a2ebc <__adddf3+0x184>
 80a2ea2:	f102 0214 	add.w	r2, r2, #20
 80a2ea6:	bfd8      	it	le
 80a2ea8:	f1c2 0c20 	rsble	ip, r2, #32
 80a2eac:	fa01 f102 	lsl.w	r1, r1, r2
 80a2eb0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2eb4:	bfdc      	itt	le
 80a2eb6:	ea41 010c 	orrle.w	r1, r1, ip
 80a2eba:	4090      	lslle	r0, r2
 80a2ebc:	1ae4      	subs	r4, r4, r3
 80a2ebe:	bfa2      	ittt	ge
 80a2ec0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2ec4:	4329      	orrge	r1, r5
 80a2ec6:	bd30      	popge	{r4, r5, pc}
 80a2ec8:	ea6f 0404 	mvn.w	r4, r4
 80a2ecc:	3c1f      	subs	r4, #31
 80a2ece:	da1c      	bge.n	80a2f0a <__adddf3+0x1d2>
 80a2ed0:	340c      	adds	r4, #12
 80a2ed2:	dc0e      	bgt.n	80a2ef2 <__adddf3+0x1ba>
 80a2ed4:	f104 0414 	add.w	r4, r4, #20
 80a2ed8:	f1c4 0220 	rsb	r2, r4, #32
 80a2edc:	fa20 f004 	lsr.w	r0, r0, r4
 80a2ee0:	fa01 f302 	lsl.w	r3, r1, r2
 80a2ee4:	ea40 0003 	orr.w	r0, r0, r3
 80a2ee8:	fa21 f304 	lsr.w	r3, r1, r4
 80a2eec:	ea45 0103 	orr.w	r1, r5, r3
 80a2ef0:	bd30      	pop	{r4, r5, pc}
 80a2ef2:	f1c4 040c 	rsb	r4, r4, #12
 80a2ef6:	f1c4 0220 	rsb	r2, r4, #32
 80a2efa:	fa20 f002 	lsr.w	r0, r0, r2
 80a2efe:	fa01 f304 	lsl.w	r3, r1, r4
 80a2f02:	ea40 0003 	orr.w	r0, r0, r3
 80a2f06:	4629      	mov	r1, r5
 80a2f08:	bd30      	pop	{r4, r5, pc}
 80a2f0a:	fa21 f004 	lsr.w	r0, r1, r4
 80a2f0e:	4629      	mov	r1, r5
 80a2f10:	bd30      	pop	{r4, r5, pc}
 80a2f12:	f094 0f00 	teq	r4, #0
 80a2f16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2f1a:	bf06      	itte	eq
 80a2f1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2f20:	3401      	addeq	r4, #1
 80a2f22:	3d01      	subne	r5, #1
 80a2f24:	e74e      	b.n	80a2dc4 <__adddf3+0x8c>
 80a2f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2f2a:	bf18      	it	ne
 80a2f2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2f30:	d029      	beq.n	80a2f86 <__adddf3+0x24e>
 80a2f32:	ea94 0f05 	teq	r4, r5
 80a2f36:	bf08      	it	eq
 80a2f38:	ea90 0f02 	teqeq	r0, r2
 80a2f3c:	d005      	beq.n	80a2f4a <__adddf3+0x212>
 80a2f3e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2f42:	bf04      	itt	eq
 80a2f44:	4619      	moveq	r1, r3
 80a2f46:	4610      	moveq	r0, r2
 80a2f48:	bd30      	pop	{r4, r5, pc}
 80a2f4a:	ea91 0f03 	teq	r1, r3
 80a2f4e:	bf1e      	ittt	ne
 80a2f50:	2100      	movne	r1, #0
 80a2f52:	2000      	movne	r0, #0
 80a2f54:	bd30      	popne	{r4, r5, pc}
 80a2f56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2f5a:	d105      	bne.n	80a2f68 <__adddf3+0x230>
 80a2f5c:	0040      	lsls	r0, r0, #1
 80a2f5e:	4149      	adcs	r1, r1
 80a2f60:	bf28      	it	cs
 80a2f62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2f66:	bd30      	pop	{r4, r5, pc}
 80a2f68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2f6c:	bf3c      	itt	cc
 80a2f6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2f72:	bd30      	popcc	{r4, r5, pc}
 80a2f74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2f7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2f80:	f04f 0000 	mov.w	r0, #0
 80a2f84:	bd30      	pop	{r4, r5, pc}
 80a2f86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2f8a:	bf1a      	itte	ne
 80a2f8c:	4619      	movne	r1, r3
 80a2f8e:	4610      	movne	r0, r2
 80a2f90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2f94:	bf1c      	itt	ne
 80a2f96:	460b      	movne	r3, r1
 80a2f98:	4602      	movne	r2, r0
 80a2f9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f9e:	bf06      	itte	eq
 80a2fa0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2fa4:	ea91 0f03 	teqeq	r1, r3
 80a2fa8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2fac:	bd30      	pop	{r4, r5, pc}
 80a2fae:	bf00      	nop

080a2fb0 <__aeabi_ui2d>:
 80a2fb0:	f090 0f00 	teq	r0, #0
 80a2fb4:	bf04      	itt	eq
 80a2fb6:	2100      	moveq	r1, #0
 80a2fb8:	4770      	bxeq	lr
 80a2fba:	b530      	push	{r4, r5, lr}
 80a2fbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2fc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fc4:	f04f 0500 	mov.w	r5, #0
 80a2fc8:	f04f 0100 	mov.w	r1, #0
 80a2fcc:	e750      	b.n	80a2e70 <__adddf3+0x138>
 80a2fce:	bf00      	nop

080a2fd0 <__aeabi_i2d>:
 80a2fd0:	f090 0f00 	teq	r0, #0
 80a2fd4:	bf04      	itt	eq
 80a2fd6:	2100      	moveq	r1, #0
 80a2fd8:	4770      	bxeq	lr
 80a2fda:	b530      	push	{r4, r5, lr}
 80a2fdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2fe0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fe4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2fe8:	bf48      	it	mi
 80a2fea:	4240      	negmi	r0, r0
 80a2fec:	f04f 0100 	mov.w	r1, #0
 80a2ff0:	e73e      	b.n	80a2e70 <__adddf3+0x138>
 80a2ff2:	bf00      	nop

080a2ff4 <__aeabi_f2d>:
 80a2ff4:	0042      	lsls	r2, r0, #1
 80a2ff6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2ffa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2ffe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3002:	bf1f      	itttt	ne
 80a3004:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3008:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a300c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3010:	4770      	bxne	lr
 80a3012:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3016:	bf08      	it	eq
 80a3018:	4770      	bxeq	lr
 80a301a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a301e:	bf04      	itt	eq
 80a3020:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3024:	4770      	bxeq	lr
 80a3026:	b530      	push	{r4, r5, lr}
 80a3028:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a302c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3034:	e71c      	b.n	80a2e70 <__adddf3+0x138>
 80a3036:	bf00      	nop

080a3038 <__aeabi_ul2d>:
 80a3038:	ea50 0201 	orrs.w	r2, r0, r1
 80a303c:	bf08      	it	eq
 80a303e:	4770      	bxeq	lr
 80a3040:	b530      	push	{r4, r5, lr}
 80a3042:	f04f 0500 	mov.w	r5, #0
 80a3046:	e00a      	b.n	80a305e <__aeabi_l2d+0x16>

080a3048 <__aeabi_l2d>:
 80a3048:	ea50 0201 	orrs.w	r2, r0, r1
 80a304c:	bf08      	it	eq
 80a304e:	4770      	bxeq	lr
 80a3050:	b530      	push	{r4, r5, lr}
 80a3052:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3056:	d502      	bpl.n	80a305e <__aeabi_l2d+0x16>
 80a3058:	4240      	negs	r0, r0
 80a305a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a305e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3062:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3066:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a306a:	f43f aed8 	beq.w	80a2e1e <__adddf3+0xe6>
 80a306e:	f04f 0203 	mov.w	r2, #3
 80a3072:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3076:	bf18      	it	ne
 80a3078:	3203      	addne	r2, #3
 80a307a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a307e:	bf18      	it	ne
 80a3080:	3203      	addne	r2, #3
 80a3082:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3086:	f1c2 0320 	rsb	r3, r2, #32
 80a308a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a308e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3092:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3096:	ea40 000e 	orr.w	r0, r0, lr
 80a309a:	fa21 f102 	lsr.w	r1, r1, r2
 80a309e:	4414      	add	r4, r2
 80a30a0:	e6bd      	b.n	80a2e1e <__adddf3+0xe6>
 80a30a2:	bf00      	nop

080a30a4 <__aeabi_dmul>:
 80a30a4:	b570      	push	{r4, r5, r6, lr}
 80a30a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a30aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a30ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a30b2:	bf1d      	ittte	ne
 80a30b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a30b8:	ea94 0f0c 	teqne	r4, ip
 80a30bc:	ea95 0f0c 	teqne	r5, ip
 80a30c0:	f000 f8de 	bleq	80a3280 <__aeabi_dmul+0x1dc>
 80a30c4:	442c      	add	r4, r5
 80a30c6:	ea81 0603 	eor.w	r6, r1, r3
 80a30ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a30ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a30d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a30d6:	bf18      	it	ne
 80a30d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a30dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a30e4:	d038      	beq.n	80a3158 <__aeabi_dmul+0xb4>
 80a30e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a30ea:	f04f 0500 	mov.w	r5, #0
 80a30ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a30f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a30f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a30fa:	f04f 0600 	mov.w	r6, #0
 80a30fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3102:	f09c 0f00 	teq	ip, #0
 80a3106:	bf18      	it	ne
 80a3108:	f04e 0e01 	orrne.w	lr, lr, #1
 80a310c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3110:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3114:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3118:	d204      	bcs.n	80a3124 <__aeabi_dmul+0x80>
 80a311a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a311e:	416d      	adcs	r5, r5
 80a3120:	eb46 0606 	adc.w	r6, r6, r6
 80a3124:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3128:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a312c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3130:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3134:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3138:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a313c:	bf88      	it	hi
 80a313e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3142:	d81e      	bhi.n	80a3182 <__aeabi_dmul+0xde>
 80a3144:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3148:	bf08      	it	eq
 80a314a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a314e:	f150 0000 	adcs.w	r0, r0, #0
 80a3152:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3156:	bd70      	pop	{r4, r5, r6, pc}
 80a3158:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a315c:	ea46 0101 	orr.w	r1, r6, r1
 80a3160:	ea40 0002 	orr.w	r0, r0, r2
 80a3164:	ea81 0103 	eor.w	r1, r1, r3
 80a3168:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a316c:	bfc2      	ittt	gt
 80a316e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3172:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3176:	bd70      	popgt	{r4, r5, r6, pc}
 80a3178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a317c:	f04f 0e00 	mov.w	lr, #0
 80a3180:	3c01      	subs	r4, #1
 80a3182:	f300 80ab 	bgt.w	80a32dc <__aeabi_dmul+0x238>
 80a3186:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a318a:	bfde      	ittt	le
 80a318c:	2000      	movle	r0, #0
 80a318e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3192:	bd70      	pople	{r4, r5, r6, pc}
 80a3194:	f1c4 0400 	rsb	r4, r4, #0
 80a3198:	3c20      	subs	r4, #32
 80a319a:	da35      	bge.n	80a3208 <__aeabi_dmul+0x164>
 80a319c:	340c      	adds	r4, #12
 80a319e:	dc1b      	bgt.n	80a31d8 <__aeabi_dmul+0x134>
 80a31a0:	f104 0414 	add.w	r4, r4, #20
 80a31a4:	f1c4 0520 	rsb	r5, r4, #32
 80a31a8:	fa00 f305 	lsl.w	r3, r0, r5
 80a31ac:	fa20 f004 	lsr.w	r0, r0, r4
 80a31b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a31b4:	ea40 0002 	orr.w	r0, r0, r2
 80a31b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a31bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a31c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a31c4:	fa21 f604 	lsr.w	r6, r1, r4
 80a31c8:	eb42 0106 	adc.w	r1, r2, r6
 80a31cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a31d0:	bf08      	it	eq
 80a31d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a31d6:	bd70      	pop	{r4, r5, r6, pc}
 80a31d8:	f1c4 040c 	rsb	r4, r4, #12
 80a31dc:	f1c4 0520 	rsb	r5, r4, #32
 80a31e0:	fa00 f304 	lsl.w	r3, r0, r4
 80a31e4:	fa20 f005 	lsr.w	r0, r0, r5
 80a31e8:	fa01 f204 	lsl.w	r2, r1, r4
 80a31ec:	ea40 0002 	orr.w	r0, r0, r2
 80a31f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a31f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a31f8:	f141 0100 	adc.w	r1, r1, #0
 80a31fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3200:	bf08      	it	eq
 80a3202:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3206:	bd70      	pop	{r4, r5, r6, pc}
 80a3208:	f1c4 0520 	rsb	r5, r4, #32
 80a320c:	fa00 f205 	lsl.w	r2, r0, r5
 80a3210:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3214:	fa20 f304 	lsr.w	r3, r0, r4
 80a3218:	fa01 f205 	lsl.w	r2, r1, r5
 80a321c:	ea43 0302 	orr.w	r3, r3, r2
 80a3220:	fa21 f004 	lsr.w	r0, r1, r4
 80a3224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3228:	fa21 f204 	lsr.w	r2, r1, r4
 80a322c:	ea20 0002 	bic.w	r0, r0, r2
 80a3230:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3238:	bf08      	it	eq
 80a323a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a323e:	bd70      	pop	{r4, r5, r6, pc}
 80a3240:	f094 0f00 	teq	r4, #0
 80a3244:	d10f      	bne.n	80a3266 <__aeabi_dmul+0x1c2>
 80a3246:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a324a:	0040      	lsls	r0, r0, #1
 80a324c:	eb41 0101 	adc.w	r1, r1, r1
 80a3250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3254:	bf08      	it	eq
 80a3256:	3c01      	subeq	r4, #1
 80a3258:	d0f7      	beq.n	80a324a <__aeabi_dmul+0x1a6>
 80a325a:	ea41 0106 	orr.w	r1, r1, r6
 80a325e:	f095 0f00 	teq	r5, #0
 80a3262:	bf18      	it	ne
 80a3264:	4770      	bxne	lr
 80a3266:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a326a:	0052      	lsls	r2, r2, #1
 80a326c:	eb43 0303 	adc.w	r3, r3, r3
 80a3270:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3274:	bf08      	it	eq
 80a3276:	3d01      	subeq	r5, #1
 80a3278:	d0f7      	beq.n	80a326a <__aeabi_dmul+0x1c6>
 80a327a:	ea43 0306 	orr.w	r3, r3, r6
 80a327e:	4770      	bx	lr
 80a3280:	ea94 0f0c 	teq	r4, ip
 80a3284:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3288:	bf18      	it	ne
 80a328a:	ea95 0f0c 	teqne	r5, ip
 80a328e:	d00c      	beq.n	80a32aa <__aeabi_dmul+0x206>
 80a3290:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3294:	bf18      	it	ne
 80a3296:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a329a:	d1d1      	bne.n	80a3240 <__aeabi_dmul+0x19c>
 80a329c:	ea81 0103 	eor.w	r1, r1, r3
 80a32a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32a4:	f04f 0000 	mov.w	r0, #0
 80a32a8:	bd70      	pop	{r4, r5, r6, pc}
 80a32aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a32ae:	bf06      	itte	eq
 80a32b0:	4610      	moveq	r0, r2
 80a32b2:	4619      	moveq	r1, r3
 80a32b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a32b8:	d019      	beq.n	80a32ee <__aeabi_dmul+0x24a>
 80a32ba:	ea94 0f0c 	teq	r4, ip
 80a32be:	d102      	bne.n	80a32c6 <__aeabi_dmul+0x222>
 80a32c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a32c4:	d113      	bne.n	80a32ee <__aeabi_dmul+0x24a>
 80a32c6:	ea95 0f0c 	teq	r5, ip
 80a32ca:	d105      	bne.n	80a32d8 <__aeabi_dmul+0x234>
 80a32cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a32d0:	bf1c      	itt	ne
 80a32d2:	4610      	movne	r0, r2
 80a32d4:	4619      	movne	r1, r3
 80a32d6:	d10a      	bne.n	80a32ee <__aeabi_dmul+0x24a>
 80a32d8:	ea81 0103 	eor.w	r1, r1, r3
 80a32dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a32e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a32e8:	f04f 0000 	mov.w	r0, #0
 80a32ec:	bd70      	pop	{r4, r5, r6, pc}
 80a32ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a32f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a32f6:	bd70      	pop	{r4, r5, r6, pc}

080a32f8 <__aeabi_ddiv>:
 80a32f8:	b570      	push	{r4, r5, r6, lr}
 80a32fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a32fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3302:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3306:	bf1d      	ittte	ne
 80a3308:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a330c:	ea94 0f0c 	teqne	r4, ip
 80a3310:	ea95 0f0c 	teqne	r5, ip
 80a3314:	f000 f8a7 	bleq	80a3466 <__aeabi_ddiv+0x16e>
 80a3318:	eba4 0405 	sub.w	r4, r4, r5
 80a331c:	ea81 0e03 	eor.w	lr, r1, r3
 80a3320:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3324:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3328:	f000 8088 	beq.w	80a343c <__aeabi_ddiv+0x144>
 80a332c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3330:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3334:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3338:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a333c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3340:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3344:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3348:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a334c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3350:	429d      	cmp	r5, r3
 80a3352:	bf08      	it	eq
 80a3354:	4296      	cmpeq	r6, r2
 80a3356:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a335a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a335e:	d202      	bcs.n	80a3366 <__aeabi_ddiv+0x6e>
 80a3360:	085b      	lsrs	r3, r3, #1
 80a3362:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3366:	1ab6      	subs	r6, r6, r2
 80a3368:	eb65 0503 	sbc.w	r5, r5, r3
 80a336c:	085b      	lsrs	r3, r3, #1
 80a336e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3372:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3376:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a337a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a337e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3382:	bf22      	ittt	cs
 80a3384:	1ab6      	subcs	r6, r6, r2
 80a3386:	4675      	movcs	r5, lr
 80a3388:	ea40 000c 	orrcs.w	r0, r0, ip
 80a338c:	085b      	lsrs	r3, r3, #1
 80a338e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3392:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3396:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a339a:	bf22      	ittt	cs
 80a339c:	1ab6      	subcs	r6, r6, r2
 80a339e:	4675      	movcs	r5, lr
 80a33a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a33a4:	085b      	lsrs	r3, r3, #1
 80a33a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a33aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a33ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a33b2:	bf22      	ittt	cs
 80a33b4:	1ab6      	subcs	r6, r6, r2
 80a33b6:	4675      	movcs	r5, lr
 80a33b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a33bc:	085b      	lsrs	r3, r3, #1
 80a33be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a33c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a33c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a33ca:	bf22      	ittt	cs
 80a33cc:	1ab6      	subcs	r6, r6, r2
 80a33ce:	4675      	movcs	r5, lr
 80a33d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a33d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a33d8:	d018      	beq.n	80a340c <__aeabi_ddiv+0x114>
 80a33da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a33de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a33e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a33e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a33ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a33ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a33f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a33f6:	d1c0      	bne.n	80a337a <__aeabi_ddiv+0x82>
 80a33f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a33fc:	d10b      	bne.n	80a3416 <__aeabi_ddiv+0x11e>
 80a33fe:	ea41 0100 	orr.w	r1, r1, r0
 80a3402:	f04f 0000 	mov.w	r0, #0
 80a3406:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a340a:	e7b6      	b.n	80a337a <__aeabi_ddiv+0x82>
 80a340c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3410:	bf04      	itt	eq
 80a3412:	4301      	orreq	r1, r0
 80a3414:	2000      	moveq	r0, #0
 80a3416:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a341a:	bf88      	it	hi
 80a341c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3420:	f63f aeaf 	bhi.w	80a3182 <__aeabi_dmul+0xde>
 80a3424:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3428:	bf04      	itt	eq
 80a342a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a342e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3432:	f150 0000 	adcs.w	r0, r0, #0
 80a3436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a343a:	bd70      	pop	{r4, r5, r6, pc}
 80a343c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3440:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3444:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3448:	bfc2      	ittt	gt
 80a344a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a344e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3452:	bd70      	popgt	{r4, r5, r6, pc}
 80a3454:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3458:	f04f 0e00 	mov.w	lr, #0
 80a345c:	3c01      	subs	r4, #1
 80a345e:	e690      	b.n	80a3182 <__aeabi_dmul+0xde>
 80a3460:	ea45 0e06 	orr.w	lr, r5, r6
 80a3464:	e68d      	b.n	80a3182 <__aeabi_dmul+0xde>
 80a3466:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a346a:	ea94 0f0c 	teq	r4, ip
 80a346e:	bf08      	it	eq
 80a3470:	ea95 0f0c 	teqeq	r5, ip
 80a3474:	f43f af3b 	beq.w	80a32ee <__aeabi_dmul+0x24a>
 80a3478:	ea94 0f0c 	teq	r4, ip
 80a347c:	d10a      	bne.n	80a3494 <__aeabi_ddiv+0x19c>
 80a347e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3482:	f47f af34 	bne.w	80a32ee <__aeabi_dmul+0x24a>
 80a3486:	ea95 0f0c 	teq	r5, ip
 80a348a:	f47f af25 	bne.w	80a32d8 <__aeabi_dmul+0x234>
 80a348e:	4610      	mov	r0, r2
 80a3490:	4619      	mov	r1, r3
 80a3492:	e72c      	b.n	80a32ee <__aeabi_dmul+0x24a>
 80a3494:	ea95 0f0c 	teq	r5, ip
 80a3498:	d106      	bne.n	80a34a8 <__aeabi_ddiv+0x1b0>
 80a349a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a349e:	f43f aefd 	beq.w	80a329c <__aeabi_dmul+0x1f8>
 80a34a2:	4610      	mov	r0, r2
 80a34a4:	4619      	mov	r1, r3
 80a34a6:	e722      	b.n	80a32ee <__aeabi_dmul+0x24a>
 80a34a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a34ac:	bf18      	it	ne
 80a34ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a34b2:	f47f aec5 	bne.w	80a3240 <__aeabi_dmul+0x19c>
 80a34b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a34ba:	f47f af0d 	bne.w	80a32d8 <__aeabi_dmul+0x234>
 80a34be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a34c2:	f47f aeeb 	bne.w	80a329c <__aeabi_dmul+0x1f8>
 80a34c6:	e712      	b.n	80a32ee <__aeabi_dmul+0x24a>

080a34c8 <__gedf2>:
 80a34c8:	f04f 3cff 	mov.w	ip, #4294967295
 80a34cc:	e006      	b.n	80a34dc <__cmpdf2+0x4>
 80a34ce:	bf00      	nop

080a34d0 <__ledf2>:
 80a34d0:	f04f 0c01 	mov.w	ip, #1
 80a34d4:	e002      	b.n	80a34dc <__cmpdf2+0x4>
 80a34d6:	bf00      	nop

080a34d8 <__cmpdf2>:
 80a34d8:	f04f 0c01 	mov.w	ip, #1
 80a34dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a34e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a34e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a34e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a34ec:	bf18      	it	ne
 80a34ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a34f2:	d01b      	beq.n	80a352c <__cmpdf2+0x54>
 80a34f4:	b001      	add	sp, #4
 80a34f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a34fa:	bf0c      	ite	eq
 80a34fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3500:	ea91 0f03 	teqne	r1, r3
 80a3504:	bf02      	ittt	eq
 80a3506:	ea90 0f02 	teqeq	r0, r2
 80a350a:	2000      	moveq	r0, #0
 80a350c:	4770      	bxeq	lr
 80a350e:	f110 0f00 	cmn.w	r0, #0
 80a3512:	ea91 0f03 	teq	r1, r3
 80a3516:	bf58      	it	pl
 80a3518:	4299      	cmppl	r1, r3
 80a351a:	bf08      	it	eq
 80a351c:	4290      	cmpeq	r0, r2
 80a351e:	bf2c      	ite	cs
 80a3520:	17d8      	asrcs	r0, r3, #31
 80a3522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3526:	f040 0001 	orr.w	r0, r0, #1
 80a352a:	4770      	bx	lr
 80a352c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3534:	d102      	bne.n	80a353c <__cmpdf2+0x64>
 80a3536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a353a:	d107      	bne.n	80a354c <__cmpdf2+0x74>
 80a353c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3544:	d1d6      	bne.n	80a34f4 <__cmpdf2+0x1c>
 80a3546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a354a:	d0d3      	beq.n	80a34f4 <__cmpdf2+0x1c>
 80a354c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3550:	4770      	bx	lr
 80a3552:	bf00      	nop

080a3554 <__aeabi_cdrcmple>:
 80a3554:	4684      	mov	ip, r0
 80a3556:	4610      	mov	r0, r2
 80a3558:	4662      	mov	r2, ip
 80a355a:	468c      	mov	ip, r1
 80a355c:	4619      	mov	r1, r3
 80a355e:	4663      	mov	r3, ip
 80a3560:	e000      	b.n	80a3564 <__aeabi_cdcmpeq>
 80a3562:	bf00      	nop

080a3564 <__aeabi_cdcmpeq>:
 80a3564:	b501      	push	{r0, lr}
 80a3566:	f7ff ffb7 	bl	80a34d8 <__cmpdf2>
 80a356a:	2800      	cmp	r0, #0
 80a356c:	bf48      	it	mi
 80a356e:	f110 0f00 	cmnmi.w	r0, #0
 80a3572:	bd01      	pop	{r0, pc}

080a3574 <__aeabi_dcmpeq>:
 80a3574:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3578:	f7ff fff4 	bl	80a3564 <__aeabi_cdcmpeq>
 80a357c:	bf0c      	ite	eq
 80a357e:	2001      	moveq	r0, #1
 80a3580:	2000      	movne	r0, #0
 80a3582:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3586:	bf00      	nop

080a3588 <__aeabi_dcmplt>:
 80a3588:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a358c:	f7ff ffea 	bl	80a3564 <__aeabi_cdcmpeq>
 80a3590:	bf34      	ite	cc
 80a3592:	2001      	movcc	r0, #1
 80a3594:	2000      	movcs	r0, #0
 80a3596:	f85d fb08 	ldr.w	pc, [sp], #8
 80a359a:	bf00      	nop

080a359c <__aeabi_dcmple>:
 80a359c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a35a0:	f7ff ffe0 	bl	80a3564 <__aeabi_cdcmpeq>
 80a35a4:	bf94      	ite	ls
 80a35a6:	2001      	movls	r0, #1
 80a35a8:	2000      	movhi	r0, #0
 80a35aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a35ae:	bf00      	nop

080a35b0 <__aeabi_dcmpge>:
 80a35b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a35b4:	f7ff ffce 	bl	80a3554 <__aeabi_cdrcmple>
 80a35b8:	bf94      	ite	ls
 80a35ba:	2001      	movls	r0, #1
 80a35bc:	2000      	movhi	r0, #0
 80a35be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a35c2:	bf00      	nop

080a35c4 <__aeabi_dcmpgt>:
 80a35c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a35c8:	f7ff ffc4 	bl	80a3554 <__aeabi_cdrcmple>
 80a35cc:	bf34      	ite	cc
 80a35ce:	2001      	movcc	r0, #1
 80a35d0:	2000      	movcs	r0, #0
 80a35d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a35d6:	bf00      	nop

080a35d8 <__aeabi_dcmpun>:
 80a35d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a35dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a35e0:	d102      	bne.n	80a35e8 <__aeabi_dcmpun+0x10>
 80a35e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a35e6:	d10a      	bne.n	80a35fe <__aeabi_dcmpun+0x26>
 80a35e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a35ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a35f0:	d102      	bne.n	80a35f8 <__aeabi_dcmpun+0x20>
 80a35f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a35f6:	d102      	bne.n	80a35fe <__aeabi_dcmpun+0x26>
 80a35f8:	f04f 0000 	mov.w	r0, #0
 80a35fc:	4770      	bx	lr
 80a35fe:	f04f 0001 	mov.w	r0, #1
 80a3602:	4770      	bx	lr

080a3604 <__aeabi_d2iz>:
 80a3604:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3608:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a360c:	d215      	bcs.n	80a363a <__aeabi_d2iz+0x36>
 80a360e:	d511      	bpl.n	80a3634 <__aeabi_d2iz+0x30>
 80a3610:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3614:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3618:	d912      	bls.n	80a3640 <__aeabi_d2iz+0x3c>
 80a361a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a361e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3622:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a362a:	fa23 f002 	lsr.w	r0, r3, r2
 80a362e:	bf18      	it	ne
 80a3630:	4240      	negne	r0, r0
 80a3632:	4770      	bx	lr
 80a3634:	f04f 0000 	mov.w	r0, #0
 80a3638:	4770      	bx	lr
 80a363a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a363e:	d105      	bne.n	80a364c <__aeabi_d2iz+0x48>
 80a3640:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3644:	bf08      	it	eq
 80a3646:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a364a:	4770      	bx	lr
 80a364c:	f04f 0000 	mov.w	r0, #0
 80a3650:	4770      	bx	lr
 80a3652:	bf00      	nop

080a3654 <__aeabi_d2uiz>:
 80a3654:	004a      	lsls	r2, r1, #1
 80a3656:	d211      	bcs.n	80a367c <__aeabi_d2uiz+0x28>
 80a3658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a365c:	d211      	bcs.n	80a3682 <__aeabi_d2uiz+0x2e>
 80a365e:	d50d      	bpl.n	80a367c <__aeabi_d2uiz+0x28>
 80a3660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3668:	d40e      	bmi.n	80a3688 <__aeabi_d2uiz+0x34>
 80a366a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a366e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3676:	fa23 f002 	lsr.w	r0, r3, r2
 80a367a:	4770      	bx	lr
 80a367c:	f04f 0000 	mov.w	r0, #0
 80a3680:	4770      	bx	lr
 80a3682:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3686:	d102      	bne.n	80a368e <__aeabi_d2uiz+0x3a>
 80a3688:	f04f 30ff 	mov.w	r0, #4294967295
 80a368c:	4770      	bx	lr
 80a368e:	f04f 0000 	mov.w	r0, #0
 80a3692:	4770      	bx	lr

080a3694 <__aeabi_d2f>:
 80a3694:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3698:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a369c:	bf24      	itt	cs
 80a369e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a36a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a36a6:	d90d      	bls.n	80a36c4 <__aeabi_d2f+0x30>
 80a36a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a36ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a36b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a36b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a36b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a36bc:	bf08      	it	eq
 80a36be:	f020 0001 	biceq.w	r0, r0, #1
 80a36c2:	4770      	bx	lr
 80a36c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a36c8:	d121      	bne.n	80a370e <__aeabi_d2f+0x7a>
 80a36ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a36ce:	bfbc      	itt	lt
 80a36d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a36d4:	4770      	bxlt	lr
 80a36d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a36da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a36de:	f1c2 0218 	rsb	r2, r2, #24
 80a36e2:	f1c2 0c20 	rsb	ip, r2, #32
 80a36e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a36ea:	fa20 f002 	lsr.w	r0, r0, r2
 80a36ee:	bf18      	it	ne
 80a36f0:	f040 0001 	orrne.w	r0, r0, #1
 80a36f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a36f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a36fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3700:	ea40 000c 	orr.w	r0, r0, ip
 80a3704:	fa23 f302 	lsr.w	r3, r3, r2
 80a3708:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a370c:	e7cc      	b.n	80a36a8 <__aeabi_d2f+0x14>
 80a370e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3712:	d107      	bne.n	80a3724 <__aeabi_d2f+0x90>
 80a3714:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3718:	bf1e      	ittt	ne
 80a371a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a371e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3722:	4770      	bxne	lr
 80a3724:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3728:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a372c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3730:	4770      	bx	lr
 80a3732:	bf00      	nop

080a3734 <__aeabi_frsub>:
 80a3734:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3738:	e002      	b.n	80a3740 <__addsf3>
 80a373a:	bf00      	nop

080a373c <__aeabi_fsub>:
 80a373c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3740 <__addsf3>:
 80a3740:	0042      	lsls	r2, r0, #1
 80a3742:	bf1f      	itttt	ne
 80a3744:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3748:	ea92 0f03 	teqne	r2, r3
 80a374c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3750:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3754:	d06a      	beq.n	80a382c <__addsf3+0xec>
 80a3756:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a375a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a375e:	bfc1      	itttt	gt
 80a3760:	18d2      	addgt	r2, r2, r3
 80a3762:	4041      	eorgt	r1, r0
 80a3764:	4048      	eorgt	r0, r1
 80a3766:	4041      	eorgt	r1, r0
 80a3768:	bfb8      	it	lt
 80a376a:	425b      	neglt	r3, r3
 80a376c:	2b19      	cmp	r3, #25
 80a376e:	bf88      	it	hi
 80a3770:	4770      	bxhi	lr
 80a3772:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3776:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a377a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a377e:	bf18      	it	ne
 80a3780:	4240      	negne	r0, r0
 80a3782:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3786:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a378a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a378e:	bf18      	it	ne
 80a3790:	4249      	negne	r1, r1
 80a3792:	ea92 0f03 	teq	r2, r3
 80a3796:	d03f      	beq.n	80a3818 <__addsf3+0xd8>
 80a3798:	f1a2 0201 	sub.w	r2, r2, #1
 80a379c:	fa41 fc03 	asr.w	ip, r1, r3
 80a37a0:	eb10 000c 	adds.w	r0, r0, ip
 80a37a4:	f1c3 0320 	rsb	r3, r3, #32
 80a37a8:	fa01 f103 	lsl.w	r1, r1, r3
 80a37ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a37b0:	d502      	bpl.n	80a37b8 <__addsf3+0x78>
 80a37b2:	4249      	negs	r1, r1
 80a37b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a37b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a37bc:	d313      	bcc.n	80a37e6 <__addsf3+0xa6>
 80a37be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a37c2:	d306      	bcc.n	80a37d2 <__addsf3+0x92>
 80a37c4:	0840      	lsrs	r0, r0, #1
 80a37c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a37ca:	f102 0201 	add.w	r2, r2, #1
 80a37ce:	2afe      	cmp	r2, #254	; 0xfe
 80a37d0:	d251      	bcs.n	80a3876 <__addsf3+0x136>
 80a37d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a37d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a37da:	bf08      	it	eq
 80a37dc:	f020 0001 	biceq.w	r0, r0, #1
 80a37e0:	ea40 0003 	orr.w	r0, r0, r3
 80a37e4:	4770      	bx	lr
 80a37e6:	0049      	lsls	r1, r1, #1
 80a37e8:	eb40 0000 	adc.w	r0, r0, r0
 80a37ec:	3a01      	subs	r2, #1
 80a37ee:	bf28      	it	cs
 80a37f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a37f4:	d2ed      	bcs.n	80a37d2 <__addsf3+0x92>
 80a37f6:	fab0 fc80 	clz	ip, r0
 80a37fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a37fe:	ebb2 020c 	subs.w	r2, r2, ip
 80a3802:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3806:	bfaa      	itet	ge
 80a3808:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a380c:	4252      	neglt	r2, r2
 80a380e:	4318      	orrge	r0, r3
 80a3810:	bfbc      	itt	lt
 80a3812:	40d0      	lsrlt	r0, r2
 80a3814:	4318      	orrlt	r0, r3
 80a3816:	4770      	bx	lr
 80a3818:	f092 0f00 	teq	r2, #0
 80a381c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3820:	bf06      	itte	eq
 80a3822:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3826:	3201      	addeq	r2, #1
 80a3828:	3b01      	subne	r3, #1
 80a382a:	e7b5      	b.n	80a3798 <__addsf3+0x58>
 80a382c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3830:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3834:	bf18      	it	ne
 80a3836:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a383a:	d021      	beq.n	80a3880 <__addsf3+0x140>
 80a383c:	ea92 0f03 	teq	r2, r3
 80a3840:	d004      	beq.n	80a384c <__addsf3+0x10c>
 80a3842:	f092 0f00 	teq	r2, #0
 80a3846:	bf08      	it	eq
 80a3848:	4608      	moveq	r0, r1
 80a384a:	4770      	bx	lr
 80a384c:	ea90 0f01 	teq	r0, r1
 80a3850:	bf1c      	itt	ne
 80a3852:	2000      	movne	r0, #0
 80a3854:	4770      	bxne	lr
 80a3856:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a385a:	d104      	bne.n	80a3866 <__addsf3+0x126>
 80a385c:	0040      	lsls	r0, r0, #1
 80a385e:	bf28      	it	cs
 80a3860:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3864:	4770      	bx	lr
 80a3866:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a386a:	bf3c      	itt	cc
 80a386c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3870:	4770      	bxcc	lr
 80a3872:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3876:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a387a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a387e:	4770      	bx	lr
 80a3880:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3884:	bf16      	itet	ne
 80a3886:	4608      	movne	r0, r1
 80a3888:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a388c:	4601      	movne	r1, r0
 80a388e:	0242      	lsls	r2, r0, #9
 80a3890:	bf06      	itte	eq
 80a3892:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3896:	ea90 0f01 	teqeq	r0, r1
 80a389a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a389e:	4770      	bx	lr

080a38a0 <__aeabi_ui2f>:
 80a38a0:	f04f 0300 	mov.w	r3, #0
 80a38a4:	e004      	b.n	80a38b0 <__aeabi_i2f+0x8>
 80a38a6:	bf00      	nop

080a38a8 <__aeabi_i2f>:
 80a38a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a38ac:	bf48      	it	mi
 80a38ae:	4240      	negmi	r0, r0
 80a38b0:	ea5f 0c00 	movs.w	ip, r0
 80a38b4:	bf08      	it	eq
 80a38b6:	4770      	bxeq	lr
 80a38b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a38bc:	4601      	mov	r1, r0
 80a38be:	f04f 0000 	mov.w	r0, #0
 80a38c2:	e01c      	b.n	80a38fe <__aeabi_l2f+0x2a>

080a38c4 <__aeabi_ul2f>:
 80a38c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a38c8:	bf08      	it	eq
 80a38ca:	4770      	bxeq	lr
 80a38cc:	f04f 0300 	mov.w	r3, #0
 80a38d0:	e00a      	b.n	80a38e8 <__aeabi_l2f+0x14>
 80a38d2:	bf00      	nop

080a38d4 <__aeabi_l2f>:
 80a38d4:	ea50 0201 	orrs.w	r2, r0, r1
 80a38d8:	bf08      	it	eq
 80a38da:	4770      	bxeq	lr
 80a38dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a38e0:	d502      	bpl.n	80a38e8 <__aeabi_l2f+0x14>
 80a38e2:	4240      	negs	r0, r0
 80a38e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a38e8:	ea5f 0c01 	movs.w	ip, r1
 80a38ec:	bf02      	ittt	eq
 80a38ee:	4684      	moveq	ip, r0
 80a38f0:	4601      	moveq	r1, r0
 80a38f2:	2000      	moveq	r0, #0
 80a38f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a38f8:	bf08      	it	eq
 80a38fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a38fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3902:	fabc f28c 	clz	r2, ip
 80a3906:	3a08      	subs	r2, #8
 80a3908:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a390c:	db10      	blt.n	80a3930 <__aeabi_l2f+0x5c>
 80a390e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3912:	4463      	add	r3, ip
 80a3914:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3918:	f1c2 0220 	rsb	r2, r2, #32
 80a391c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3920:	fa20 f202 	lsr.w	r2, r0, r2
 80a3924:	eb43 0002 	adc.w	r0, r3, r2
 80a3928:	bf08      	it	eq
 80a392a:	f020 0001 	biceq.w	r0, r0, #1
 80a392e:	4770      	bx	lr
 80a3930:	f102 0220 	add.w	r2, r2, #32
 80a3934:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3938:	f1c2 0220 	rsb	r2, r2, #32
 80a393c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3940:	fa21 f202 	lsr.w	r2, r1, r2
 80a3944:	eb43 0002 	adc.w	r0, r3, r2
 80a3948:	bf08      	it	eq
 80a394a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a394e:	4770      	bx	lr

080a3950 <__aeabi_f2iz>:
 80a3950:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3954:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3958:	d30f      	bcc.n	80a397a <__aeabi_f2iz+0x2a>
 80a395a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a395e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3962:	d90d      	bls.n	80a3980 <__aeabi_f2iz+0x30>
 80a3964:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a396c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3970:	fa23 f002 	lsr.w	r0, r3, r2
 80a3974:	bf18      	it	ne
 80a3976:	4240      	negne	r0, r0
 80a3978:	4770      	bx	lr
 80a397a:	f04f 0000 	mov.w	r0, #0
 80a397e:	4770      	bx	lr
 80a3980:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3984:	d101      	bne.n	80a398a <__aeabi_f2iz+0x3a>
 80a3986:	0242      	lsls	r2, r0, #9
 80a3988:	d105      	bne.n	80a3996 <__aeabi_f2iz+0x46>
 80a398a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a398e:	bf08      	it	eq
 80a3990:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3994:	4770      	bx	lr
 80a3996:	f04f 0000 	mov.w	r0, #0
 80a399a:	4770      	bx	lr

080a399c <atexit>:
 80a399c:	2300      	movs	r3, #0
 80a399e:	4601      	mov	r1, r0
 80a39a0:	461a      	mov	r2, r3
 80a39a2:	4618      	mov	r0, r3
 80a39a4:	f000 b84c 	b.w	80a3a40 <__register_exitproc>

080a39a8 <memcpy>:
 80a39a8:	440a      	add	r2, r1
 80a39aa:	4291      	cmp	r1, r2
 80a39ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80a39b0:	d100      	bne.n	80a39b4 <memcpy+0xc>
 80a39b2:	4770      	bx	lr
 80a39b4:	b510      	push	{r4, lr}
 80a39b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a39ba:	4291      	cmp	r1, r2
 80a39bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a39c0:	d1f9      	bne.n	80a39b6 <memcpy+0xe>
 80a39c2:	bd10      	pop	{r4, pc}

080a39c4 <memset>:
 80a39c4:	4603      	mov	r3, r0
 80a39c6:	4402      	add	r2, r0
 80a39c8:	4293      	cmp	r3, r2
 80a39ca:	d100      	bne.n	80a39ce <memset+0xa>
 80a39cc:	4770      	bx	lr
 80a39ce:	f803 1b01 	strb.w	r1, [r3], #1
 80a39d2:	e7f9      	b.n	80a39c8 <memset+0x4>

080a39d4 <srand>:
 80a39d4:	b538      	push	{r3, r4, r5, lr}
 80a39d6:	4b10      	ldr	r3, [pc, #64]	; (80a3a18 <srand+0x44>)
 80a39d8:	4604      	mov	r4, r0
 80a39da:	681d      	ldr	r5, [r3, #0]
 80a39dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a39de:	b9b3      	cbnz	r3, 80a3a0e <srand+0x3a>
 80a39e0:	2018      	movs	r0, #24
 80a39e2:	f7fe fb89 	bl	80a20f8 <malloc>
 80a39e6:	4602      	mov	r2, r0
 80a39e8:	63a8      	str	r0, [r5, #56]	; 0x38
 80a39ea:	b920      	cbnz	r0, 80a39f6 <srand+0x22>
 80a39ec:	2142      	movs	r1, #66	; 0x42
 80a39ee:	4b0b      	ldr	r3, [pc, #44]	; (80a3a1c <srand+0x48>)
 80a39f0:	480b      	ldr	r0, [pc, #44]	; (80a3a20 <srand+0x4c>)
 80a39f2:	f7fe fb91 	bl	80a2118 <__assert_func>
 80a39f6:	490b      	ldr	r1, [pc, #44]	; (80a3a24 <srand+0x50>)
 80a39f8:	4b0b      	ldr	r3, [pc, #44]	; (80a3a28 <srand+0x54>)
 80a39fa:	e9c0 1300 	strd	r1, r3, [r0]
 80a39fe:	4b0b      	ldr	r3, [pc, #44]	; (80a3a2c <srand+0x58>)
 80a3a00:	2100      	movs	r1, #0
 80a3a02:	6083      	str	r3, [r0, #8]
 80a3a04:	230b      	movs	r3, #11
 80a3a06:	8183      	strh	r3, [r0, #12]
 80a3a08:	2001      	movs	r0, #1
 80a3a0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a3a0e:	2200      	movs	r2, #0
 80a3a10:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3a12:	611c      	str	r4, [r3, #16]
 80a3a14:	615a      	str	r2, [r3, #20]
 80a3a16:	bd38      	pop	{r3, r4, r5, pc}
 80a3a18:	20000014 	.word	0x20000014
 80a3a1c:	080a3d0d 	.word	0x080a3d0d
 80a3a20:	080a3d24 	.word	0x080a3d24
 80a3a24:	abcd330e 	.word	0xabcd330e
 80a3a28:	e66d1234 	.word	0xe66d1234
 80a3a2c:	0005deec 	.word	0x0005deec

080a3a30 <strlen>:
 80a3a30:	4603      	mov	r3, r0
 80a3a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3a36:	2a00      	cmp	r2, #0
 80a3a38:	d1fb      	bne.n	80a3a32 <strlen+0x2>
 80a3a3a:	1a18      	subs	r0, r3, r0
 80a3a3c:	3801      	subs	r0, #1
 80a3a3e:	4770      	bx	lr

080a3a40 <__register_exitproc>:
 80a3a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3a44:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a3af4 <__register_exitproc+0xb4>
 80a3a48:	4606      	mov	r6, r0
 80a3a4a:	f8d8 0000 	ldr.w	r0, [r8]
 80a3a4e:	461f      	mov	r7, r3
 80a3a50:	460d      	mov	r5, r1
 80a3a52:	4691      	mov	r9, r2
 80a3a54:	f000 f858 	bl	80a3b08 <__retarget_lock_acquire_recursive>
 80a3a58:	4b27      	ldr	r3, [pc, #156]	; (80a3af8 <__register_exitproc+0xb8>)
 80a3a5a:	681c      	ldr	r4, [r3, #0]
 80a3a5c:	b934      	cbnz	r4, 80a3a6c <__register_exitproc+0x2c>
 80a3a5e:	4c27      	ldr	r4, [pc, #156]	; (80a3afc <__register_exitproc+0xbc>)
 80a3a60:	601c      	str	r4, [r3, #0]
 80a3a62:	4b27      	ldr	r3, [pc, #156]	; (80a3b00 <__register_exitproc+0xc0>)
 80a3a64:	b113      	cbz	r3, 80a3a6c <__register_exitproc+0x2c>
 80a3a66:	681b      	ldr	r3, [r3, #0]
 80a3a68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a3a6c:	6863      	ldr	r3, [r4, #4]
 80a3a6e:	2b1f      	cmp	r3, #31
 80a3a70:	dd07      	ble.n	80a3a82 <__register_exitproc+0x42>
 80a3a72:	f8d8 0000 	ldr.w	r0, [r8]
 80a3a76:	f000 f849 	bl	80a3b0c <__retarget_lock_release_recursive>
 80a3a7a:	f04f 30ff 	mov.w	r0, #4294967295
 80a3a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3a82:	b35e      	cbz	r6, 80a3adc <__register_exitproc+0x9c>
 80a3a84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a3a88:	b988      	cbnz	r0, 80a3aae <__register_exitproc+0x6e>
 80a3a8a:	4b1e      	ldr	r3, [pc, #120]	; (80a3b04 <__register_exitproc+0xc4>)
 80a3a8c:	b923      	cbnz	r3, 80a3a98 <__register_exitproc+0x58>
 80a3a8e:	f8d8 0000 	ldr.w	r0, [r8]
 80a3a92:	f000 f83a 	bl	80a3b0a <__retarget_lock_release>
 80a3a96:	e7f0      	b.n	80a3a7a <__register_exitproc+0x3a>
 80a3a98:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a3a9c:	f7fe fb2c 	bl	80a20f8 <malloc>
 80a3aa0:	2800      	cmp	r0, #0
 80a3aa2:	d0f4      	beq.n	80a3a8e <__register_exitproc+0x4e>
 80a3aa4:	2300      	movs	r3, #0
 80a3aa6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a3aaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a3aae:	2201      	movs	r2, #1
 80a3ab0:	6863      	ldr	r3, [r4, #4]
 80a3ab2:	2e02      	cmp	r6, #2
 80a3ab4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a3ab8:	fa02 f203 	lsl.w	r2, r2, r3
 80a3abc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a3ac0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a3ac4:	ea43 0302 	orr.w	r3, r3, r2
 80a3ac8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a3acc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a3ad0:	bf02      	ittt	eq
 80a3ad2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a3ad6:	4313      	orreq	r3, r2
 80a3ad8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a3adc:	6863      	ldr	r3, [r4, #4]
 80a3ade:	f8d8 0000 	ldr.w	r0, [r8]
 80a3ae2:	1c5a      	adds	r2, r3, #1
 80a3ae4:	3302      	adds	r3, #2
 80a3ae6:	6062      	str	r2, [r4, #4]
 80a3ae8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a3aec:	f000 f80e 	bl	80a3b0c <__retarget_lock_release_recursive>
 80a3af0:	2000      	movs	r0, #0
 80a3af2:	e7c4      	b.n	80a3a7e <__register_exitproc+0x3e>
 80a3af4:	20000078 	.word	0x20000078
 80a3af8:	20000578 	.word	0x20000578
 80a3afc:	200004ec 	.word	0x200004ec
 80a3b00:	00000000 	.word	0x00000000
 80a3b04:	080a20f9 	.word	0x080a20f9

080a3b08 <__retarget_lock_acquire_recursive>:
 80a3b08:	4770      	bx	lr

080a3b0a <__retarget_lock_release>:
 80a3b0a:	4770      	bx	lr

080a3b0c <__retarget_lock_release_recursive>:
 80a3b0c:	4770      	bx	lr

080a3b0e <link_code_end>:
	...

080a3b10 <dynalib_user>:
 80a3b10:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a3b20:	0000 0000 4157 4d52 4e49 2047 5055 2e2e     ....WARMING UP..
 80a3b30:	002e 7661 5067 4d50 6d00 7861 5050 004d     ..avgPPM.maxPPM.
 80a3b40:	414d 2058 5050 3a4d 4100 4756 5020 4d50     MAX PPM:.AVG PPM
 80a3b50:	003a 414d 2058 4142 3a43 4100 4756 4220     :.MAX BAC:.AVG B
 80a3b60:	4341 003a 6544 6976 6563 4d20 646f 3a65     AC:.Device Mode:
 80a3b70:	0020 4552 4441 2e59 2e2e 4200 7475 6f74      .READY....Butto
 80a3b80:	206e 7270 7365 0073 4552 4441 4e49 2e47     n press.READING.
 80a3b90:	2e2e 5000 4d50 203a 4200 4341 203a 0000     ...PPM: .BAC: ..

080a3ba0 <CSWTCH.215>:
 80a3ba0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3bb0:	0050 0000                                   P...

080a3bb4 <_ZTV7rgb_lcd>:
	...
 80a3bbc:	1b55 080a 1b57 080a 1b97 080a 217d 080a     U...W.......}!..
 80a3bcc:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
 80a3bdc:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a3bec:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a3bf8 <_ZTV9IPAddress>:
	...
 80a3c00:	259f 080a 259d 080a 25d1 080a               .%...%...%..

080a3c0c <_ZTV9USBSerial>:
	...
 80a3c14:	266b 080a 26d1 080a 26a9 080a 217d 080a     k&...&...&..}!..
 80a3c24:	269b 080a 266d 080a 267d 080a 26cb 080a     .&..m&..}&...&..
 80a3c34:	268d 080a 2665 080a                         .&..e&..

080a3c3c <_ZTV11USARTSerial>:
	...
 80a3c44:	27f9 080a 2861 080a 283d 080a 217d 080a     .'..a(..=(..}!..
 80a3c54:	280d 080a 2829 080a 281b 080a 2837 080a     .(..)(...(..7(..
 80a3c64:	27fb 080a 27ff 080a                         .'...'..

080a3c6c <_ZTV7TwoWire>:
	...
 80a3c74:	2899 080a 28e3 080a 28bb 080a 289b 080a     .(...(...(...(..
 80a3c84:	28c3 080a 28cb 080a 28d3 080a 28db 080a     .(...(...(...(..

080a3c94 <_ZTVN5spark9WiFiClassE>:
	...
 80a3c9c:	29df 080a 29d5 080a 29cb 080a 293d 080a     .)...)...)..=)..
 80a3cac:	29bf 080a 29b3 080a 2a3d 080a 2a45 080a     .)...)..=*..E*..
 80a3cbc:	29a7 080a 299f 080a 2995 080a 298b 080a     .)...)...)...)..
 80a3ccc:	2947 080a                                   G)..

080a3cd0 <_ZTVN5spark12NetworkClassE>:
	...
 80a3cd8:	29fd 080a 2a07 080a 2a11 080a 2a1b 080a     .)...*...*...*..
 80a3ce8:	2a25 080a 2a31 080a 2a3d 080a 2a45 080a     %*..1*..=*..E*..
 80a3cf8:	2a4d 080a 2a59 080a 2a61 080a 2a6b 080a     M*..Y*..a*..k*..
 80a3d08:	2a75 080a                                   u*..

080a3d0c <_ZSt7nothrow>:
 80a3d0c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a3d1c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a3d2c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a3d3c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a3d4c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a3d5c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a3d6c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a3d7c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a3d8c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a3d9c:	646e 632e                                    nd.c.

080a3da1 <link_const_variable_data_end>:
 80a3da1:	00          	.byte	0x00
	...

080a3da4 <link_constructors_location>:
 80a3da4:	080a084d 	.word	0x080a084d
 80a3da8:	080a1b45 	.word	0x080a1b45
 80a3dac:	080a2159 	.word	0x080a2159
 80a3db0:	080a2405 	.word	0x080a2405
 80a3db4:	080a2415 	.word	0x080a2415
 80a3db8:	080a2431 	.word	0x080a2431
 80a3dbc:	080a29e9 	.word	0x080a29e9
 80a3dc0:	080a2ac5 	.word	0x080a2ac5
 80a3dc4:	080a2c95 	.word	0x080a2c95

080a3dc8 <link_constructors_end>:
	...
