
c:/Users/alext/gitRepositories/IoT-Breathalyzer/target/3.3.0/photon/IoT-Breathalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005160  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5180  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a5184  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000500  20000078  20000078  00040078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a51fc  080a51fc  000351fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5224  080a5224  00035224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000abc0d  00000000  00000000  00035228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000f9ee  00000000  00000000  000e0e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00014db1  00000000  00000000  000f0823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001d10  00000000  00000000  001055d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003f58  00000000  00000000  001072e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000288eb  00000000  00000000  0010b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002abbc  00000000  00000000  00133b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b4632  00000000  00000000  0015e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004c98  00000000  00000000  00212d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fe89 	bl	80a4d48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fe91 	bl	80a4d64 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5184 	.word	0x080a5184
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000078 	.word	0x20000078
 80a0058:	20000575 	.word	0x20000575
 80a005c:	20000575 	.word	0x20000575

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 facd 	bl	80a2600 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a515c 	.word	0x080a515c
 80a0084:	080a5180 	.word	0x080a5180

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b850 	b.w	80a012c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f9ab 	bl	80a03e8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 ba6b 	b.w	80a2570 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f002 b889 	b.w	80a21b0 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f002 b88f 	b.w	80a21c0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z9handleLEDii.part.0>:
    lcd.setCursor(8, AVG_ROW);
    lcd.print(avgBAC);
  }
}

void handleLED(int timeDifference, int color) {
 80a00b4:	b410      	push	{r4}

  if(timeDifference != SOLID) {
    if(currentTime > nextLedFlashTime) {
 80a00b6:	4b0b      	ldr	r3, [pc, #44]	; (80a00e4 <_Z9handleLEDii.part.0+0x30>)
 80a00b8:	4c0b      	ldr	r4, [pc, #44]	; (80a00e8 <_Z9handleLEDii.part.0+0x34>)
 80a00ba:	681b      	ldr	r3, [r3, #0]
 80a00bc:	6821      	ldr	r1, [r4, #0]
 80a00be:	4a0b      	ldr	r2, [pc, #44]	; (80a00ec <_Z9handleLEDii.part.0+0x38>)
 80a00c0:	428b      	cmp	r3, r1
 80a00c2:	d906      	bls.n	80a00d2 <_Z9handleLEDii.part.0+0x1e>
      ledFlashOn = !ledFlashOn;
 80a00c4:	6813      	ldr	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00c6:	31c8      	adds	r1, #200	; 0xc8
      ledFlashOn = !ledFlashOn;
 80a00c8:	fab3 f383 	clz	r3, r3
 80a00cc:	095b      	lsrs	r3, r3, #5
 80a00ce:	6013      	str	r3, [r2, #0]
      nextLedFlashTime += READING_LED_TIME_DIFFERENCE;
 80a00d0:	6021      	str	r1, [r4, #0]
    }

    if (ledFlashOn) {
 80a00d2:	6812      	ldr	r2, [r2, #0]
 80a00d4:	b102      	cbz	r2, 80a00d8 <_Z9handleLEDii.part.0+0x24>
      strip.setPixelColor(LED_INDEX, color);
 80a00d6:	4602      	mov	r2, r0
 80a00d8:	2100      	movs	r1, #0
 80a00da:	4805      	ldr	r0, [pc, #20]	; (80a00f0 <_Z9handleLEDii.part.0+0x3c>)
      strip.setPixelColor(LED_INDEX, 0);
    }
  } else {
    strip.setPixelColor(LED_INDEX, color);
  }
}
 80a00dc:	bc10      	pop	{r4}
      strip.setPixelColor(LED_INDEX, color);
 80a00de:	f001 bd45 	b.w	80a1b6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a00e2:	bf00      	nop
 80a00e4:	200000ac 	.word	0x200000ac
 80a00e8:	200000e8 	.word	0x200000e8
 80a00ec:	200000d8 	.word	0x200000d8
 80a00f0:	200000f8 	.word	0x200000f8

080a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80a00f4:	b570      	push	{r4, r5, r6, lr}
 80a00f6:	4606      	mov	r6, r0
 80a00f8:	460c      	mov	r4, r1
{
    if (base == 0) {
 80a00fa:	4615      	mov	r5, r2
 80a00fc:	b92a      	cbnz	r2, 80a010a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 80a00fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
 80a0102:	6803      	ldr	r3, [r0, #0]
 80a0104:	b2c9      	uxtb	r1, r1
 80a0106:	689b      	ldr	r3, [r3, #8]
 80a0108:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80a010a:	2900      	cmp	r1, #0
 80a010c:	da0b      	bge.n	80a0126 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
 80a010e:	2a0a      	cmp	r2, #10
 80a0110:	d109      	bne.n	80a0126 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
 80a0112:	212d      	movs	r1, #45	; 0x2d
 80a0114:	f002 f8c0 	bl	80a2298 <_ZN5Print5printEc>
            val = -n;
 80a0118:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80a011a:	4630      	mov	r0, r6
 80a011c:	b2ea      	uxtb	r2, r5
}
 80a011e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 80a0122:	f002 b8c8 	b.w	80a22b6 <_ZN5Print11printNumberEmh>
            val = n;
 80a0126:	4621      	mov	r1, r4
 80a0128:	e7f7      	b.n	80a011a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>
	...

080a012c <setup>:
void setup() {
 80a012c:	b510      	push	{r4, lr}
  Serial.begin(9600);     // Initialize the Serial communication
 80a012e:	f002 fb69 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a0132:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0136:	f002 fb4b 	bl	80a27d0 <_ZN9USBSerial5beginEl>
  lcd.begin(16, 2);
 80a013a:	4c1c      	ldr	r4, [pc, #112]	; (80a01ac <setup+0x80>)
  pinMode(BUTTON_PIN, INPUT_PULLDOWN);
 80a013c:	2103      	movs	r1, #3
 80a013e:	2002      	movs	r0, #2
 80a0140:	f002 fd78 	bl	80a2c34 <pinMode>
  strip.begin();
 80a0144:	481a      	ldr	r0, [pc, #104]	; (80a01b0 <setup+0x84>)
 80a0146:	f000 fc2f 	bl	80a09a8 <_ZN17Adafruit_NeoPixel5beginEv>
  lcd.begin(16, 2);
 80a014a:	4620      	mov	r0, r4
 80a014c:	2300      	movs	r3, #0
 80a014e:	2202      	movs	r2, #2
 80a0150:	2110      	movs	r1, #16
 80a0152:	f001 fdf2 	bl	80a1d3a <_ZN7rgb_lcd5beginEhhh>
  lcd.setRGB(displayBacklightR, displayBacklightG, displayBacklightB);
 80a0156:	2300      	movs	r3, #0
 80a0158:	4620      	mov	r0, r4
 80a015a:	461a      	mov	r2, r3
 80a015c:	21ff      	movs	r1, #255	; 0xff
 80a015e:	f001 fdd8 	bl	80a1d12 <_ZN7rgb_lcd6setRGBEhhh>
  lcd.setCursor(0, 0);
 80a0162:	2200      	movs	r2, #0
 80a0164:	4620      	mov	r0, r4
 80a0166:	4611      	mov	r1, r2
 80a0168:	f001 fd9e 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
  lcd.print("WARMING UP...");
 80a016c:	4620      	mov	r0, r4
  deviceMode = WARMING_UP;
 80a016e:	2400      	movs	r4, #0
  lcd.print("WARMING UP...");
 80a0170:	4910      	ldr	r1, [pc, #64]	; (80a01b4 <setup+0x88>)
 80a0172:	f002 f88d 	bl	80a2290 <_ZN5Print5printEPKc>
  deviceMode = WARMING_UP;
 80a0176:	4b10      	ldr	r3, [pc, #64]	; (80a01b8 <setup+0x8c>)
 80a0178:	701c      	strb	r4, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017a:	f001 fe8b 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
  stateChangeTime = millis() + WARMING_UP_MODE_TIME;
 80a017e:	4b0f      	ldr	r3, [pc, #60]	; (80a01bc <setup+0x90>)
 80a0180:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80a0184:	3008      	adds	r0, #8
 80a0186:	6018      	str	r0, [r3, #0]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a0188:	2202      	movs	r2, #2
 80a018a:	4623      	mov	r3, r4
 80a018c:	490c      	ldr	r1, [pc, #48]	; (80a01c0 <setup+0x94>)
 80a018e:	480d      	ldr	r0, [pc, #52]	; (80a01c4 <setup+0x98>)
 80a0190:	f001 fffe 	bl	80a2190 <spark_variable>
 80a0194:	4623      	mov	r3, r4
 80a0196:	2202      	movs	r2, #2
 80a0198:	490b      	ldr	r1, [pc, #44]	; (80a01c8 <setup+0x9c>)
 80a019a:	480c      	ldr	r0, [pc, #48]	; (80a01cc <setup+0xa0>)
 80a019c:	f001 fff8 	bl	80a2190 <spark_variable>
}
 80a01a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(100);
 80a01a4:	2064      	movs	r0, #100	; 0x64
 80a01a6:	f002 b9a3 	b.w	80a24f0 <delay>
 80a01aa:	bf00      	nop
 80a01ac:	200000c8 	.word	0x200000c8
 80a01b0:	200000f8 	.word	0x200000f8
 80a01b4:	080a4ec4 	.word	0x080a4ec4
 80a01b8:	200000b4 	.word	0x200000b4
 80a01bc:	200000f4 	.word	0x200000f4
 80a01c0:	20000094 	.word	0x20000094
 80a01c4:	080a4ed2 	.word	0x080a4ed2
 80a01c8:	200000e0 	.word	0x200000e0
 80a01cc:	080a4ed9 	.word	0x080a4ed9

080a01d0 <_Z6getBACf>:
float getBAC(float rawValue) {
 80a01d0:	b508      	push	{r3, lr}
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a01d2:	f003 ff8f 	bl	80a40f4 <__aeabi_f2d>
 80a01d6:	a318      	add	r3, pc, #96	; (adr r3, 80a0238 <_Z6getBACf+0x68>)
 80a01d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01dc:	f003 ffe2 	bl	80a41a4 <__aeabi_dmul>
 80a01e0:	f004 fad8 	bl	80a4794 <__aeabi_d2f>
  float RS_gas = ((5.0 * R2)/voltage) - R2; 
 80a01e4:	f003 ff86 	bl	80a40f4 <__aeabi_f2d>
 80a01e8:	4602      	mov	r2, r0
 80a01ea:	460b      	mov	r3, r1
 80a01ec:	a114      	add	r1, pc, #80	; (adr r1, 80a0240 <_Z6getBACf+0x70>)
 80a01ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a01f2:	f004 f901 	bl	80a43f8 <__aeabi_ddiv>
 80a01f6:	2200      	movs	r2, #0
 80a01f8:	4b19      	ldr	r3, [pc, #100]	; (80a0260 <_Z6getBACf+0x90>)
 80a01fa:	f003 fe1b 	bl	80a3e34 <__aeabi_dsub>
 80a01fe:	f004 fac9 	bl	80a4794 <__aeabi_d2f>
  float ratio = RS_gas/R0;// ratio = RS/R0
 80a0202:	4918      	ldr	r1, [pc, #96]	; (80a0264 <_Z6getBACf+0x94>)
 80a0204:	f004 fcd8 	bl	80a4bb8 <__aeabi_fdiv>
  double x = 0.4*ratio;   
 80a0208:	f003 ff74 	bl	80a40f4 <__aeabi_f2d>
 80a020c:	a30e      	add	r3, pc, #56	; (adr r3, 80a0248 <_Z6getBACf+0x78>)
 80a020e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0212:	f003 ffc7 	bl	80a41a4 <__aeabi_dmul>
  float BAC = pow(x,-1.431);  //BAC in mg/L
 80a0216:	a30e      	add	r3, pc, #56	; (adr r3, 80a0250 <_Z6getBACf+0x80>)
 80a0218:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a021c:	f002 fdea 	bl	80a2df4 <pow>
 80a0220:	f004 fab8 	bl	80a4794 <__aeabi_d2f>
  return BAC * 0.0001; // TODO
 80a0224:	f003 ff66 	bl	80a40f4 <__aeabi_f2d>
 80a0228:	a30b      	add	r3, pc, #44	; (adr r3, 80a0258 <_Z6getBACf+0x88>)
 80a022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a022e:	f003 ffb9 	bl	80a41a4 <__aeabi_dmul>
 80a0232:	f004 faaf 	bl	80a4794 <__aeabi_d2f>
}
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	13bacbaf 	.word	0x13bacbaf
 80a023c:	3f540140 	.word	0x3f540140
 80a0240:	00000000 	.word	0x00000000
 80a0244:	40c38800 	.word	0x40c38800
 80a0248:	9999999a 	.word	0x9999999a
 80a024c:	3fd99999 	.word	0x3fd99999
 80a0250:	4189374c 	.word	0x4189374c
 80a0254:	bff6e560 	.word	0xbff6e560
 80a0258:	eb1c432d 	.word	0xeb1c432d
 80a025c:	3f1a36e2 	.word	0x3f1a36e2
 80a0260:	409f4000 	.word	0x409f4000
 80a0264:	438f8000 	.word	0x438f8000

080a0268 <_Z13updateDisplayv>:
void updateDisplay() {
 80a0268:	b510      	push	{r4, lr}
  lcd.clear();
 80a026a:	482d      	ldr	r0, [pc, #180]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a026c:	f001 fd12 	bl	80a1c94 <_ZN7rgb_lcd5clearEv>
  if(displayMode == PPM) {
 80a0270:	4b2c      	ldr	r3, [pc, #176]	; (80a0324 <_Z13updateDisplayv+0xbc>)
 80a0272:	781c      	ldrb	r4, [r3, #0]
 80a0274:	bb4c      	cbnz	r4, 80a02ca <_Z13updateDisplayv+0x62>
    lcd.setCursor(0, MAX_ROW);
 80a0276:	4622      	mov	r2, r4
 80a0278:	4621      	mov	r1, r4
 80a027a:	4829      	ldr	r0, [pc, #164]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a027c:	f001 fd14 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX PPM:");
 80a0280:	4929      	ldr	r1, [pc, #164]	; (80a0328 <_Z13updateDisplayv+0xc0>)
 80a0282:	4827      	ldr	r0, [pc, #156]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a0284:	f002 f804 	bl	80a2290 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a0288:	4622      	mov	r2, r4
 80a028a:	2108      	movs	r1, #8
 80a028c:	4824      	ldr	r0, [pc, #144]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a028e:	f001 fd0b 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxPPM);
 80a0292:	4b26      	ldr	r3, [pc, #152]	; (80a032c <_Z13updateDisplayv+0xc4>)
 80a0294:	220a      	movs	r2, #10
 80a0296:	6819      	ldr	r1, [r3, #0]
 80a0298:	4821      	ldr	r0, [pc, #132]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a029a:	f7ff ff2b 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, AVG_ROW);
 80a029e:	2201      	movs	r2, #1
 80a02a0:	4621      	mov	r1, r4
 80a02a2:	481f      	ldr	r0, [pc, #124]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02a4:	f001 fd00 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG PPM:");
 80a02a8:	4921      	ldr	r1, [pc, #132]	; (80a0330 <_Z13updateDisplayv+0xc8>)
 80a02aa:	481d      	ldr	r0, [pc, #116]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02ac:	f001 fff0 	bl	80a2290 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a02b0:	2201      	movs	r2, #1
 80a02b2:	2108      	movs	r1, #8
 80a02b4:	481a      	ldr	r0, [pc, #104]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02b6:	f001 fcf7 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
}
 80a02ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(avgPPM);
 80a02be:	4b1d      	ldr	r3, [pc, #116]	; (80a0334 <_Z13updateDisplayv+0xcc>)
 80a02c0:	220a      	movs	r2, #10
 80a02c2:	6819      	ldr	r1, [r3, #0]
 80a02c4:	4816      	ldr	r0, [pc, #88]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02c6:	f7ff bf15 	b.w	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
    lcd.setCursor(0, MAX_ROW);
 80a02ca:	2200      	movs	r2, #0
 80a02cc:	4814      	ldr	r0, [pc, #80]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02ce:	4611      	mov	r1, r2
 80a02d0:	f001 fcea 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("MAX BAC:");
 80a02d4:	4918      	ldr	r1, [pc, #96]	; (80a0338 <_Z13updateDisplayv+0xd0>)
 80a02d6:	4812      	ldr	r0, [pc, #72]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02d8:	f001 ffda 	bl	80a2290 <_ZN5Print5printEPKc>
    lcd.setCursor(8, MAX_ROW);
 80a02dc:	2200      	movs	r2, #0
 80a02de:	2108      	movs	r1, #8
 80a02e0:	480f      	ldr	r0, [pc, #60]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02e2:	f001 fce1 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print(maxBAC);
 80a02e6:	4b15      	ldr	r3, [pc, #84]	; (80a033c <_Z13updateDisplayv+0xd4>)
 80a02e8:	2202      	movs	r2, #2
 80a02ea:	6819      	ldr	r1, [r3, #0]
 80a02ec:	480c      	ldr	r0, [pc, #48]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02ee:	f002 f8c1 	bl	80a2474 <_ZN5Print5printEfi>
    lcd.setCursor(0, AVG_ROW);
 80a02f2:	2201      	movs	r2, #1
 80a02f4:	2100      	movs	r1, #0
 80a02f6:	480a      	ldr	r0, [pc, #40]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a02f8:	f001 fcd6 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
    lcd.print("AVG BAC:");
 80a02fc:	4910      	ldr	r1, [pc, #64]	; (80a0340 <_Z13updateDisplayv+0xd8>)
 80a02fe:	4808      	ldr	r0, [pc, #32]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a0300:	f001 ffc6 	bl	80a2290 <_ZN5Print5printEPKc>
    lcd.setCursor(8, AVG_ROW);
 80a0304:	2201      	movs	r2, #1
 80a0306:	2108      	movs	r1, #8
 80a0308:	4805      	ldr	r0, [pc, #20]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a030a:	f001 fccd 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
}
 80a030e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(avgBAC);
 80a0312:	4b0c      	ldr	r3, [pc, #48]	; (80a0344 <_Z13updateDisplayv+0xdc>)
 80a0314:	2202      	movs	r2, #2
 80a0316:	6819      	ldr	r1, [r3, #0]
 80a0318:	4801      	ldr	r0, [pc, #4]	; (80a0320 <_Z13updateDisplayv+0xb8>)
 80a031a:	f002 b8ab 	b.w	80a2474 <_ZN5Print5printEfi>
 80a031e:	bf00      	nop
 80a0320:	200000c8 	.word	0x200000c8
 80a0324:	200000b5 	.word	0x200000b5
 80a0328:	080a4ee0 	.word	0x080a4ee0
 80a032c:	200000e0 	.word	0x200000e0
 80a0330:	080a4ee9 	.word	0x080a4ee9
 80a0334:	20000094 	.word	0x20000094
 80a0338:	080a4ef2 	.word	0x080a4ef2
 80a033c:	200000dc 	.word	0x200000dc
 80a0340:	080a4efb 	.word	0x080a4efb
 80a0344:	20000090 	.word	0x20000090

080a0348 <_Z9handleLEDii>:
void handleLED(int timeDifference, int color) {
 80a0348:	460a      	mov	r2, r1
  if(timeDifference != SOLID) {
 80a034a:	4601      	mov	r1, r0
 80a034c:	b110      	cbz	r0, 80a0354 <_Z9handleLEDii+0xc>
 80a034e:	4610      	mov	r0, r2
 80a0350:	f7ff beb0 	b.w	80a00b4 <_Z9handleLEDii.part.0>
    strip.setPixelColor(LED_INDEX, color);
 80a0354:	4801      	ldr	r0, [pc, #4]	; (80a035c <_Z9handleLEDii+0x14>)
 80a0356:	f001 bc09 	b.w	80a1b6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
 80a035a:	bf00      	nop
 80a035c:	200000f8 	.word	0x200000f8

080a0360 <_Z11checkButtoni>:

// Return true if falling edge of button press
BUTTON_ACTION checkButton(int buttonReading) {
 80a0360:	b538      	push	{r3, r4, r5, lr}
  // Serial.print("Reading: ");
  // Serial.println(buttonReading);
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a0362:	4d1c      	ldr	r5, [pc, #112]	; (80a03d4 <_Z11checkButtoni+0x74>)
BUTTON_ACTION checkButton(int buttonReading) {
 80a0364:	4604      	mov	r4, r0
  if (!watchingButton && buttonReading == HIGH && lastButtonReading == LOW) {
 80a0366:	782b      	ldrb	r3, [r5, #0]
 80a0368:	b96b      	cbnz	r3, 80a0386 <_Z11checkButtoni+0x26>
 80a036a:	2801      	cmp	r0, #1
 80a036c:	d12c      	bne.n	80a03c8 <_Z11checkButtoni+0x68>
 80a036e:	4b1a      	ldr	r3, [pc, #104]	; (80a03d8 <_Z11checkButtoni+0x78>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	bb4b      	cbnz	r3, 80a03c8 <_Z11checkButtoni+0x68>
 80a0374:	f001 fd8e 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
    buttonHoldBeginTime = millis();
 80a0378:	4b18      	ldr	r3, [pc, #96]	; (80a03dc <_Z11checkButtoni+0x7c>)
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a037a:	4a19      	ldr	r2, [pc, #100]	; (80a03e0 <_Z11checkButtoni+0x80>)
    buttonHoldBeginTime = millis();
 80a037c:	6018      	str	r0, [r3, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a037e:	6813      	ldr	r3, [r2, #0]
    watchingButton = true;
 80a0380:	702c      	strb	r4, [r5, #0]
    debounceEndWaitTime += DEBOUNCE_TIME;
 80a0382:	3332      	adds	r3, #50	; 0x32
 80a0384:	6013      	str	r3, [r2, #0]

// Serial.println(watchingButton);
// Serial.println(buttonHoldBeginTime);
  
  if (watchingButton) {
    if (currentTime > debounceEndWaitTime) {
 80a0386:	4b17      	ldr	r3, [pc, #92]	; (80a03e4 <_Z11checkButtoni+0x84>)
 80a0388:	681a      	ldr	r2, [r3, #0]
 80a038a:	4b15      	ldr	r3, [pc, #84]	; (80a03e0 <_Z11checkButtoni+0x80>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	429a      	cmp	r2, r3
 80a0390:	d90f      	bls.n	80a03b2 <_Z11checkButtoni+0x52>
 80a0392:	f001 fd7f 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>

      if(millis() - buttonHoldBeginTime > DOUBLE_CLICK_WAIT_TIME) {
 80a0396:	4b11      	ldr	r3, [pc, #68]	; (80a03dc <_Z11checkButtoni+0x7c>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	1ac0      	subs	r0, r0, r3
 80a039c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80a03a0:	d909      	bls.n	80a03b6 <_Z11checkButtoni+0x56>
        if(buttonReading == HIGH){
 80a03a2:	2c01      	cmp	r4, #1
 80a03a4:	d103      	bne.n	80a03ae <_Z11checkButtoni+0x4e>
          lastButtonReading = buttonReading;
          return HOLD;
 80a03a6:	2002      	movs	r0, #2
          lastButtonReading = buttonReading;
 80a03a8:	4b0b      	ldr	r3, [pc, #44]	; (80a03d8 <_Z11checkButtoni+0x78>)
 80a03aa:	601c      	str	r4, [r3, #0]
  } 

  lastButtonReading = buttonReading;

  return buttonReading == HIGH ? PRESSED : UNPRESSED;
}
 80a03ac:	bd38      	pop	{r3, r4, r5, pc}
        } else if (buttonReading == LOW) {
 80a03ae:	b95c      	cbnz	r4, 80a03c8 <_Z11checkButtoni+0x68>
          watchingButton = false;
 80a03b0:	702c      	strb	r4, [r5, #0]
      return UNPRESSED;
 80a03b2:	2000      	movs	r0, #0
 80a03b4:	e7fa      	b.n	80a03ac <_Z11checkButtoni+0x4c>
      } else if (lastButtonReading == LOW && buttonReading == HIGH) {
 80a03b6:	4b08      	ldr	r3, [pc, #32]	; (80a03d8 <_Z11checkButtoni+0x78>)
 80a03b8:	681a      	ldr	r2, [r3, #0]
 80a03ba:	b92a      	cbnz	r2, 80a03c8 <_Z11checkButtoni+0x68>
 80a03bc:	2c01      	cmp	r4, #1
 80a03be:	d103      	bne.n	80a03c8 <_Z11checkButtoni+0x68>
        return DOUBLE_CLICK;
 80a03c0:	2003      	movs	r0, #3
        watchingButton = false;
 80a03c2:	702a      	strb	r2, [r5, #0]
        lastButtonReading = buttonReading;
 80a03c4:	601c      	str	r4, [r3, #0]
        return DOUBLE_CLICK;
 80a03c6:	e7f1      	b.n	80a03ac <_Z11checkButtoni+0x4c>
  lastButtonReading = buttonReading;
 80a03c8:	4b03      	ldr	r3, [pc, #12]	; (80a03d8 <_Z11checkButtoni+0x78>)
 80a03ca:	601c      	str	r4, [r3, #0]
          return HOLD;
 80a03cc:	1e63      	subs	r3, r4, #1
 80a03ce:	4258      	negs	r0, r3
 80a03d0:	4158      	adcs	r0, r3
 80a03d2:	e7eb      	b.n	80a03ac <_Z11checkButtoni+0x4c>
 80a03d4:	2000010c 	.word	0x2000010c
 80a03d8:	200000c0 	.word	0x200000c0
 80a03dc:	20000098 	.word	0x20000098
 80a03e0:	200000b0 	.word	0x200000b0
 80a03e4:	200000ac 	.word	0x200000ac

080a03e8 <loop>:
void loop() {
 80a03e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a03ec:	f001 fd52 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();  // get the current time
 80a03f0:	4d8d      	ldr	r5, [pc, #564]	; (80a0628 <loop+0x240>)
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a03f2:	4e8e      	ldr	r6, [pc, #568]	; (80a062c <loop+0x244>)
  currentTime = millis();  // get the current time
 80a03f4:	6028      	str	r0, [r5, #0]
  buttonState = checkButton(digitalRead(BUTTON_PIN));
 80a03f6:	2002      	movs	r0, #2
 80a03f8:	f002 fc46 	bl	80a2c88 <digitalRead>
 80a03fc:	f7ff ffb0 	bl	80a0360 <_Z11checkButtoni>
 80a0400:	7030      	strb	r0, [r6, #0]
  Serial.println(buttonState);
 80a0402:	f002 f9ff 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a0406:	4604      	mov	r4, r0
        return printNumber(val, base) + t;
 80a0408:	220a      	movs	r2, #10
 80a040a:	7831      	ldrb	r1, [r6, #0]
 80a040c:	f001 ff53 	bl	80a22b6 <_ZN5Print11printNumberEmh>
        n += println();
 80a0410:	4620      	mov	r0, r4
 80a0412:	f001 ff44 	bl	80a229e <_ZN5Print7printlnEv>
  Serial.print("Device Mode: ");
 80a0416:	f002 f9f5 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a041a:	4985      	ldr	r1, [pc, #532]	; (80a0630 <loop+0x248>)
 80a041c:	f001 ff38 	bl	80a2290 <_ZN5Print5printEPKc>
  Serial.println(deviceMode);
 80a0420:	f002 f9f0 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a0424:	4607      	mov	r7, r0
 80a0426:	4c83      	ldr	r4, [pc, #524]	; (80a0634 <loop+0x24c>)
        return printNumber(val, base) + t;
 80a0428:	220a      	movs	r2, #10
 80a042a:	7821      	ldrb	r1, [r4, #0]
 80a042c:	f001 ff43 	bl	80a22b6 <_ZN5Print11printNumberEmh>
        n += println();
 80a0430:	4638      	mov	r0, r7
 80a0432:	f001 ff34 	bl	80a229e <_ZN5Print7printlnEv>
  switch (deviceMode) {
 80a0436:	7823      	ldrb	r3, [r4, #0]
 80a0438:	2b04      	cmp	r3, #4
 80a043a:	d863      	bhi.n	80a0504 <loop+0x11c>
 80a043c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0440:	00650005 	.word	0x00650005
 80a0444:	00620086 	.word	0x00620086
 80a0448:	0208      	.short	0x0208
      static unsigned long int readingLastCalled = millis();
 80a044a:	4f7b      	ldr	r7, [pc, #492]	; (80a0638 <loop+0x250>)
 80a044c:	4e7b      	ldr	r6, [pc, #492]	; (80a063c <loop+0x254>)
 80a044e:	783b      	ldrb	r3, [r7, #0]
 80a0450:	f3bf 8f5b 	dmb	ish
 80a0454:	f013 0f01 	tst.w	r3, #1
 80a0458:	d109      	bne.n	80a046e <loop+0x86>
 80a045a:	4638      	mov	r0, r7
 80a045c:	f7ff fe21 	bl	80a00a2 <__cxa_guard_acquire>
 80a0460:	b128      	cbz	r0, 80a046e <loop+0x86>
 80a0462:	f001 fd17 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
 80a0466:	6030      	str	r0, [r6, #0]
 80a0468:	4638      	mov	r0, r7
 80a046a:	f7ff fe1f 	bl	80a00ac <__cxa_guard_release>
      if(currentTime > stateChangeTime) {
 80a046e:	4b74      	ldr	r3, [pc, #464]	; (80a0640 <loop+0x258>)
 80a0470:	682a      	ldr	r2, [r5, #0]
 80a0472:	681b      	ldr	r3, [r3, #0]
 80a0474:	429a      	cmp	r2, r3
 80a0476:	d90d      	bls.n	80a0494 <loop+0xac>
        deviceMode = IDLE;
 80a0478:	2301      	movs	r3, #1
        lcd.clear();
 80a047a:	4872      	ldr	r0, [pc, #456]	; (80a0644 <loop+0x25c>)
        deviceMode = IDLE;
 80a047c:	7023      	strb	r3, [r4, #0]
        lcd.clear();
 80a047e:	f001 fc09 	bl	80a1c94 <_ZN7rgb_lcd5clearEv>
        lcd.setCursor(0, 0);
 80a0482:	2200      	movs	r2, #0
 80a0484:	486f      	ldr	r0, [pc, #444]	; (80a0644 <loop+0x25c>)
 80a0486:	4611      	mov	r1, r2
 80a0488:	f001 fc0e 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READY...");
 80a048c:	496e      	ldr	r1, [pc, #440]	; (80a0648 <loop+0x260>)
 80a048e:	486d      	ldr	r0, [pc, #436]	; (80a0644 <loop+0x25c>)
 80a0490:	f001 fefe 	bl	80a2290 <_ZN5Print5printEPKc>
      if(currentTime > nextLedFlashTime) {
 80a0494:	496d      	ldr	r1, [pc, #436]	; (80a064c <loop+0x264>)
 80a0496:	682b      	ldr	r3, [r5, #0]
 80a0498:	680a      	ldr	r2, [r1, #0]
 80a049a:	4c6d      	ldr	r4, [pc, #436]	; (80a0650 <loop+0x268>)
 80a049c:	4293      	cmp	r3, r2
 80a049e:	d907      	bls.n	80a04b0 <loop+0xc8>
        ledFlashOn = !ledFlashOn;
 80a04a0:	6823      	ldr	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a04a2:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
        ledFlashOn = !ledFlashOn;
 80a04a6:	fab3 f383 	clz	r3, r3
 80a04aa:	095b      	lsrs	r3, r3, #5
 80a04ac:	6023      	str	r3, [r4, #0]
        nextLedFlashTime += WARMING_UP_LED_TIME_DIFFERENCE;
 80a04ae:	600a      	str	r2, [r1, #0]
      Serial.print(ledFlashOn);
 80a04b0:	f002 f9a8 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a04b4:	220a      	movs	r2, #10
 80a04b6:	6821      	ldr	r1, [r4, #0]
 80a04b8:	f7ff fe1c 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a04bc:	f001 fcea 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - readingLastCalled > 1000) {
 80a04c0:	6833      	ldr	r3, [r6, #0]
 80a04c2:	1ac0      	subs	r0, r0, r3
 80a04c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a04c8:	d91c      	bls.n	80a0504 <loop+0x11c>
        if(countdown <= 9) {
 80a04ca:	4c62      	ldr	r4, [pc, #392]	; (80a0654 <loop+0x26c>)
        lcd.setCursor(14, 0);
 80a04cc:	2200      	movs	r2, #0
 80a04ce:	210e      	movs	r1, #14
 80a04d0:	485c      	ldr	r0, [pc, #368]	; (80a0644 <loop+0x25c>)
 80a04d2:	f001 fbe9 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        if(countdown <= 9) {
 80a04d6:	6823      	ldr	r3, [r4, #0]
 80a04d8:	2b09      	cmp	r3, #9
 80a04da:	dc09      	bgt.n	80a04f0 <loop+0x108>
          lcd.print(0);
 80a04dc:	220a      	movs	r2, #10
 80a04de:	2100      	movs	r1, #0
 80a04e0:	4858      	ldr	r0, [pc, #352]	; (80a0644 <loop+0x25c>)
 80a04e2:	f7ff fe07 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a04e6:	2200      	movs	r2, #0
 80a04e8:	210f      	movs	r1, #15
 80a04ea:	4856      	ldr	r0, [pc, #344]	; (80a0644 <loop+0x25c>)
 80a04ec:	f001 fbdc 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(--countdown);
 80a04f0:	6821      	ldr	r1, [r4, #0]
 80a04f2:	220a      	movs	r2, #10
 80a04f4:	3901      	subs	r1, #1
 80a04f6:	4853      	ldr	r0, [pc, #332]	; (80a0644 <loop+0x25c>)
 80a04f8:	6021      	str	r1, [r4, #0]
 80a04fa:	f7ff fdfb 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a04fe:	f001 fcc9 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        readingLastCalled = millis();
 80a0502:	6030      	str	r0, [r6, #0]
      handleLED(READING_LED_TIME_DIFFERENCE, PixelColorRed);
 80a0504:	4b54      	ldr	r3, [pc, #336]	; (80a0658 <loop+0x270>)
 80a0506:	6818      	ldr	r0, [r3, #0]
 80a0508:	e177      	b.n	80a07fa <loop+0x412>
      if (buttonState == PRESSED || buttonState == HOLD) {
 80a050a:	7833      	ldrb	r3, [r6, #0]
 80a050c:	3b01      	subs	r3, #1
 80a050e:	2b01      	cmp	r3, #1
 80a0510:	d817      	bhi.n	80a0542 <loop+0x15a>
        deviceMode = READING;
 80a0512:	2302      	movs	r3, #2
 80a0514:	7023      	strb	r3, [r4, #0]
 80a0516:	f001 fcbd 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        stateChangeTime = millis() + READING_MODE_TIME;
 80a051a:	4b49      	ldr	r3, [pc, #292]	; (80a0640 <loop+0x258>)
 80a051c:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a0520:	3010      	adds	r0, #16
 80a0522:	6018      	str	r0, [r3, #0]
 80a0524:	f001 fcb6 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        countdown1 = READING_MODE_TIME / 1000;
 80a0528:	220a      	movs	r2, #10
        readingLastCalled = millis();
 80a052a:	4b44      	ldr	r3, [pc, #272]	; (80a063c <loop+0x254>)
 80a052c:	6018      	str	r0, [r3, #0]
        countdown1 = READING_MODE_TIME / 1000;
 80a052e:	4b4b      	ldr	r3, [pc, #300]	; (80a065c <loop+0x274>)
        lcd.clear();
 80a0530:	4844      	ldr	r0, [pc, #272]	; (80a0644 <loop+0x25c>)
        countdown1 = READING_MODE_TIME / 1000;
 80a0532:	601a      	str	r2, [r3, #0]
        lcd.clear();
 80a0534:	f001 fbae 	bl	80a1c94 <_ZN7rgb_lcd5clearEv>
        Serial.print("Button press");
 80a0538:	f002 f964 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a053c:	4948      	ldr	r1, [pc, #288]	; (80a0660 <loop+0x278>)
 80a053e:	f001 fea7 	bl	80a2290 <_ZN5Print5printEPKc>
}
 80a0542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  strip.show();
 80a0546:	4847      	ldr	r0, [pc, #284]	; (80a0664 <loop+0x27c>)
 80a0548:	f000 ba64 	b.w	80a0a14 <_ZN17Adafruit_NeoPixel4showEv>
      if (currentTime > stateChangeTime) {
 80a054c:	4b3c      	ldr	r3, [pc, #240]	; (80a0640 <loop+0x258>)
 80a054e:	682a      	ldr	r2, [r5, #0]
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	4e45      	ldr	r6, [pc, #276]	; (80a0668 <loop+0x280>)
 80a0554:	429a      	cmp	r2, r3
 80a0556:	f240 80a4 	bls.w	80a06a2 <loop+0x2ba>
        deviceMode = COOLDOWN;
 80a055a:	2304      	movs	r3, #4
 80a055c:	7023      	strb	r3, [r4, #0]
        float avgRawValue = fullSampleTotal / fullSampleCount;
 80a055e:	4b43      	ldr	r3, [pc, #268]	; (80a066c <loop+0x284>)
        avgPPM = getPPM(avgRawValue);
 80a0560:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80a0670 <loop+0x288>
        float avgRawValue = fullSampleTotal / fullSampleCount;
 80a0564:	6818      	ldr	r0, [r3, #0]
 80a0566:	f004 fa1f 	bl	80a49a8 <__aeabi_i2f>
 80a056a:	4b42      	ldr	r3, [pc, #264]	; (80a0674 <loop+0x28c>)
 80a056c:	4601      	mov	r1, r0
 80a056e:	6818      	ldr	r0, [r3, #0]
 80a0570:	f004 fb22 	bl	80a4bb8 <__aeabi_fdiv>
 80a0574:	4604      	mov	r4, r0
 80a0576:	f001 fc8d 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        countdown2 = COOLDOWN_TIME / 1000;
 80a057a:	220a      	movs	r2, #10
        cooldownLastCalled = millis();
 80a057c:	4b3e      	ldr	r3, [pc, #248]	; (80a0678 <loop+0x290>)
 80a057e:	6018      	str	r0, [r3, #0]
        countdown2 = COOLDOWN_TIME / 1000;
 80a0580:	4b3e      	ldr	r3, [pc, #248]	; (80a067c <loop+0x294>)
 80a0582:	601a      	str	r2, [r3, #0]
        maxPPM = getPPM(maxRawValue);
 80a0584:	4b3e      	ldr	r3, [pc, #248]	; (80a0680 <loop+0x298>)
 80a0586:	6818      	ldr	r0, [r3, #0]
 80a0588:	f004 fa0e 	bl	80a49a8 <__aeabi_i2f>
 80a058c:	4607      	mov	r7, r0
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a058e:	f003 fdb1 	bl	80a40f4 <__aeabi_f2d>
 80a0592:	a321      	add	r3, pc, #132	; (adr r3, 80a0618 <loop+0x230>)
 80a0594:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0598:	f003 fe04 	bl	80a41a4 <__aeabi_dmul>
 80a059c:	f004 f8fa 	bl	80a4794 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a05a0:	f003 fda8 	bl	80a40f4 <__aeabi_f2d>
 80a05a4:	a31e      	add	r3, pc, #120	; (adr r3, 80a0620 <loop+0x238>)
 80a05a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05aa:	f003 fdfb 	bl	80a41a4 <__aeabi_dmul>
 80a05ae:	f004 f8f1 	bl	80a4794 <__aeabi_d2f>
        maxPPM = getPPM(maxRawValue);
 80a05b2:	f004 fb9d 	bl	80a4cf0 <__aeabi_f2iz>
 80a05b6:	4b33      	ldr	r3, [pc, #204]	; (80a0684 <loop+0x29c>)
 80a05b8:	6018      	str	r0, [r3, #0]
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a05ba:	4620      	mov	r0, r4
 80a05bc:	f003 fd9a 	bl	80a40f4 <__aeabi_f2d>
 80a05c0:	a315      	add	r3, pc, #84	; (adr r3, 80a0618 <loop+0x230>)
 80a05c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05c6:	f003 fded 	bl	80a41a4 <__aeabi_dmul>
 80a05ca:	f004 f8e3 	bl	80a4794 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a05ce:	f003 fd91 	bl	80a40f4 <__aeabi_f2d>
 80a05d2:	a313      	add	r3, pc, #76	; (adr r3, 80a0620 <loop+0x238>)
 80a05d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05d8:	f003 fde4 	bl	80a41a4 <__aeabi_dmul>
 80a05dc:	f004 f8da 	bl	80a4794 <__aeabi_d2f>
        avgPPM = getPPM(avgRawValue);
 80a05e0:	f004 fb86 	bl	80a4cf0 <__aeabi_f2iz>
 80a05e4:	f8c8 0000 	str.w	r0, [r8]
        maxBAC = getBAC(maxRawValue);
 80a05e8:	4638      	mov	r0, r7
 80a05ea:	f7ff fdf1 	bl	80a01d0 <_Z6getBACf>
 80a05ee:	4b26      	ldr	r3, [pc, #152]	; (80a0688 <loop+0x2a0>)
 80a05f0:	6018      	str	r0, [r3, #0]
        avgBAC = getBAC(avgRawValue);
 80a05f2:	4620      	mov	r0, r4
 80a05f4:	f7ff fdec 	bl	80a01d0 <_Z6getBACf>
 80a05f8:	4b24      	ldr	r3, [pc, #144]	; (80a068c <loop+0x2a4>)
 80a05fa:	6018      	str	r0, [r3, #0]
        updateDisplay();
 80a05fc:	f7ff fe34 	bl	80a0268 <_Z13updateDisplayv>
        if(avgPPM >= HIGH_PPM) {
 80a0600:	f643 2297 	movw	r2, #14999	; 0x3a97
 80a0604:	f8d8 3000 	ldr.w	r3, [r8]
 80a0608:	4293      	cmp	r3, r2
 80a060a:	dd41      	ble.n	80a0690 <loop+0x2a8>
          handleLED(SOLID, PixelColorRed);
 80a060c:	4b12      	ldr	r3, [pc, #72]	; (80a0658 <loop+0x270>)
          handleLED(SOLID, PixelColorGreen);
 80a060e:	6819      	ldr	r1, [r3, #0]
 80a0610:	e044      	b.n	80a069c <loop+0x2b4>
 80a0612:	bf00      	nop
 80a0614:	f3af 8000 	nop.w
 80a0618:	13bacbaf 	.word	0x13bacbaf
 80a061c:	3f540140 	.word	0x3f540140
 80a0620:	2e8ba608 	.word	0x2e8ba608
 80a0624:	408c68ba 	.word	0x408c68ba
 80a0628:	200000ac 	.word	0x200000ac
 80a062c:	2000009c 	.word	0x2000009c
 80a0630:	080a4f04 	.word	0x080a4f04
 80a0634:	200000b4 	.word	0x200000b4
 80a0638:	20000088 	.word	0x20000088
 80a063c:	2000008c 	.word	0x2000008c
 80a0640:	200000f4 	.word	0x200000f4
 80a0644:	200000c8 	.word	0x200000c8
 80a0648:	080a4f12 	.word	0x080a4f12
 80a064c:	200000e8 	.word	0x200000e8
 80a0650:	200000d8 	.word	0x200000d8
 80a0654:	20000000 	.word	0x20000000
 80a0658:	20000080 	.word	0x20000080
 80a065c:	200000a4 	.word	0x200000a4
 80a0660:	080a4f1b 	.word	0x080a4f1b
 80a0664:	200000f8 	.word	0x200000f8
 80a0668:	20000084 	.word	0x20000084
 80a066c:	200000b8 	.word	0x200000b8
 80a0670:	20000094 	.word	0x20000094
 80a0674:	200000bc 	.word	0x200000bc
 80a0678:	200000a0 	.word	0x200000a0
 80a067c:	200000a8 	.word	0x200000a8
 80a0680:	200000e4 	.word	0x200000e4
 80a0684:	200000e0 	.word	0x200000e0
 80a0688:	200000dc 	.word	0x200000dc
 80a068c:	20000090 	.word	0x20000090
        } else if (avgPPM >= MEDIUM_PPM) {
 80a0690:	f242 720f 	movw	r2, #9999	; 0x270f
 80a0694:	4293      	cmp	r3, r2
 80a0696:	f340 80b3 	ble.w	80a0800 <loop+0x418>
          handleLED(SOLID, PixelColorYellow);
 80a069a:	6831      	ldr	r1, [r6, #0]
          handleLED(SOLID, PixelColorGreen);
 80a069c:	2000      	movs	r0, #0
 80a069e:	f7ff fe53 	bl	80a0348 <_Z9handleLEDii>
      if (currentTime - lastSensorReadTime > MS_BETWEEN_SAMPLES) {
 80a06a2:	4c87      	ldr	r4, [pc, #540]	; (80a08c0 <loop+0x4d8>)
 80a06a4:	682b      	ldr	r3, [r5, #0]
 80a06a6:	6822      	ldr	r2, [r4, #0]
 80a06a8:	4f86      	ldr	r7, [pc, #536]	; (80a08c4 <loop+0x4dc>)
 80a06aa:	1a9b      	subs	r3, r3, r2
 80a06ac:	2b14      	cmp	r3, #20
 80a06ae:	d911      	bls.n	80a06d4 <loop+0x2ec>
        smallSampleTotal += analogRead(MQ3_PIN);
 80a06b0:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a08c8 <loop+0x4e0>
 80a06b4:	200a      	movs	r0, #10
 80a06b6:	f002 fafa 	bl	80a2cae <analogRead>
 80a06ba:	f004 f975 	bl	80a49a8 <__aeabi_i2f>
 80a06be:	f8d8 1000 	ldr.w	r1, [r8]
 80a06c2:	f004 f8bd 	bl	80a4840 <__addsf3>
        smallSampleCount++;
 80a06c6:	683b      	ldr	r3, [r7, #0]
        smallSampleTotal += analogRead(MQ3_PIN);
 80a06c8:	f8c8 0000 	str.w	r0, [r8]
        smallSampleCount++;
 80a06cc:	3301      	adds	r3, #1
 80a06ce:	603b      	str	r3, [r7, #0]
        lastSensorReadTime = currentTime;
 80a06d0:	682b      	ldr	r3, [r5, #0]
 80a06d2:	6023      	str	r3, [r4, #0]
      if (smallSampleCount == 10) { 
 80a06d4:	683b      	ldr	r3, [r7, #0]
 80a06d6:	2b0a      	cmp	r3, #10
 80a06d8:	f040 808e 	bne.w	80a07f8 <loop+0x410>
        smallSampleAvg = smallSampleTotal * 0.1;
 80a06dc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80a08c8 <loop+0x4e0>
        fullSampleTotal += smallSampleAvg;
 80a06e0:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80a08cc <loop+0x4e4>
        smallSampleAvg = smallSampleTotal * 0.1;
 80a06e4:	f8d8 0000 	ldr.w	r0, [r8]
 80a06e8:	f003 fd04 	bl	80a40f4 <__aeabi_f2d>
 80a06ec:	a36e      	add	r3, pc, #440	; (adr r3, 80a08a8 <loop+0x4c0>)
 80a06ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06f2:	f003 fd57 	bl	80a41a4 <__aeabi_dmul>
 80a06f6:	f004 f805 	bl	80a4704 <__aeabi_d2iz>
 80a06fa:	4604      	mov	r4, r0
        fullSampleTotal += smallSampleAvg;
 80a06fc:	f004 f954 	bl	80a49a8 <__aeabi_i2f>
 80a0700:	4601      	mov	r1, r0
 80a0702:	4605      	mov	r5, r0
 80a0704:	f8d9 0000 	ldr.w	r0, [r9]
 80a0708:	f004 f89a 	bl	80a4840 <__addsf3>
        fullSampleCount++;
 80a070c:	4a70      	ldr	r2, [pc, #448]	; (80a08d0 <loop+0x4e8>)
        fullSampleTotal += smallSampleAvg;
 80a070e:	f8c9 0000 	str.w	r0, [r9]
        fullSampleCount++;
 80a0712:	6813      	ldr	r3, [r2, #0]
        lcd.setCursor(0, 0);
 80a0714:	486f      	ldr	r0, [pc, #444]	; (80a08d4 <loop+0x4ec>)
        fullSampleCount++;
 80a0716:	3301      	adds	r3, #1
 80a0718:	6013      	str	r3, [r2, #0]
        if(smallSampleAvg > maxRawValue) {
 80a071a:	4b6f      	ldr	r3, [pc, #444]	; (80a08d8 <loop+0x4f0>)
 80a071c:	681a      	ldr	r2, [r3, #0]
 80a071e:	42a2      	cmp	r2, r4
          maxRawValue = smallSampleAvg;
 80a0720:	bfb8      	it	lt
 80a0722:	601c      	strlt	r4, [r3, #0]
        smallSampleCount = 0;
 80a0724:	2400      	movs	r4, #0
        smallSampleTotal = 0;
 80a0726:	2300      	movs	r3, #0
        lcd.setCursor(0, 0);
 80a0728:	4622      	mov	r2, r4
 80a072a:	4621      	mov	r1, r4
        smallSampleTotal = 0;
 80a072c:	f8c8 3000 	str.w	r3, [r8]
        smallSampleCount = 0;
 80a0730:	603c      	str	r4, [r7, #0]
        lcd.setCursor(0, 0);
 80a0732:	f001 fab9 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print("READING...");
 80a0736:	4969      	ldr	r1, [pc, #420]	; (80a08dc <loop+0x4f4>)
 80a0738:	4866      	ldr	r0, [pc, #408]	; (80a08d4 <loop+0x4ec>)
 80a073a:	f001 fda9 	bl	80a2290 <_ZN5Print5printEPKc>
 80a073e:	f001 fba9 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - readingLastCalled > 1000) {
 80a0742:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80a08e0 <loop+0x4f8>
 80a0746:	f8d8 3000 	ldr.w	r3, [r8]
 80a074a:	1ac0      	subs	r0, r0, r3
 80a074c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0750:	d91d      	bls.n	80a078e <loop+0x3a6>
          if(countdown <= 9) {
 80a0752:	4f64      	ldr	r7, [pc, #400]	; (80a08e4 <loop+0x4fc>)
          lcd.setCursor(14, 0);
 80a0754:	4622      	mov	r2, r4
 80a0756:	210e      	movs	r1, #14
 80a0758:	485e      	ldr	r0, [pc, #376]	; (80a08d4 <loop+0x4ec>)
 80a075a:	f001 faa5 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
          if(countdown <= 9) {
 80a075e:	683b      	ldr	r3, [r7, #0]
 80a0760:	2b09      	cmp	r3, #9
 80a0762:	dc09      	bgt.n	80a0778 <loop+0x390>
            lcd.print(0);
 80a0764:	220a      	movs	r2, #10
 80a0766:	4621      	mov	r1, r4
 80a0768:	485a      	ldr	r0, [pc, #360]	; (80a08d4 <loop+0x4ec>)
 80a076a:	f7ff fcc3 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
            lcd.setCursor(15, 0);
 80a076e:	4622      	mov	r2, r4
 80a0770:	210f      	movs	r1, #15
 80a0772:	4858      	ldr	r0, [pc, #352]	; (80a08d4 <loop+0x4ec>)
 80a0774:	f001 fa98 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
          lcd.print(--countdown);
 80a0778:	6839      	ldr	r1, [r7, #0]
 80a077a:	220a      	movs	r2, #10
 80a077c:	3901      	subs	r1, #1
 80a077e:	4855      	ldr	r0, [pc, #340]	; (80a08d4 <loop+0x4ec>)
 80a0780:	6039      	str	r1, [r7, #0]
 80a0782:	f7ff fcb7 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a0786:	f001 fb85 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
          readingLastCalled = millis();
 80a078a:	f8c8 0000 	str.w	r0, [r8]
        lcd.setCursor(0, 1);
 80a078e:	2201      	movs	r2, #1
 80a0790:	2100      	movs	r1, #0
 80a0792:	4850      	ldr	r0, [pc, #320]	; (80a08d4 <loop+0x4ec>)
 80a0794:	f001 fa88 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        if (displayMode == PPM) {
 80a0798:	4b53      	ldr	r3, [pc, #332]	; (80a08e8 <loop+0x500>)
 80a079a:	781c      	ldrb	r4, [r3, #0]
 80a079c:	bb94      	cbnz	r4, 80a0804 <loop+0x41c>
          lcd.print("PPM:");
 80a079e:	4953      	ldr	r1, [pc, #332]	; (80a08ec <loop+0x504>)
 80a07a0:	484c      	ldr	r0, [pc, #304]	; (80a08d4 <loop+0x4ec>)
 80a07a2:	f001 fd75 	bl	80a2290 <_ZN5Print5printEPKc>
          Serial.print("PPM: ");
 80a07a6:	f002 f82d 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a07aa:	4951      	ldr	r1, [pc, #324]	; (80a08f0 <loop+0x508>)
 80a07ac:	f001 fd70 	bl	80a2290 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a07b0:	2201      	movs	r2, #1
 80a07b2:	2104      	movs	r1, #4
 80a07b4:	4847      	ldr	r0, [pc, #284]	; (80a08d4 <loop+0x4ec>)
 80a07b6:	f001 fa77 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a07ba:	4628      	mov	r0, r5
 80a07bc:	f003 fc9a 	bl	80a40f4 <__aeabi_f2d>
 80a07c0:	a33b      	add	r3, pc, #236	; (adr r3, 80a08b0 <loop+0x4c8>)
 80a07c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07c6:	f003 fced 	bl	80a41a4 <__aeabi_dmul>
 80a07ca:	f003 ffe3 	bl	80a4794 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a07ce:	f003 fc91 	bl	80a40f4 <__aeabi_f2d>
 80a07d2:	a339      	add	r3, pc, #228	; (adr r3, 80a08b8 <loop+0x4d0>)
 80a07d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07d8:	f003 fce4 	bl	80a41a4 <__aeabi_dmul>
 80a07dc:	f003 ffda 	bl	80a4794 <__aeabi_d2f>
          float bac = getBAC(getPPM(smallSampleAvg));
 80a07e0:	4604      	mov	r4, r0
          lcd.print(bac);
 80a07e2:	4601      	mov	r1, r0
 80a07e4:	2202      	movs	r2, #2
 80a07e6:	483b      	ldr	r0, [pc, #236]	; (80a08d4 <loop+0x4ec>)
 80a07e8:	f001 fe44 	bl	80a2474 <_ZN5Print5printEfi>
          Serial.println(bac);
 80a07ec:	f002 f80a 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a07f0:	2202      	movs	r2, #2
 80a07f2:	4621      	mov	r1, r4
 80a07f4:	f001 fe5b 	bl	80a24ae <_ZN5Print7printlnEfi>
  if(timeDifference != SOLID) {
 80a07f8:	6830      	ldr	r0, [r6, #0]
 80a07fa:	f7ff fc5b 	bl	80a00b4 <_Z9handleLEDii.part.0>
 80a07fe:	e6a0      	b.n	80a0542 <loop+0x15a>
          handleLED(SOLID, PixelColorGreen);
 80a0800:	4b3c      	ldr	r3, [pc, #240]	; (80a08f4 <loop+0x50c>)
 80a0802:	e704      	b.n	80a060e <loop+0x226>
        } else if (displayMode == BAC) {
 80a0804:	2c01      	cmp	r4, #1
 80a0806:	d1f7      	bne.n	80a07f8 <loop+0x410>
          lcd.print("BAC:");
 80a0808:	493b      	ldr	r1, [pc, #236]	; (80a08f8 <loop+0x510>)
 80a080a:	4832      	ldr	r0, [pc, #200]	; (80a08d4 <loop+0x4ec>)
 80a080c:	f001 fd40 	bl	80a2290 <_ZN5Print5printEPKc>
          Serial.print("BAC: ");
 80a0810:	f001 fff8 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a0814:	4939      	ldr	r1, [pc, #228]	; (80a08fc <loop+0x514>)
 80a0816:	f001 fd3b 	bl	80a2290 <_ZN5Print5printEPKc>
          lcd.setCursor(4, 1);
 80a081a:	4622      	mov	r2, r4
 80a081c:	2104      	movs	r1, #4
 80a081e:	482d      	ldr	r0, [pc, #180]	; (80a08d4 <loop+0x4ec>)
 80a0820:	f001 fa42 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
  float voltage = rawValue * 0.00122100122; // 0.00122100122 is 5/4095.0, processor is slow so need to avoid division.
 80a0824:	4628      	mov	r0, r5
 80a0826:	f003 fc65 	bl	80a40f4 <__aeabi_f2d>
 80a082a:	a321      	add	r3, pc, #132	; (adr r3, 80a08b0 <loop+0x4c8>)
 80a082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0830:	f003 fcb8 	bl	80a41a4 <__aeabi_dmul>
 80a0834:	f003 ffae 	bl	80a4794 <__aeabi_d2f>
  return voltage * 909.090909091; // 909.090909091 is 1000/1.1
 80a0838:	f003 fc5c 	bl	80a40f4 <__aeabi_f2d>
 80a083c:	a31e      	add	r3, pc, #120	; (adr r3, 80a08b8 <loop+0x4d0>)
 80a083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0842:	f003 fcaf 	bl	80a41a4 <__aeabi_dmul>
 80a0846:	f003 ffa5 	bl	80a4794 <__aeabi_d2f>
          float bac = getBAC(getPPM(smallSampleAvg));
 80a084a:	f7ff fcc1 	bl	80a01d0 <_Z6getBACf>
 80a084e:	e7c7      	b.n	80a07e0 <loop+0x3f8>
      if (countdown == 0) {
 80a0850:	4d24      	ldr	r5, [pc, #144]	; (80a08e4 <loop+0x4fc>)
 80a0852:	682b      	ldr	r3, [r5, #0]
 80a0854:	b90b      	cbnz	r3, 80a085a <loop+0x472>
        deviceMode = IDLE;
 80a0856:	2301      	movs	r3, #1
 80a0858:	7023      	strb	r3, [r4, #0]
 80a085a:	f001 fb1b 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - cooldownLastCalled > 1000) {
 80a085e:	4c28      	ldr	r4, [pc, #160]	; (80a0900 <loop+0x518>)
 80a0860:	6823      	ldr	r3, [r4, #0]
 80a0862:	1ac0      	subs	r0, r0, r3
 80a0864:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a0868:	f67f ae6b 	bls.w	80a0542 <loop+0x15a>
        lcd.setCursor(14, 0);
 80a086c:	2200      	movs	r2, #0
 80a086e:	210e      	movs	r1, #14
 80a0870:	4818      	ldr	r0, [pc, #96]	; (80a08d4 <loop+0x4ec>)
 80a0872:	f001 fa19 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        if(countdown <= 9) {
 80a0876:	682b      	ldr	r3, [r5, #0]
 80a0878:	2b09      	cmp	r3, #9
 80a087a:	dc09      	bgt.n	80a0890 <loop+0x4a8>
          lcd.print(0);
 80a087c:	220a      	movs	r2, #10
 80a087e:	2100      	movs	r1, #0
 80a0880:	4814      	ldr	r0, [pc, #80]	; (80a08d4 <loop+0x4ec>)
 80a0882:	f7ff fc37 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
          lcd.setCursor(15, 0);
 80a0886:	2200      	movs	r2, #0
 80a0888:	210f      	movs	r1, #15
 80a088a:	4812      	ldr	r0, [pc, #72]	; (80a08d4 <loop+0x4ec>)
 80a088c:	f001 fa0c 	bl	80a1ca8 <_ZN7rgb_lcd9setCursorEhh>
        lcd.print(--countdown);
 80a0890:	6829      	ldr	r1, [r5, #0]
 80a0892:	220a      	movs	r2, #10
 80a0894:	3901      	subs	r1, #1
 80a0896:	480f      	ldr	r0, [pc, #60]	; (80a08d4 <loop+0x4ec>)
 80a0898:	6029      	str	r1, [r5, #0]
 80a089a:	f7ff fc2b 	bl	80a00f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
 80a089e:	f001 faf9 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
        cooldownLastCalled = millis();
 80a08a2:	6020      	str	r0, [r4, #0]
 80a08a4:	e64d      	b.n	80a0542 <loop+0x15a>
 80a08a6:	bf00      	nop
 80a08a8:	9999999a 	.word	0x9999999a
 80a08ac:	3fb99999 	.word	0x3fb99999
 80a08b0:	13bacbaf 	.word	0x13bacbaf
 80a08b4:	3f540140 	.word	0x3f540140
 80a08b8:	2e8ba608 	.word	0x2e8ba608
 80a08bc:	408c68ba 	.word	0x408c68ba
 80a08c0:	200000c4 	.word	0x200000c4
 80a08c4:	200000ec 	.word	0x200000ec
 80a08c8:	200000f0 	.word	0x200000f0
 80a08cc:	200000bc 	.word	0x200000bc
 80a08d0:	200000b8 	.word	0x200000b8
 80a08d4:	200000c8 	.word	0x200000c8
 80a08d8:	200000e4 	.word	0x200000e4
 80a08dc:	080a4f28 	.word	0x080a4f28
 80a08e0:	2000008c 	.word	0x2000008c
 80a08e4:	20000000 	.word	0x20000000
 80a08e8:	200000b5 	.word	0x200000b5
 80a08ec:	080a4eed 	.word	0x080a4eed
 80a08f0:	080a4f33 	.word	0x080a4f33
 80a08f4:	20000078 	.word	0x20000078
 80a08f8:	080a4eff 	.word	0x080a4eff
 80a08fc:	080a4f39 	.word	0x080a4f39
 80a0900:	200000a0 	.word	0x200000a0

080a0904 <_GLOBAL__sub_I_lcd>:
}
 80a0904:	b510      	push	{r4, lr}
rgb_lcd lcd;
 80a0906:	4813      	ldr	r0, [pc, #76]	; (80a0954 <_GLOBAL__sub_I_lcd+0x50>)
 80a0908:	f001 f9bc 	bl	80a1c84 <_ZN7rgb_lcdC1Ev>
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a090c:	2302      	movs	r3, #2
 80a090e:	2203      	movs	r2, #3
 80a0910:	2101      	movs	r1, #1
 80a0912:	4811      	ldr	r0, [pc, #68]	; (80a0958 <_GLOBAL__sub_I_lcd+0x54>)
 80a0914:	f000 f86d 	bl	80a09f2 <_ZN17Adafruit_NeoPixelC1Ethh>
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0918:	2200      	movs	r2, #0
 80a091a:	4c10      	ldr	r4, [pc, #64]	; (80a095c <_GLOBAL__sub_I_lcd+0x58>)
 80a091c:	4610      	mov	r0, r2
 80a091e:	7821      	ldrb	r1, [r4, #0]
 80a0920:	f001 f967 	bl	80a1bf2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0924:	2200      	movs	r2, #0
int PixelColorRed = strip.Color(0, intensity, 0);
 80a0926:	4b0e      	ldr	r3, [pc, #56]	; (80a0960 <_GLOBAL__sub_I_lcd+0x5c>)
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0928:	4611      	mov	r1, r2
int PixelColorRed = strip.Color(0, intensity, 0);
 80a092a:	6018      	str	r0, [r3, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a092c:	7820      	ldrb	r0, [r4, #0]
 80a092e:	f001 f960 	bl	80a1bf2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0932:	4b0c      	ldr	r3, [pc, #48]	; (80a0964 <_GLOBAL__sub_I_lcd+0x60>)
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0934:	7821      	ldrb	r1, [r4, #0]
int PixelColorGreen  = strip.Color(intensity,  0,  0);
 80a0936:	6018      	str	r0, [r3, #0]
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0938:	2200      	movs	r2, #0
 80a093a:	4608      	mov	r0, r1
 80a093c:	f001 f959 	bl	80a1bf2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0940:	2200      	movs	r2, #0
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0942:	4b09      	ldr	r3, [pc, #36]	; (80a0968 <_GLOBAL__sub_I_lcd+0x64>)
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0944:	4611      	mov	r1, r2
int PixelColorYellow = strip.Color(  intensity, intensity, 0);
 80a0946:	6018      	str	r0, [r3, #0]
int PixelColorOff = strip.Color(  0,  0,  0);
 80a0948:	4610      	mov	r0, r2
 80a094a:	f001 f952 	bl	80a1bf2 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a094e:	4b07      	ldr	r3, [pc, #28]	; (80a096c <_GLOBAL__sub_I_lcd+0x68>)
 80a0950:	6018      	str	r0, [r3, #0]
}
 80a0952:	bd10      	pop	{r4, pc}
 80a0954:	200000c8 	.word	0x200000c8
 80a0958:	200000f8 	.word	0x200000f8
 80a095c:	20000004 	.word	0x20000004
 80a0960:	20000080 	.word	0x20000080
 80a0964:	20000078 	.word	0x20000078
 80a0968:	20000084 	.word	0x20000084
 80a096c:	2000007c 	.word	0x2000007c

080a0970 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0970:	b538      	push	{r3, r4, r5, lr}
 80a0972:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0974:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0976:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0978:	b108      	cbz	r0, 80a097e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a097a:	f001 fc21 	bl	80a21c0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a097e:	79a3      	ldrb	r3, [r4, #6]
 80a0980:	2b06      	cmp	r3, #6
 80a0982:	bf0c      	ite	eq
 80a0984:	2004      	moveq	r0, #4
 80a0986:	2003      	movne	r0, #3
 80a0988:	4368      	muls	r0, r5
 80a098a:	b280      	uxth	r0, r0
 80a098c:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a098e:	f001 fc0f 	bl	80a21b0 <malloc>
 80a0992:	60e0      	str	r0, [r4, #12]
 80a0994:	b128      	cbz	r0, 80a09a2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0996:	2100      	movs	r1, #0
 80a0998:	88a2      	ldrh	r2, [r4, #4]
 80a099a:	f004 f9e3 	bl	80a4d64 <memset>
    numLEDs = n;
 80a099e:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a09a0:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a09a2:	80a0      	strh	r0, [r4, #4]
 80a09a4:	8060      	strh	r0, [r4, #2]
}
 80a09a6:	e7fb      	b.n	80a09a0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a09a8 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a09a8:	b510      	push	{r4, lr}
 80a09aa:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a09ac:	2101      	movs	r1, #1
 80a09ae:	79c0      	ldrb	r0, [r0, #7]
 80a09b0:	f002 f940 	bl	80a2c34 <pinMode>
  digitalWrite(pin, LOW);
 80a09b4:	2100      	movs	r1, #0
 80a09b6:	79e0      	ldrb	r0, [r4, #7]
 80a09b8:	f002 f94d 	bl	80a2c56 <digitalWrite>
  begun = true;
 80a09bc:	2301      	movs	r3, #1
 80a09be:	7023      	strb	r3, [r4, #0]
}
 80a09c0:	bd10      	pop	{r4, pc}

080a09c2 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09c2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a09c4:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a09c6:	4605      	mov	r5, r0
 80a09c8:	460c      	mov	r4, r1
    if (begun) {
 80a09ca:	b11b      	cbz	r3, 80a09d4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a09cc:	2100      	movs	r1, #0
 80a09ce:	79c0      	ldrb	r0, [r0, #7]
 80a09d0:	f002 f930 	bl	80a2c34 <pinMode>
    }
    pin = p;
    if (begun) {
 80a09d4:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a09d6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a09d8:	b153      	cbz	r3, 80a09f0 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a09da:	b2a4      	uxth	r4, r4
 80a09dc:	4620      	mov	r0, r4
 80a09de:	2101      	movs	r1, #1
 80a09e0:	f002 f928 	bl	80a2c34 <pinMode>
        digitalWrite(p, LOW);
 80a09e4:	4620      	mov	r0, r4
    }
}
 80a09e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a09ea:	2100      	movs	r1, #0
 80a09ec:	f002 b933 	b.w	80a2c56 <digitalWrite>
}
 80a09f0:	bd38      	pop	{r3, r4, r5, pc}

080a09f2 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a09f2:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a09f4:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a09f6:	4604      	mov	r4, r0
 80a09f8:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a09fa:	7183      	strb	r3, [r0, #6]
 80a09fc:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0a00:	7005      	strb	r5, [r0, #0]
 80a0a02:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0a04:	f7ff ffb4 	bl	80a0970 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0a08:	4620      	mov	r0, r4
 80a0a0a:	4631      	mov	r1, r6
 80a0a0c:	f7ff ffd9 	bl	80a09c2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0a10:	4620      	mov	r0, r4
 80a0a12:	bd70      	pop	{r4, r5, r6, pc}

080a0a14 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0a14:	68c3      	ldr	r3, [r0, #12]
 80a0a16:	2b00      	cmp	r3, #0
 80a0a18:	f000 8441 	beq.w	80a129e <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a1e:	7983      	ldrb	r3, [r0, #6]
 80a0a20:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0a22:	3b02      	subs	r3, #2
 80a0a24:	b2db      	uxtb	r3, r3
 80a0a26:	2b04      	cmp	r3, #4
 80a0a28:	bf8c      	ite	hi
 80a0a2a:	2532      	movhi	r5, #50	; 0x32
 80a0a2c:	4a28      	ldrls	r2, [pc, #160]	; (80a0ad0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0a2e:	b087      	sub	sp, #28
 80a0a30:	bf98      	it	ls
 80a0a32:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0a36:	f001 fa25 	bl	80a1e84 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0a3a:	6923      	ldr	r3, [r4, #16]
 80a0a3c:	1ac0      	subs	r0, r0, r3
 80a0a3e:	42a8      	cmp	r0, r5
 80a0a40:	d3f9      	bcc.n	80a0a36 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0a42:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a44:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a46:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0a48:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a50:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0a52:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a54:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0a56:	f000 826e 	beq.w	80a0f36 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0a5a:	2d07      	cmp	r5, #7
 80a0a5c:	f000 826b 	beq.w	80a0f36 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0a60:	2d06      	cmp	r5, #6
 80a0a62:	f000 841d 	beq.w	80a12a0 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0a66:	2d05      	cmp	r5, #5
 80a0a68:	f000 83a1 	beq.w	80a11ae <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0a6c:	2d08      	cmp	r5, #8
 80a0a6e:	f000 839e 	beq.w	80a11ae <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0a72:	2d00      	cmp	r5, #0
 80a0a74:	f040 854f 	bne.w	80a1516 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a78:	2b00      	cmp	r3, #0
 80a0a7a:	f000 8392 	beq.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0a7e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a0a82:	4a14      	ldr	r2, [pc, #80]	; (80a0ad4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0a84:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0a86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0a8a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0a8c:	3b03      	subs	r3, #3
 80a0a8e:	b29b      	uxth	r3, r3
 80a0a90:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0a94:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0a98:	b2db      	uxtb	r3, r3
 80a0a9a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0a9e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0aa2:	b2db      	uxtb	r3, r3
 80a0aa4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0aa8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0aac:	b2db      	uxtb	r3, r3
 80a0aae:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ab2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0ab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0aba:	021b      	lsls	r3, r3, #8
 80a0abc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0ac0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0ac4:	4303      	orrs	r3, r0
 80a0ac6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ac8:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0acc:	e11b      	b.n	80a0d06 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a0ace:	bf00      	nop
 80a0ad0:	080a4f40 	.word	0x080a4f40
 80a0ad4:	20000110 	.word	0x20000110
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a0ad8:	4600      	mov	r0, r0
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0be0:	79e3      	ldrb	r3, [r4, #7]
 80a0be2:	6810      	ldr	r0, [r2, #0]
 80a0be4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0be8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0bec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0bf0:	88b8      	ldrh	r0, [r7, #4]
 80a0bf2:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0bf4:	4600      	mov	r0, r0
 80a0bf6:	bf00      	nop
 80a0bf8:	bf00      	nop
 80a0bfa:	bf00      	nop
 80a0bfc:	bf00      	nop
 80a0bfe:	bf00      	nop
 80a0c00:	bf00      	nop
 80a0c02:	bf00      	nop
 80a0c04:	bf00      	nop
 80a0c06:	bf00      	nop
 80a0c08:	bf00      	nop
 80a0c0a:	bf00      	nop
 80a0c0c:	bf00      	nop
 80a0c0e:	bf00      	nop
 80a0c10:	bf00      	nop
 80a0c12:	bf00      	nop
 80a0c14:	bf00      	nop
 80a0c16:	bf00      	nop
 80a0c18:	bf00      	nop
 80a0c1a:	bf00      	nop
 80a0c1c:	bf00      	nop
 80a0c1e:	bf00      	nop
 80a0c20:	bf00      	nop
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0cee:	9b04      	ldr	r3, [sp, #16]
 80a0cf0:	085b      	lsrs	r3, r3, #1
 80a0cf2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0cf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0cf8:	3301      	adds	r3, #1
 80a0cfa:	b2db      	uxtb	r3, r3
 80a0cfc:	2b17      	cmp	r3, #23
 80a0cfe:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d02:	f200 8723 	bhi.w	80a1b4c <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a0d06:	79e3      	ldrb	r3, [r4, #7]
 80a0d08:	6810      	ldr	r0, [r2, #0]
 80a0d0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d0e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d16:	88b8      	ldrh	r0, [r7, #4]
 80a0d18:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d1a:	9803      	ldr	r0, [sp, #12]
 80a0d1c:	9b04      	ldr	r3, [sp, #16]
 80a0d1e:	4218      	tst	r0, r3
 80a0d20:	f47f aeda 	bne.w	80a0ad8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a0d24:	4600      	mov	r0, r0
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0d76:	79e3      	ldrb	r3, [r4, #7]
 80a0d78:	6810      	ldr	r0, [r2, #0]
 80a0d7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d7e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d86:	88b8      	ldrh	r0, [r7, #4]
 80a0d88:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0d8a:	4600      	mov	r0, r0
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	e6db      	b.n	80a0cee <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f36:	2b00      	cmp	r3, #0
 80a0f38:	f000 8133 	beq.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0f3c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0f40:	f04f 0c00 	mov.w	ip, #0
 80a0f44:	4a12      	ldr	r2, [pc, #72]	; (80a0f90 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a0f46:	4608      	mov	r0, r1
 80a0f48:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f4e:	3103      	adds	r1, #3
 80a0f50:	3b03      	subs	r3, #3
 80a0f52:	b29b      	uxth	r3, r3
 80a0f54:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0f58:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0f5c:	b2db      	uxtb	r3, r3
 80a0f5e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0f62:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0f66:	b2db      	uxtb	r3, r3
 80a0f68:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f6c:	7883      	ldrb	r3, [r0, #2]
 80a0f6e:	b2db      	uxtb	r3, r3
 80a0f70:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0f74:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a0f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0f7c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0f80:	021b      	lsls	r3, r3, #8
 80a0f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a0f86:	4303      	orrs	r3, r0
 80a0f88:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f8a:	f88d c005 	strb.w	ip, [sp, #5]
 80a0f8e:	e07f      	b.n	80a1090 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a0f90:	20000110 	.word	0x20000110
          asm volatile(
 80a0f94:	4600      	mov	r0, r0
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a102e:	79e3      	ldrb	r3, [r4, #7]
 80a1030:	6810      	ldr	r0, [r2, #0]
 80a1032:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1036:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a103a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a103e:	88b0      	ldrh	r0, [r6, #4]
 80a1040:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1042:	4600      	mov	r0, r0
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
        mask >>= 1;
 80a1078:	9b04      	ldr	r3, [sp, #16]
 80a107a:	085b      	lsrs	r3, r3, #1
 80a107c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a107e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1082:	3301      	adds	r3, #1
 80a1084:	b2db      	uxtb	r3, r3
 80a1086:	2b17      	cmp	r3, #23
 80a1088:	f88d 3005 	strb.w	r3, [sp, #5]
 80a108c:	f200 8083 	bhi.w	80a1196 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a1090:	79e3      	ldrb	r3, [r4, #7]
 80a1092:	6810      	ldr	r0, [r2, #0]
 80a1094:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1098:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a109c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10a0:	88b0      	ldrh	r0, [r6, #4]
 80a10a2:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a10a4:	9803      	ldr	r0, [sp, #12]
 80a10a6:	9b04      	ldr	r3, [sp, #16]
 80a10a8:	4218      	tst	r0, r3
 80a10aa:	f47f af73 	bne.w	80a0f94 <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a10ae:	4600      	mov	r0, r0
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a10d6:	79e3      	ldrb	r3, [r4, #7]
 80a10d8:	6810      	ldr	r0, [r2, #0]
 80a10da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10de:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a10e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e6:	88b0      	ldrh	r0, [r6, #4]
 80a10e8:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a10ea:	4600      	mov	r0, r0
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	e770      	b.n	80a1078 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1196:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a119a:	b29b      	uxth	r3, r3
 80a119c:	2b00      	cmp	r3, #0
 80a119e:	f47f aed2 	bne.w	80a0f46 <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a11a2:	b662      	cpsie	i
 80a11a4:	f000 fe6e 	bl	80a1e84 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a11a8:	6120      	str	r0, [r4, #16]
}
 80a11aa:	b007      	add	sp, #28
 80a11ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11ae:	2b00      	cmp	r3, #0
 80a11b0:	d0f7      	beq.n	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a11b2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a11b6:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a11ba:	4b54      	ldr	r3, [pc, #336]	; (80a130c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a11bc:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a11be:	4b54      	ldr	r3, [pc, #336]	; (80a1310 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a11c0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a11c6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a11c8:	3a03      	subs	r2, #3
 80a11ca:	b292      	uxth	r2, r2
 80a11cc:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a11d0:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a11d4:	b2d2      	uxtb	r2, r2
 80a11d6:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a11da:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a11de:	b2d2      	uxtb	r2, r2
 80a11e0:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a11e4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a11e8:	b2d2      	uxtb	r2, r2
 80a11ea:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11ee:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a11f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a11f6:	0212      	lsls	r2, r2, #8
 80a11f8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a11fc:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a1200:	4332      	orrs	r2, r6
 80a1202:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1204:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a1208:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a120a:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a120c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1210:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1214:	88b6      	ldrh	r6, [r6, #4]
 80a1216:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a121a:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a121c:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a121e:	9e03      	ldr	r6, [sp, #12]
 80a1220:	9a04      	ldr	r2, [sp, #16]
 80a1222:	4216      	tst	r6, r2
 80a1224:	d025      	beq.n	80a1272 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1226:	685a      	ldr	r2, [r3, #4]
 80a1228:	9e05      	ldr	r6, [sp, #20]
 80a122a:	1b92      	subs	r2, r2, r6
 80a122c:	2a4f      	cmp	r2, #79	; 0x4f
 80a122e:	d9fa      	bls.n	80a1226 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1230:	79e2      	ldrb	r2, [r4, #7]
 80a1232:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1236:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a123a:	88b6      	ldrh	r6, [r6, #4]
 80a123c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1240:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1242:	685a      	ldr	r2, [r3, #4]
 80a1244:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1246:	685a      	ldr	r2, [r3, #4]
 80a1248:	9e05      	ldr	r6, [sp, #20]
 80a124a:	1b92      	subs	r2, r2, r6
 80a124c:	2a07      	cmp	r2, #7
 80a124e:	d9fa      	bls.n	80a1246 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a1250:	9a04      	ldr	r2, [sp, #16]
 80a1252:	0852      	lsrs	r2, r2, #1
 80a1254:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1256:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a125a:	3201      	adds	r2, #1
 80a125c:	b2d2      	uxtb	r2, r2
 80a125e:	2a17      	cmp	r2, #23
 80a1260:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1264:	d9d0      	bls.n	80a1208 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1266:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a126a:	b292      	uxth	r2, r2
 80a126c:	2a00      	cmp	r2, #0
 80a126e:	d1a7      	bne.n	80a11c0 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a1270:	e797      	b.n	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1272:	685a      	ldr	r2, [r3, #4]
 80a1274:	9e05      	ldr	r6, [sp, #20]
 80a1276:	1b92      	subs	r2, r2, r6
 80a1278:	2a18      	cmp	r2, #24
 80a127a:	d9fa      	bls.n	80a1272 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a127c:	79e2      	ldrb	r2, [r4, #7]
 80a127e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1282:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1286:	88b6      	ldrh	r6, [r6, #4]
 80a1288:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a128c:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a128e:	685a      	ldr	r2, [r3, #4]
 80a1290:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1292:	685a      	ldr	r2, [r3, #4]
 80a1294:	9e05      	ldr	r6, [sp, #20]
 80a1296:	1b92      	subs	r2, r2, r6
 80a1298:	2a45      	cmp	r2, #69	; 0x45
 80a129a:	d9fa      	bls.n	80a1292 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a129c:	e7d8      	b.n	80a1250 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a129e:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a12a0:	2b00      	cmp	r3, #0
 80a12a2:	f43f af7e 	beq.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a12a6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a12aa:	2600      	movs	r6, #0
 80a12ac:	4a17      	ldr	r2, [pc, #92]	; (80a130c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a12ae:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a12b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a12b4:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a12b6:	3b04      	subs	r3, #4
 80a12b8:	b29b      	uxth	r3, r3
 80a12ba:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a12be:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a12c2:	b2db      	uxtb	r3, r3
 80a12c4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a12c8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a12cc:	b2db      	uxtb	r3, r3
 80a12ce:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a12d2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a12d6:	b2db      	uxtb	r3, r3
 80a12d8:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a12dc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a12e0:	b2db      	uxtb	r3, r3
 80a12e2:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a12e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a12ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a12ee:	041b      	lsls	r3, r3, #16
 80a12f0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a12f4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a12f8:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a12fc:	433b      	orrs	r3, r7
 80a12fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a1302:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1304:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1308:	e07f      	b.n	80a140a <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a130a:	bf00      	nop
 80a130c:	20000110 	.word	0x20000110
 80a1310:	e0001000 	.word	0xe0001000
          asm volatile(
 80a1314:	4600      	mov	r0, r0
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1382:	79e3      	ldrb	r3, [r4, #7]
 80a1384:	6810      	ldr	r0, [r2, #0]
 80a1386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a138a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a138e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1392:	88b8      	ldrh	r0, [r7, #4]
 80a1394:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1396:	4600      	mov	r0, r0
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
        mask >>= 1;
 80a13f4:	9b04      	ldr	r3, [sp, #16]
 80a13f6:	085b      	lsrs	r3, r3, #1
 80a13f8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a13fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a13fe:	3301      	adds	r3, #1
 80a1400:	b2db      	uxtb	r3, r3
 80a1402:	2b1f      	cmp	r3, #31
 80a1404:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1408:	d87e      	bhi.n	80a1508 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a140a:	79e3      	ldrb	r3, [r4, #7]
 80a140c:	6810      	ldr	r0, [r2, #0]
 80a140e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1412:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1416:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a141a:	88b8      	ldrh	r0, [r7, #4]
 80a141c:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a141e:	9803      	ldr	r0, [sp, #12]
 80a1420:	9b04      	ldr	r3, [sp, #16]
 80a1422:	4218      	tst	r0, r3
 80a1424:	f47f af76 	bne.w	80a1314 <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a1428:	4600      	mov	r0, r0
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1450:	79e3      	ldrb	r3, [r4, #7]
 80a1452:	6810      	ldr	r0, [r2, #0]
 80a1454:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1458:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a145c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1460:	88b8      	ldrh	r0, [r7, #4]
 80a1462:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1464:	4600      	mov	r0, r0
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	e775      	b.n	80a13f4 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1508:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a150c:	b29b      	uxth	r3, r3
 80a150e:	2b00      	cmp	r3, #0
 80a1510:	f47f aecd 	bne.w	80a12ae <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a1514:	e645      	b.n	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1516:	2d03      	cmp	r5, #3
 80a1518:	f000 8128 	beq.w	80a176c <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a151c:	2b00      	cmp	r3, #0
 80a151e:	f43f ae40 	beq.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1522:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1526:	2600      	movs	r6, #0
 80a1528:	4a16      	ldr	r2, [pc, #88]	; (80a1584 <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a152a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a152c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1530:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a1532:	3b03      	subs	r3, #3
 80a1534:	b29b      	uxth	r3, r3
 80a1536:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a153a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a153c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a153e:	b2db      	uxtb	r3, r3
 80a1540:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1544:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a1546:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a154a:	b2db      	uxtb	r3, r3
 80a154c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1550:	788b      	ldrb	r3, [r1, #2]
 80a1552:	3103      	adds	r1, #3
 80a1554:	b2db      	uxtb	r3, r3
 80a1556:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a155a:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a155e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a1562:	021b      	lsls	r3, r3, #8
 80a1564:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a1568:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a156c:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a1570:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1574:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a1576:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a157a:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a157e:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a1582:	e07a      	b.n	80a167a <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a1584:	20000110 	.word	0x20000110
          mask >>= 1; // Do this task during the long delay of this bit
 80a1588:	9b04      	ldr	r3, [sp, #16]
 80a158a:	085b      	lsrs	r3, r3, #1
 80a158c:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a158e:	4600      	mov	r0, r0
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1614:	79e0      	ldrb	r0, [r4, #7]
 80a1616:	6817      	ldr	r7, [r2, #0]
          j++;
 80a1618:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a161c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1620:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a1624:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a1626:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a162a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a162e:	b2db      	uxtb	r3, r3
 80a1630:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1634:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a1636:	4600      	mov	r0, r0
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
          if(j==24) break;
 80a1660:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1664:	2b18      	cmp	r3, #24
 80a1666:	d07a      	beq.n	80a175e <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a1668:	79e3      	ldrb	r3, [r4, #7]
 80a166a:	6810      	ldr	r0, [r2, #0]
 80a166c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1670:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1674:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1678:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a167a:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a167c:	9803      	ldr	r0, [sp, #12]
 80a167e:	9b04      	ldr	r3, [sp, #16]
 80a1680:	4218      	tst	r0, r3
 80a1682:	d181      	bne.n	80a1588 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a1684:	4600      	mov	r0, r0
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a16a6:	79e3      	ldrb	r3, [r4, #7]
 80a16a8:	6810      	ldr	r0, [r2, #0]
 80a16aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a16ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a16b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a16b6:	88b8      	ldrh	r0, [r7, #4]
 80a16b8:	8318      	strh	r0, [r3, #24]
          j++;
 80a16ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a16be:	3301      	adds	r3, #1
 80a16c0:	b2db      	uxtb	r3, r3
 80a16c2:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a16c6:	9b04      	ldr	r3, [sp, #16]
 80a16c8:	085b      	lsrs	r3, r3, #1
 80a16ca:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a16cc:	4600      	mov	r0, r0
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	bf00      	nop
 80a1720:	bf00      	nop
 80a1722:	bf00      	nop
 80a1724:	bf00      	nop
 80a1726:	bf00      	nop
 80a1728:	bf00      	nop
 80a172a:	bf00      	nop
 80a172c:	bf00      	nop
 80a172e:	bf00      	nop
 80a1730:	bf00      	nop
 80a1732:	bf00      	nop
 80a1734:	bf00      	nop
 80a1736:	bf00      	nop
 80a1738:	bf00      	nop
 80a173a:	bf00      	nop
 80a173c:	bf00      	nop
 80a173e:	bf00      	nop
 80a1740:	bf00      	nop
 80a1742:	bf00      	nop
 80a1744:	bf00      	nop
 80a1746:	bf00      	nop
 80a1748:	bf00      	nop
 80a174a:	bf00      	nop
 80a174c:	bf00      	nop
 80a174e:	bf00      	nop
 80a1750:	bf00      	nop
 80a1752:	bf00      	nop
 80a1754:	bf00      	nop
          if(j==24) break;
 80a1756:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a175a:	2b18      	cmp	r3, #24
 80a175c:	d184      	bne.n	80a1668 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a175e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1762:	b29b      	uxth	r3, r3
 80a1764:	2b00      	cmp	r3, #0
 80a1766:	f47f aee0 	bne.w	80a152a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a176a:	e51a      	b.n	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a176c:	2b00      	cmp	r3, #0
 80a176e:	f43f ad18 	beq.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1772:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1776:	2600      	movs	r6, #0
 80a1778:	4a12      	ldr	r2, [pc, #72]	; (80a17c4 <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a177a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a177c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a1780:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1782:	3b03      	subs	r3, #3
 80a1784:	b29b      	uxth	r3, r3
 80a1786:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a178a:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a178e:	b2db      	uxtb	r3, r3
 80a1790:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1794:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1798:	b2db      	uxtb	r3, r3
 80a179a:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a179e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a17a2:	b2db      	uxtb	r3, r3
 80a17a4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a17a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a17ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a17b0:	021b      	lsls	r3, r3, #8
 80a17b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a17b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a17ba:	4303      	orrs	r3, r0
 80a17bc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a17be:	f88d 6005 	strb.w	r6, [sp, #5]
 80a17c2:	e0e0      	b.n	80a1986 <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a17c4:	20000110 	.word	0x20000110
          asm volatile(
 80a17c8:	4600      	mov	r0, r0
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
 80a1886:	bf00      	nop
 80a1888:	bf00      	nop
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a18ea:	79e3      	ldrb	r3, [r4, #7]
 80a18ec:	6810      	ldr	r0, [r2, #0]
 80a18ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18f2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18fa:	88b8      	ldrh	r0, [r7, #4]
 80a18fc:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a18fe:	4600      	mov	r0, r0
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
        mask >>= 1;
 80a196e:	9b04      	ldr	r3, [sp, #16]
 80a1970:	085b      	lsrs	r3, r3, #1
 80a1972:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1974:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1978:	3301      	adds	r3, #1
 80a197a:	b2db      	uxtb	r3, r3
 80a197c:	2b17      	cmp	r3, #23
 80a197e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1982:	f200 80eb 	bhi.w	80a1b5c <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a1986:	79e3      	ldrb	r3, [r4, #7]
 80a1988:	6810      	ldr	r0, [r2, #0]
 80a198a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a198e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1996:	88b8      	ldrh	r0, [r7, #4]
 80a1998:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a199a:	9803      	ldr	r0, [sp, #12]
 80a199c:	9b04      	ldr	r3, [sp, #16]
 80a199e:	4218      	tst	r0, r3
 80a19a0:	f47f af12 	bne.w	80a17c8 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a19a4:	4600      	mov	r0, r0
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1a26:	79e3      	ldrb	r3, [r4, #7]
 80a1a28:	6810      	ldr	r0, [r2, #0]
 80a1a2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1a2e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1a32:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1a36:	88b8      	ldrh	r0, [r7, #4]
 80a1a38:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1a3a:	4600      	mov	r0, r0
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
 80a1b14:	bf00      	nop
 80a1b16:	bf00      	nop
 80a1b18:	bf00      	nop
 80a1b1a:	bf00      	nop
 80a1b1c:	bf00      	nop
 80a1b1e:	bf00      	nop
 80a1b20:	bf00      	nop
 80a1b22:	bf00      	nop
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	e710      	b.n	80a196e <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1b4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1b50:	b29b      	uxth	r3, r3
 80a1b52:	2b00      	cmp	r3, #0
 80a1b54:	f47e af96 	bne.w	80a0a84 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1b58:	f7ff bb23 	b.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1b5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1b60:	b29b      	uxth	r3, r3
 80a1b62:	2b00      	cmp	r3, #0
 80a1b64:	f47f ae09 	bne.w	80a177a <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a1b68:	f7ff bb1b 	b.w	80a11a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1b6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1b6c:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1b70:	428b      	cmp	r3, r1
 80a1b72:	d92d      	bls.n	80a1bd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1b74:	7a06      	ldrb	r6, [r0, #8]
 80a1b76:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1b7a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1b7e:	b2d5      	uxtb	r5, r2
 80a1b80:	b13e      	cbz	r6, 80a1b92 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a1b82:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a1b84:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a1b86:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a1b88:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1b8c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1b90:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1b92:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1b96:	68c7      	ldr	r7, [r0, #12]
 80a1b98:	f1bc 0f06 	cmp.w	ip, #6
 80a1b9c:	bf0c      	ite	eq
 80a1b9e:	2604      	moveq	r6, #4
 80a1ba0:	2603      	movne	r6, #3
 80a1ba2:	434e      	muls	r6, r1
 80a1ba4:	f1ac 0c02 	sub.w	ip, ip, #2
 80a1ba8:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a1baa:	f1bc 0f06 	cmp.w	ip, #6
 80a1bae:	d81d      	bhi.n	80a1bec <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a1bb0:	e8df f00c 	tbb	[pc, ip]
 80a1bb4:	04081c04 	.word	0x04081c04
 80a1bb8:	040f      	.short	0x040f
 80a1bba:	04          	.byte	0x04
 80a1bbb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1bbc:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a1bbe:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a1bc0:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a1bc2:	e005      	b.n	80a1bd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a1bc4:	2bfe      	cmp	r3, #254	; 0xfe
 80a1bc6:	bf28      	it	cs
 80a1bc8:	23fe      	movcs	r3, #254	; 0xfe
 80a1bca:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a1bcc:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a1bce:	708c      	strb	r4, [r1, #2]
}
 80a1bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a1bd2:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1bd4:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a1bd6:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1bd8:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a1bda:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1bdc:	b913      	cbnz	r3, 80a1be4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a1bde:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1be0:	70ca      	strb	r2, [r1, #3]
        } break;
 80a1be2:	e7f5      	b.n	80a1bd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1be4:	435a      	muls	r2, r3
 80a1be6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1bea:	e7f9      	b.n	80a1be0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a1bec:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a1bee:	704c      	strb	r4, [r1, #1]
 80a1bf0:	e7e6      	b.n	80a1bc0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a1bf2 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1bf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1bf6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1bfa:	4770      	bx	lr

080a1bfc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1bfc:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1bfe:	f000 f8f9 	bl	80a1df4 <HAL_Pin_Map>
 80a1c02:	4b01      	ldr	r3, [pc, #4]	; (80a1c08 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a1c04:	6018      	str	r0, [r3, #0]
}
 80a1c06:	bd08      	pop	{r3, pc}
 80a1c08:	20000110 	.word	0x20000110

080a1c0c <_ZN7rgb_lcdD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class rgb_lcd : public Print 
 80a1c0c:	4770      	bx	lr

080a1c0e <_ZN7rgb_lcdD0Ev>:
 80a1c0e:	b510      	push	{r4, lr}
 80a1c10:	4604      	mov	r4, r0
 80a1c12:	2110      	movs	r1, #16
 80a1c14:	f7fe fa43 	bl	80a009e <_ZdlPvj>
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	bd10      	pop	{r4, pc}

080a1c1c <_Z14i2c_send_byteSPhh>:
    Wire.write(dta);                            // sends five bytes
    Wire.endTransmission();                     // stop transmitting
}

void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80a1c1c:	b570      	push	{r4, r5, r6, lr}
 80a1c1e:	460e      	mov	r6, r1
 80a1c20:	4605      	mov	r5, r0
    Wire.beginTransmission(LCD_ADDRESS);        // transmit to device #4
 80a1c22:	f001 f8c1 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1c26:	213e      	movs	r1, #62	; 0x3e
 80a1c28:	f000 fee2 	bl	80a29f0 <_ZN7TwoWire17beginTransmissionEi>
    for(int i=0; i<len; i++)
 80a1c2c:	2400      	movs	r4, #0
 80a1c2e:	42a6      	cmp	r6, r4
 80a1c30:	dd07      	ble.n	80a1c42 <_Z14i2c_send_byteSPhh+0x26>
    {
        Wire.write(dta[i]);
 80a1c32:	f001 f8b9 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1c36:	6803      	ldr	r3, [r0, #0]
 80a1c38:	5d29      	ldrb	r1, [r5, r4]
 80a1c3a:	689b      	ldr	r3, [r3, #8]
 80a1c3c:	4798      	blx	r3
    for(int i=0; i<len; i++)
 80a1c3e:	3401      	adds	r4, #1
 80a1c40:	e7f5      	b.n	80a1c2e <_Z14i2c_send_byteSPhh+0x12>
    }
    Wire.endTransmission();                     // stop transmitting
 80a1c42:	f001 f8b1 	bl	80a2da8 <_Z19__fetch_global_Wirev>
}
 80a1c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();                     // stop transmitting
 80a1c4a:	f000 bed8 	b.w	80a29fe <_ZN7TwoWire15endTransmissionEv>

080a1c4e <_ZN7rgb_lcd5writeEh>:

// send data
inline size_t rgb_lcd::write(uint8_t value)
{

    unsigned char dta[2] = {0x40, value};
 80a1c4e:	2340      	movs	r3, #64	; 0x40
{
 80a1c50:	b507      	push	{r0, r1, r2, lr}
    unsigned char dta[2] = {0x40, value};
 80a1c52:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1c56:	a801      	add	r0, sp, #4
 80a1c58:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x40, value};
 80a1c5a:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1c5e:	f7ff ffdd 	bl	80a1c1c <_Z14i2c_send_byteSPhh>
    return 1; // assume sucess
}
 80a1c62:	2001      	movs	r0, #1
 80a1c64:	b003      	add	sp, #12
 80a1c66:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>:
    unsigned char dta[2] = {0x80, value};
 80a1c6a:	2380      	movs	r3, #128	; 0x80
inline void rgb_lcd::command(uint8_t value)
 80a1c6c:	b507      	push	{r0, r1, r2, lr}
    i2c_send_byteS(dta, 2);
 80a1c6e:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, value};
 80a1c70:	f88d 0005 	strb.w	r0, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1c74:	a801      	add	r0, sp, #4
    unsigned char dta[2] = {0x80, value};
 80a1c76:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1c7a:	f7ff ffcf 	bl	80a1c1c <_Z14i2c_send_byteSPhh>
}
 80a1c7e:	b003      	add	sp, #12
 80a1c80:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c84 <_ZN7rgb_lcdC1Ev>:
    Print() : write_error(0) {}
 80a1c84:	2200      	movs	r2, #0
 80a1c86:	6042      	str	r2, [r0, #4]
rgb_lcd::rgb_lcd()
 80a1c88:	4a01      	ldr	r2, [pc, #4]	; (80a1c90 <_ZN7rgb_lcdC1Ev+0xc>)
 80a1c8a:	6002      	str	r2, [r0, #0]
}
 80a1c8c:	4770      	bx	lr
 80a1c8e:	bf00      	nop
 80a1c90:	080a4f5c 	.word	0x080a4f5c

080a1c94 <_ZN7rgb_lcd5clearEv>:
{
 80a1c94:	b508      	push	{r3, lr}
    command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80a1c96:	2001      	movs	r0, #1
 80a1c98:	f7ff ffe7 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
}
 80a1c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1ca0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a1ca4:	f000 b8e6 	b.w	80a1e74 <HAL_Delay_Microseconds>

080a1ca8 <_ZN7rgb_lcd9setCursorEhh>:
{
 80a1ca8:	b507      	push	{r0, r1, r2, lr}
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1caa:	b96a      	cbnz	r2, 80a1cc8 <_ZN7rgb_lcd9setCursorEhh+0x20>
 80a1cac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    unsigned char dta[2] = {0x80, col};
 80a1cb0:	2380      	movs	r3, #128	; 0x80
 80a1cb2:	f88d 1005 	strb.w	r1, [sp, #5]
    i2c_send_byteS(dta, 2);
 80a1cb6:	a801      	add	r0, sp, #4
 80a1cb8:	2102      	movs	r1, #2
    unsigned char dta[2] = {0x80, col};
 80a1cba:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_send_byteS(dta, 2);
 80a1cbe:	f7ff ffad 	bl	80a1c1c <_Z14i2c_send_byteSPhh>
}
 80a1cc2:	b003      	add	sp, #12
 80a1cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    col = (row == 0 ? col|0x80 : col|0xc0);
 80a1cc8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80a1ccc:	e7f0      	b.n	80a1cb0 <_ZN7rgb_lcd9setCursorEhh+0x8>

080a1cce <_ZN7rgb_lcd7displayEv>:
    _displaycontrol |= LCD_DISPLAYON;
 80a1cce:	7a43      	ldrb	r3, [r0, #9]
 80a1cd0:	f043 0204 	orr.w	r2, r3, #4
 80a1cd4:	7242      	strb	r2, [r0, #9]
    command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a1cd6:	f043 000c 	orr.w	r0, r3, #12
 80a1cda:	f7ff bfc6 	b.w	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>

080a1cde <_ZN7rgb_lcd6setRegEhh>:

void rgb_lcd::setReg(unsigned char addr, unsigned char dta)
{
 80a1cde:	b538      	push	{r3, r4, r5, lr}
 80a1ce0:	4614      	mov	r4, r2
 80a1ce2:	460d      	mov	r5, r1
    Wire.beginTransmission(RGB_ADDRESS); // transmit to device #4
 80a1ce4:	f001 f860 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1ce8:	2162      	movs	r1, #98	; 0x62
 80a1cea:	f000 fe81 	bl	80a29f0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(addr);
 80a1cee:	f001 f85b 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1cf2:	6803      	ldr	r3, [r0, #0]
 80a1cf4:	4629      	mov	r1, r5
 80a1cf6:	689b      	ldr	r3, [r3, #8]
 80a1cf8:	4798      	blx	r3
    Wire.write(dta);
 80a1cfa:	f001 f855 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1cfe:	6803      	ldr	r3, [r0, #0]
 80a1d00:	4621      	mov	r1, r4
 80a1d02:	689b      	ldr	r3, [r3, #8]
 80a1d04:	4798      	blx	r3
    Wire.endTransmission();    // stop transmitting
 80a1d06:	f001 f84f 	bl	80a2da8 <_Z19__fetch_global_Wirev>
}
 80a1d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();    // stop transmitting
 80a1d0e:	f000 be76 	b.w	80a29fe <_ZN7TwoWire15endTransmissionEv>

080a1d12 <_ZN7rgb_lcd6setRGBEhhh>:

void rgb_lcd::setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80a1d12:	b570      	push	{r4, r5, r6, lr}
 80a1d14:	4604      	mov	r4, r0
 80a1d16:	4616      	mov	r6, r2
 80a1d18:	461d      	mov	r5, r3
    setReg(REG_RED, r);
 80a1d1a:	460a      	mov	r2, r1
 80a1d1c:	2104      	movs	r1, #4
 80a1d1e:	f7ff ffde 	bl	80a1cde <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_GREEN, g);
 80a1d22:	4632      	mov	r2, r6
 80a1d24:	4620      	mov	r0, r4
 80a1d26:	2103      	movs	r1, #3
 80a1d28:	f7ff ffd9 	bl	80a1cde <_ZN7rgb_lcd6setRegEhh>
    setReg(REG_BLUE, b);
 80a1d2c:	462a      	mov	r2, r5
 80a1d2e:	4620      	mov	r0, r4
}
 80a1d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setReg(REG_BLUE, b);
 80a1d34:	2102      	movs	r1, #2
 80a1d36:	f7ff bfd2 	b.w	80a1cde <_ZN7rgb_lcd6setRegEhh>

080a1d3a <_ZN7rgb_lcd5beginEhhh>:
{
 80a1d3a:	b570      	push	{r4, r5, r6, lr}
 80a1d3c:	4615      	mov	r5, r2
 80a1d3e:	4604      	mov	r4, r0
 80a1d40:	461e      	mov	r6, r3
    Wire.begin();
 80a1d42:	f001 f831 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a1d46:	f000 fe49 	bl	80a29dc <_ZN7TwoWire5beginEv>
    if (lines > 1) {
 80a1d4a:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_2LINE;
 80a1d4c:	bf88      	it	hi
 80a1d4e:	7a23      	ldrbhi	r3, [r4, #8]
    _numlines = lines;
 80a1d50:	7325      	strb	r5, [r4, #12]
        _displayfunction |= LCD_2LINE;
 80a1d52:	bf84      	itt	hi
 80a1d54:	f043 0308 	orrhi.w	r3, r3, #8
 80a1d58:	7223      	strbhi	r3, [r4, #8]
    _currline = 0;
 80a1d5a:	2300      	movs	r3, #0
 80a1d5c:	7363      	strb	r3, [r4, #13]
    if ((dotsize != 0) && (lines == 1)) {
 80a1d5e:	b12e      	cbz	r6, 80a1d6c <_ZN7rgb_lcd5beginEhhh+0x32>
 80a1d60:	2d01      	cmp	r5, #1
        _displayfunction |= LCD_5x10DOTS;
 80a1d62:	bf02      	ittt	eq
 80a1d64:	7a23      	ldrbeq	r3, [r4, #8]
 80a1d66:	f043 0304 	orreq.w	r3, r3, #4
 80a1d6a:	7223      	strbeq	r3, [r4, #8]
 80a1d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80a1d70:	f000 f880 	bl	80a1e74 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1d74:	7a20      	ldrb	r0, [r4, #8]
 80a1d76:	f040 0020 	orr.w	r0, r0, #32
 80a1d7a:	f7ff ff76 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1d7e:	f241 1094 	movw	r0, #4500	; 0x1194
 80a1d82:	f000 f877 	bl	80a1e74 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1d86:	7a20      	ldrb	r0, [r4, #8]
 80a1d88:	f040 0020 	orr.w	r0, r0, #32
 80a1d8c:	f7ff ff6d 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
 80a1d90:	2096      	movs	r0, #150	; 0x96
 80a1d92:	f000 f86f 	bl	80a1e74 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1d96:	7a20      	ldrb	r0, [r4, #8]
 80a1d98:	f040 0020 	orr.w	r0, r0, #32
 80a1d9c:	f7ff ff65 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
    command(LCD_FUNCTIONSET | _displayfunction);
 80a1da0:	7a20      	ldrb	r0, [r4, #8]
 80a1da2:	f040 0020 	orr.w	r0, r0, #32
 80a1da6:	f7ff ff60 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1daa:	2304      	movs	r3, #4
    display();
 80a1dac:	4620      	mov	r0, r4
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a1dae:	7263      	strb	r3, [r4, #9]
    display();
 80a1db0:	f7ff ff8d 	bl	80a1cce <_ZN7rgb_lcd7displayEv>
    clear();
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	f7ff ff6d 	bl	80a1c94 <_ZN7rgb_lcd5clearEv>
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1dba:	2302      	movs	r3, #2
    command(LCD_ENTRYMODESET | _displaymode);
 80a1dbc:	2006      	movs	r0, #6
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a1dbe:	72a3      	strb	r3, [r4, #10]
    command(LCD_ENTRYMODESET | _displaymode);
 80a1dc0:	f7ff ff53 	bl	80a1c6a <_ZN7rgb_lcd7commandEh.constprop.0>
    setReg(0, 0);
 80a1dc4:	2200      	movs	r2, #0
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	4611      	mov	r1, r2
 80a1dca:	f7ff ff88 	bl	80a1cde <_ZN7rgb_lcd6setRegEhh>
    setReg(1, 0);
 80a1dce:	4620      	mov	r0, r4
 80a1dd0:	2200      	movs	r2, #0
 80a1dd2:	2101      	movs	r1, #1
 80a1dd4:	f7ff ff83 	bl	80a1cde <_ZN7rgb_lcd6setRegEhh>
    setReg(0x08, 0xAA);     // all led control by pwm
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	22aa      	movs	r2, #170	; 0xaa
 80a1ddc:	2108      	movs	r1, #8
 80a1dde:	f7ff ff7e 	bl	80a1cde <_ZN7rgb_lcd6setRegEhh>
  void setRGB(unsigned char r, unsigned char g, unsigned char b);               // set rgb
  void setPWM(unsigned char color, unsigned char pwm){setReg(color, pwm);}      // set pwm
  
  void setColor(unsigned char color);
  void setColorAll(){setRGB(0, 0, 0);}
  void setColorWhite(){setRGB(255, 255, 255);}
 80a1de2:	23ff      	movs	r3, #255	; 0xff
 80a1de4:	4620      	mov	r0, r4
}
 80a1de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1dea:	461a      	mov	r2, r3
 80a1dec:	4619      	mov	r1, r3
 80a1dee:	f7ff bf90 	b.w	80a1d12 <_ZN7rgb_lcd6setRGBEhhh>
	...

080a1df4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1df4:	b508      	push	{r3, lr}
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <HAL_Pin_Map+0xc>)
 80a1df8:	681b      	ldr	r3, [r3, #0]
 80a1dfa:	681b      	ldr	r3, [r3, #0]
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	bd08      	pop	{r3, pc}
 80a1e00:	080601b0 	.word	0x080601b0

080a1e04 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <HAL_Validate_Pin_Function+0xc>)
 80a1e08:	681b      	ldr	r3, [r3, #0]
 80a1e0a:	685b      	ldr	r3, [r3, #4]
 80a1e0c:	9301      	str	r3, [sp, #4]
 80a1e0e:	bd08      	pop	{r3, pc}
 80a1e10:	080601b0 	.word	0x080601b0

080a1e14 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1e14:	b508      	push	{r3, lr}
 80a1e16:	4b02      	ldr	r3, [pc, #8]	; (80a1e20 <HAL_Pin_Mode+0xc>)
 80a1e18:	681b      	ldr	r3, [r3, #0]
 80a1e1a:	689b      	ldr	r3, [r3, #8]
 80a1e1c:	9301      	str	r3, [sp, #4]
 80a1e1e:	bd08      	pop	{r3, pc}
 80a1e20:	080601b0 	.word	0x080601b0

080a1e24 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1e24:	b508      	push	{r3, lr}
 80a1e26:	4b02      	ldr	r3, [pc, #8]	; (80a1e30 <HAL_Get_Pin_Mode+0xc>)
 80a1e28:	681b      	ldr	r3, [r3, #0]
 80a1e2a:	68db      	ldr	r3, [r3, #12]
 80a1e2c:	9301      	str	r3, [sp, #4]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	080601b0 	.word	0x080601b0

080a1e34 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1e34:	b508      	push	{r3, lr}
 80a1e36:	4b02      	ldr	r3, [pc, #8]	; (80a1e40 <HAL_GPIO_Write+0xc>)
 80a1e38:	681b      	ldr	r3, [r3, #0]
 80a1e3a:	691b      	ldr	r3, [r3, #16]
 80a1e3c:	9301      	str	r3, [sp, #4]
 80a1e3e:	bd08      	pop	{r3, pc}
 80a1e40:	080601b0 	.word	0x080601b0

080a1e44 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1e44:	b508      	push	{r3, lr}
 80a1e46:	4b02      	ldr	r3, [pc, #8]	; (80a1e50 <HAL_GPIO_Read+0xc>)
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	695b      	ldr	r3, [r3, #20]
 80a1e4c:	9301      	str	r3, [sp, #4]
 80a1e4e:	bd08      	pop	{r3, pc}
 80a1e50:	080601b0 	.word	0x080601b0

080a1e54 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a1e54:	b508      	push	{r3, lr}
 80a1e56:	4b02      	ldr	r3, [pc, #8]	; (80a1e60 <hal_adc_read+0xc>)
 80a1e58:	681b      	ldr	r3, [r3, #0]
 80a1e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1e5c:	9301      	str	r3, [sp, #4]
 80a1e5e:	bd08      	pop	{r3, pc}
 80a1e60:	080601b0 	.word	0x080601b0

080a1e64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1e64:	b508      	push	{r3, lr}
 80a1e66:	4b02      	ldr	r3, [pc, #8]	; (80a1e70 <HAL_RNG_GetRandomNumber+0xc>)
 80a1e68:	681b      	ldr	r3, [r3, #0]
 80a1e6a:	685b      	ldr	r3, [r3, #4]
 80a1e6c:	9301      	str	r3, [sp, #4]
 80a1e6e:	bd08      	pop	{r3, pc}
 80a1e70:	0806019c 	.word	0x0806019c

080a1e74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1e74:	b508      	push	{r3, lr}
 80a1e76:	4b02      	ldr	r3, [pc, #8]	; (80a1e80 <HAL_Delay_Microseconds+0xc>)
 80a1e78:	681b      	ldr	r3, [r3, #0]
 80a1e7a:	68db      	ldr	r3, [r3, #12]
 80a1e7c:	9301      	str	r3, [sp, #4]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	0806019c 	.word	0x0806019c

080a1e84 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1e84:	b508      	push	{r3, lr}
 80a1e86:	4b02      	ldr	r3, [pc, #8]	; (80a1e90 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1e88:	681b      	ldr	r3, [r3, #0]
 80a1e8a:	691b      	ldr	r3, [r3, #16]
 80a1e8c:	9301      	str	r3, [sp, #4]
 80a1e8e:	bd08      	pop	{r3, pc}
 80a1e90:	0806019c 	.word	0x0806019c

080a1e94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1e94:	b508      	push	{r3, lr}
 80a1e96:	4b02      	ldr	r3, [pc, #8]	; (80a1ea0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1e98:	681b      	ldr	r3, [r3, #0]
 80a1e9a:	695b      	ldr	r3, [r3, #20]
 80a1e9c:	9301      	str	r3, [sp, #4]
 80a1e9e:	bd08      	pop	{r3, pc}
 80a1ea0:	0806019c 	.word	0x0806019c

080a1ea4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1ea4:	b508      	push	{r3, lr}
 80a1ea6:	4b02      	ldr	r3, [pc, #8]	; (80a1eb0 <os_mutex_recursive_create+0xc>)
 80a1ea8:	681b      	ldr	r3, [r3, #0]
 80a1eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1eac:	9301      	str	r3, [sp, #4]
 80a1eae:	bd08      	pop	{r3, pc}
 80a1eb0:	080601d0 	.word	0x080601d0

080a1eb4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1eb4:	b508      	push	{r3, lr}
 80a1eb6:	4b02      	ldr	r3, [pc, #8]	; (80a1ec0 <os_mutex_recursive_destroy+0xc>)
 80a1eb8:	681b      	ldr	r3, [r3, #0]
 80a1eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ebc:	9301      	str	r3, [sp, #4]
 80a1ebe:	bd08      	pop	{r3, pc}
 80a1ec0:	080601d0 	.word	0x080601d0

080a1ec4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1ec4:	b508      	push	{r3, lr}
 80a1ec6:	4b02      	ldr	r3, [pc, #8]	; (80a1ed0 <hal_usart_write+0xc>)
 80a1ec8:	681b      	ldr	r3, [r3, #0]
 80a1eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ecc:	9301      	str	r3, [sp, #4]
 80a1ece:	bd08      	pop	{r3, pc}
 80a1ed0:	080601c4 	.word	0x080601c4

080a1ed4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a1ed4:	b508      	push	{r3, lr}
 80a1ed6:	4b02      	ldr	r3, [pc, #8]	; (80a1ee0 <hal_usart_available+0xc>)
 80a1ed8:	681b      	ldr	r3, [r3, #0]
 80a1eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1edc:	9301      	str	r3, [sp, #4]
 80a1ede:	bd08      	pop	{r3, pc}
 80a1ee0:	080601c4 	.word	0x080601c4

080a1ee4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a1ee4:	b508      	push	{r3, lr}
 80a1ee6:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <hal_usart_read+0xc>)
 80a1ee8:	681b      	ldr	r3, [r3, #0]
 80a1eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1eec:	9301      	str	r3, [sp, #4]
 80a1eee:	bd08      	pop	{r3, pc}
 80a1ef0:	080601c4 	.word	0x080601c4

080a1ef4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a1ef4:	b508      	push	{r3, lr}
 80a1ef6:	4b02      	ldr	r3, [pc, #8]	; (80a1f00 <hal_usart_peek+0xc>)
 80a1ef8:	681b      	ldr	r3, [r3, #0]
 80a1efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1efc:	9301      	str	r3, [sp, #4]
 80a1efe:	bd08      	pop	{r3, pc}
 80a1f00:	080601c4 	.word	0x080601c4

080a1f04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <hal_usart_flush+0xc>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f0c:	9301      	str	r3, [sp, #4]
 80a1f0e:	bd08      	pop	{r3, pc}
 80a1f10:	080601c4 	.word	0x080601c4

080a1f14 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a1f14:	b508      	push	{r3, lr}
 80a1f16:	4b02      	ldr	r3, [pc, #8]	; (80a1f20 <hal_usart_is_enabled+0xc>)
 80a1f18:	681b      	ldr	r3, [r3, #0]
 80a1f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1f1c:	9301      	str	r3, [sp, #4]
 80a1f1e:	bd08      	pop	{r3, pc}
 80a1f20:	080601c4 	.word	0x080601c4

080a1f24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a1f24:	b508      	push	{r3, lr}
 80a1f26:	4b02      	ldr	r3, [pc, #8]	; (80a1f30 <hal_usart_available_data_for_write+0xc>)
 80a1f28:	681b      	ldr	r3, [r3, #0]
 80a1f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1f2c:	9301      	str	r3, [sp, #4]
 80a1f2e:	bd08      	pop	{r3, pc}
 80a1f30:	080601c4 	.word	0x080601c4

080a1f34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1f34:	b508      	push	{r3, lr}
 80a1f36:	4b02      	ldr	r3, [pc, #8]	; (80a1f40 <hal_usart_init_ex+0xc>)
 80a1f38:	681b      	ldr	r3, [r3, #0]
 80a1f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1f3c:	9301      	str	r3, [sp, #4]
 80a1f3e:	bd08      	pop	{r3, pc}
 80a1f40:	080601c4 	.word	0x080601c4

080a1f44 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a1f44:	b508      	push	{r3, lr}
 80a1f46:	4b02      	ldr	r3, [pc, #8]	; (80a1f50 <hal_i2c_begin+0xc>)
 80a1f48:	681b      	ldr	r3, [r3, #0]
 80a1f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1f4c:	9301      	str	r3, [sp, #4]
 80a1f4e:	bd08      	pop	{r3, pc}
 80a1f50:	080601ac 	.word	0x080601ac

080a1f54 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a1f54:	b508      	push	{r3, lr}
 80a1f56:	4b02      	ldr	r3, [pc, #8]	; (80a1f60 <hal_i2c_begin_transmission+0xc>)
 80a1f58:	681b      	ldr	r3, [r3, #0]
 80a1f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1f5c:	9301      	str	r3, [sp, #4]
 80a1f5e:	bd08      	pop	{r3, pc}
 80a1f60:	080601ac 	.word	0x080601ac

080a1f64 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a1f64:	b508      	push	{r3, lr}
 80a1f66:	4b02      	ldr	r3, [pc, #8]	; (80a1f70 <hal_i2c_end_transmission+0xc>)
 80a1f68:	681b      	ldr	r3, [r3, #0]
 80a1f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1f6c:	9301      	str	r3, [sp, #4]
 80a1f6e:	bd08      	pop	{r3, pc}
 80a1f70:	080601ac 	.word	0x080601ac

080a1f74 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1f74:	b508      	push	{r3, lr}
 80a1f76:	4b02      	ldr	r3, [pc, #8]	; (80a1f80 <hal_i2c_write+0xc>)
 80a1f78:	681b      	ldr	r3, [r3, #0]
 80a1f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1f7c:	9301      	str	r3, [sp, #4]
 80a1f7e:	bd08      	pop	{r3, pc}
 80a1f80:	080601ac 	.word	0x080601ac

080a1f84 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1f84:	b508      	push	{r3, lr}
 80a1f86:	4b02      	ldr	r3, [pc, #8]	; (80a1f90 <hal_i2c_available+0xc>)
 80a1f88:	681b      	ldr	r3, [r3, #0]
 80a1f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1f8c:	9301      	str	r3, [sp, #4]
 80a1f8e:	bd08      	pop	{r3, pc}
 80a1f90:	080601ac 	.word	0x080601ac

080a1f94 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1f94:	b508      	push	{r3, lr}
 80a1f96:	4b02      	ldr	r3, [pc, #8]	; (80a1fa0 <hal_i2c_read+0xc>)
 80a1f98:	681b      	ldr	r3, [r3, #0]
 80a1f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1f9c:	9301      	str	r3, [sp, #4]
 80a1f9e:	bd08      	pop	{r3, pc}
 80a1fa0:	080601ac 	.word	0x080601ac

080a1fa4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1fa4:	b508      	push	{r3, lr}
 80a1fa6:	4b02      	ldr	r3, [pc, #8]	; (80a1fb0 <hal_i2c_peek+0xc>)
 80a1fa8:	681b      	ldr	r3, [r3, #0]
 80a1faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1fac:	9301      	str	r3, [sp, #4]
 80a1fae:	bd08      	pop	{r3, pc}
 80a1fb0:	080601ac 	.word	0x080601ac

080a1fb4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1fb4:	b508      	push	{r3, lr}
 80a1fb6:	4b02      	ldr	r3, [pc, #8]	; (80a1fc0 <hal_i2c_flush+0xc>)
 80a1fb8:	681b      	ldr	r3, [r3, #0]
 80a1fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1fbc:	9301      	str	r3, [sp, #4]
 80a1fbe:	bd08      	pop	{r3, pc}
 80a1fc0:	080601ac 	.word	0x080601ac

080a1fc4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1fc4:	b508      	push	{r3, lr}
 80a1fc6:	4b02      	ldr	r3, [pc, #8]	; (80a1fd0 <hal_i2c_is_enabled+0xc>)
 80a1fc8:	681b      	ldr	r3, [r3, #0]
 80a1fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1fcc:	9301      	str	r3, [sp, #4]
 80a1fce:	bd08      	pop	{r3, pc}
 80a1fd0:	080601ac 	.word	0x080601ac

080a1fd4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1fd4:	b508      	push	{r3, lr}
 80a1fd6:	4b03      	ldr	r3, [pc, #12]	; (80a1fe4 <hal_i2c_init+0x10>)
 80a1fd8:	681b      	ldr	r3, [r3, #0]
 80a1fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1fde:	9301      	str	r3, [sp, #4]
 80a1fe0:	bd08      	pop	{r3, pc}
 80a1fe2:	0000      	.short	0x0000
 80a1fe4:	080601ac 	.word	0x080601ac

080a1fe8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1fe8:	b508      	push	{r3, lr}
 80a1fea:	4b02      	ldr	r3, [pc, #8]	; (80a1ff4 <hal_spi_init+0xc>)
 80a1fec:	681b      	ldr	r3, [r3, #0]
 80a1fee:	69db      	ldr	r3, [r3, #28]
 80a1ff0:	9301      	str	r3, [sp, #4]
 80a1ff2:	bd08      	pop	{r3, pc}
 80a1ff4:	080601b4 	.word	0x080601b4

080a1ff8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1ff8:	b508      	push	{r3, lr}
 80a1ffa:	4b02      	ldr	r3, [pc, #8]	; (80a2004 <hal_spi_is_enabled+0xc>)
 80a1ffc:	681b      	ldr	r3, [r3, #0]
 80a1ffe:	6a1b      	ldr	r3, [r3, #32]
 80a2000:	9301      	str	r3, [sp, #4]
 80a2002:	bd08      	pop	{r3, pc}
 80a2004:	080601b4 	.word	0x080601b4

080a2008 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2008:	b508      	push	{r3, lr}
 80a200a:	4b02      	ldr	r3, [pc, #8]	; (80a2014 <HAL_USB_USART_Init+0xc>)
 80a200c:	681b      	ldr	r3, [r3, #0]
 80a200e:	681b      	ldr	r3, [r3, #0]
 80a2010:	9301      	str	r3, [sp, #4]
 80a2012:	bd08      	pop	{r3, pc}
 80a2014:	080601d8 	.word	0x080601d8

080a2018 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2018:	b508      	push	{r3, lr}
 80a201a:	4b02      	ldr	r3, [pc, #8]	; (80a2024 <HAL_USB_USART_Begin+0xc>)
 80a201c:	681b      	ldr	r3, [r3, #0]
 80a201e:	685b      	ldr	r3, [r3, #4]
 80a2020:	9301      	str	r3, [sp, #4]
 80a2022:	bd08      	pop	{r3, pc}
 80a2024:	080601d8 	.word	0x080601d8

080a2028 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2028:	b508      	push	{r3, lr}
 80a202a:	4b02      	ldr	r3, [pc, #8]	; (80a2034 <HAL_USB_USART_Available_Data+0xc>)
 80a202c:	681b      	ldr	r3, [r3, #0]
 80a202e:	691b      	ldr	r3, [r3, #16]
 80a2030:	9301      	str	r3, [sp, #4]
 80a2032:	bd08      	pop	{r3, pc}
 80a2034:	080601d8 	.word	0x080601d8

080a2038 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2038:	b508      	push	{r3, lr}
 80a203a:	4b02      	ldr	r3, [pc, #8]	; (80a2044 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a203c:	681b      	ldr	r3, [r3, #0]
 80a203e:	695b      	ldr	r3, [r3, #20]
 80a2040:	9301      	str	r3, [sp, #4]
 80a2042:	bd08      	pop	{r3, pc}
 80a2044:	080601d8 	.word	0x080601d8

080a2048 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2048:	b508      	push	{r3, lr}
 80a204a:	4b02      	ldr	r3, [pc, #8]	; (80a2054 <HAL_USB_USART_Receive_Data+0xc>)
 80a204c:	681b      	ldr	r3, [r3, #0]
 80a204e:	699b      	ldr	r3, [r3, #24]
 80a2050:	9301      	str	r3, [sp, #4]
 80a2052:	bd08      	pop	{r3, pc}
 80a2054:	080601d8 	.word	0x080601d8

080a2058 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2058:	b508      	push	{r3, lr}
 80a205a:	4b02      	ldr	r3, [pc, #8]	; (80a2064 <HAL_USB_USART_Send_Data+0xc>)
 80a205c:	681b      	ldr	r3, [r3, #0]
 80a205e:	69db      	ldr	r3, [r3, #28]
 80a2060:	9301      	str	r3, [sp, #4]
 80a2062:	bd08      	pop	{r3, pc}
 80a2064:	080601d8 	.word	0x080601d8

080a2068 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2068:	b508      	push	{r3, lr}
 80a206a:	4b02      	ldr	r3, [pc, #8]	; (80a2074 <HAL_USB_USART_Flush_Data+0xc>)
 80a206c:	681b      	ldr	r3, [r3, #0]
 80a206e:	6a1b      	ldr	r3, [r3, #32]
 80a2070:	9301      	str	r3, [sp, #4]
 80a2072:	bd08      	pop	{r3, pc}
 80a2074:	080601d8 	.word	0x080601d8

080a2078 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2078:	b508      	push	{r3, lr}
 80a207a:	4b02      	ldr	r3, [pc, #8]	; (80a2084 <inet_gethostbyname+0xc>)
 80a207c:	681b      	ldr	r3, [r3, #0]
 80a207e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2080:	9301      	str	r3, [sp, #4]
 80a2082:	bd08      	pop	{r3, pc}
 80a2084:	080601c0 	.word	0x080601c0

080a2088 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2088:	b508      	push	{r3, lr}
 80a208a:	4b02      	ldr	r3, [pc, #8]	; (80a2094 <set_system_mode+0xc>)
 80a208c:	681b      	ldr	r3, [r3, #0]
 80a208e:	685b      	ldr	r3, [r3, #4]
 80a2090:	9301      	str	r3, [sp, #4]
 80a2092:	bd08      	pop	{r3, pc}
 80a2094:	080601a4 	.word	0x080601a4

080a2098 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2098:	b508      	push	{r3, lr}
 80a209a:	4b02      	ldr	r3, [pc, #8]	; (80a20a4 <system_delay_ms+0xc>)
 80a209c:	681b      	ldr	r3, [r3, #0]
 80a209e:	695b      	ldr	r3, [r3, #20]
 80a20a0:	9301      	str	r3, [sp, #4]
 80a20a2:	bd08      	pop	{r3, pc}
 80a20a4:	080601a4 	.word	0x080601a4

080a20a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a20a8:	b508      	push	{r3, lr}
 80a20aa:	4b03      	ldr	r3, [pc, #12]	; (80a20b8 <system_ctrl_set_app_request_handler+0x10>)
 80a20ac:	681b      	ldr	r3, [r3, #0]
 80a20ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a20b2:	9301      	str	r3, [sp, #4]
 80a20b4:	bd08      	pop	{r3, pc}
 80a20b6:	0000      	.short	0x0000
 80a20b8:	080601a4 	.word	0x080601a4

080a20bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b03      	ldr	r3, [pc, #12]	; (80a20cc <system_ctrl_set_result+0x10>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a20c6:	9301      	str	r3, [sp, #4]
 80a20c8:	bd08      	pop	{r3, pc}
 80a20ca:	0000      	.short	0x0000
 80a20cc:	080601a4 	.word	0x080601a4

080a20d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a20d0:	b508      	push	{r3, lr}
 80a20d2:	4b02      	ldr	r3, [pc, #8]	; (80a20dc <network_connect+0xc>)
 80a20d4:	681b      	ldr	r3, [r3, #0]
 80a20d6:	685b      	ldr	r3, [r3, #4]
 80a20d8:	9301      	str	r3, [sp, #4]
 80a20da:	bd08      	pop	{r3, pc}
 80a20dc:	080601c8 	.word	0x080601c8

080a20e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a20e0:	b508      	push	{r3, lr}
 80a20e2:	4b02      	ldr	r3, [pc, #8]	; (80a20ec <network_connecting+0xc>)
 80a20e4:	681b      	ldr	r3, [r3, #0]
 80a20e6:	689b      	ldr	r3, [r3, #8]
 80a20e8:	9301      	str	r3, [sp, #4]
 80a20ea:	bd08      	pop	{r3, pc}
 80a20ec:	080601c8 	.word	0x080601c8

080a20f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a20f0:	b508      	push	{r3, lr}
 80a20f2:	4b02      	ldr	r3, [pc, #8]	; (80a20fc <network_disconnect+0xc>)
 80a20f4:	681b      	ldr	r3, [r3, #0]
 80a20f6:	68db      	ldr	r3, [r3, #12]
 80a20f8:	9301      	str	r3, [sp, #4]
 80a20fa:	bd08      	pop	{r3, pc}
 80a20fc:	080601c8 	.word	0x080601c8

080a2100 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2100:	b508      	push	{r3, lr}
 80a2102:	4b02      	ldr	r3, [pc, #8]	; (80a210c <network_ready+0xc>)
 80a2104:	681b      	ldr	r3, [r3, #0]
 80a2106:	691b      	ldr	r3, [r3, #16]
 80a2108:	9301      	str	r3, [sp, #4]
 80a210a:	bd08      	pop	{r3, pc}
 80a210c:	080601c8 	.word	0x080601c8

080a2110 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2110:	b508      	push	{r3, lr}
 80a2112:	4b02      	ldr	r3, [pc, #8]	; (80a211c <network_on+0xc>)
 80a2114:	681b      	ldr	r3, [r3, #0]
 80a2116:	695b      	ldr	r3, [r3, #20]
 80a2118:	9301      	str	r3, [sp, #4]
 80a211a:	bd08      	pop	{r3, pc}
 80a211c:	080601c8 	.word	0x080601c8

080a2120 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2120:	b508      	push	{r3, lr}
 80a2122:	4b02      	ldr	r3, [pc, #8]	; (80a212c <network_off+0xc>)
 80a2124:	681b      	ldr	r3, [r3, #0]
 80a2126:	699b      	ldr	r3, [r3, #24]
 80a2128:	9301      	str	r3, [sp, #4]
 80a212a:	bd08      	pop	{r3, pc}
 80a212c:	080601c8 	.word	0x080601c8

080a2130 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2130:	b508      	push	{r3, lr}
 80a2132:	4b02      	ldr	r3, [pc, #8]	; (80a213c <network_listen+0xc>)
 80a2134:	681b      	ldr	r3, [r3, #0]
 80a2136:	69db      	ldr	r3, [r3, #28]
 80a2138:	9301      	str	r3, [sp, #4]
 80a213a:	bd08      	pop	{r3, pc}
 80a213c:	080601c8 	.word	0x080601c8

080a2140 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2140:	b508      	push	{r3, lr}
 80a2142:	4b02      	ldr	r3, [pc, #8]	; (80a214c <network_listening+0xc>)
 80a2144:	681b      	ldr	r3, [r3, #0]
 80a2146:	6a1b      	ldr	r3, [r3, #32]
 80a2148:	9301      	str	r3, [sp, #4]
 80a214a:	bd08      	pop	{r3, pc}
 80a214c:	080601c8 	.word	0x080601c8

080a2150 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2150:	b508      	push	{r3, lr}
 80a2152:	4b02      	ldr	r3, [pc, #8]	; (80a215c <network_set_listen_timeout+0xc>)
 80a2154:	681b      	ldr	r3, [r3, #0]
 80a2156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2158:	9301      	str	r3, [sp, #4]
 80a215a:	bd08      	pop	{r3, pc}
 80a215c:	080601c8 	.word	0x080601c8

080a2160 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2160:	b508      	push	{r3, lr}
 80a2162:	4b02      	ldr	r3, [pc, #8]	; (80a216c <network_get_listen_timeout+0xc>)
 80a2164:	681b      	ldr	r3, [r3, #0]
 80a2166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2168:	9301      	str	r3, [sp, #4]
 80a216a:	bd08      	pop	{r3, pc}
 80a216c:	080601c8 	.word	0x080601c8

080a2170 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2170:	b508      	push	{r3, lr}
 80a2172:	4b02      	ldr	r3, [pc, #8]	; (80a217c <network_is_on+0xc>)
 80a2174:	681b      	ldr	r3, [r3, #0]
 80a2176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2178:	9301      	str	r3, [sp, #4]
 80a217a:	bd08      	pop	{r3, pc}
 80a217c:	080601c8 	.word	0x080601c8

080a2180 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2180:	b508      	push	{r3, lr}
 80a2182:	4b02      	ldr	r3, [pc, #8]	; (80a218c <network_is_off+0xc>)
 80a2184:	681b      	ldr	r3, [r3, #0]
 80a2186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2188:	9301      	str	r3, [sp, #4]
 80a218a:	bd08      	pop	{r3, pc}
 80a218c:	080601c8 	.word	0x080601c8

080a2190 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a2190:	b508      	push	{r3, lr}
 80a2192:	4b02      	ldr	r3, [pc, #8]	; (80a219c <spark_variable+0xc>)
 80a2194:	681b      	ldr	r3, [r3, #0]
 80a2196:	681b      	ldr	r3, [r3, #0]
 80a2198:	9301      	str	r3, [sp, #4]
 80a219a:	bd08      	pop	{r3, pc}
 80a219c:	080601cc 	.word	0x080601cc

080a21a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a21a0:	b508      	push	{r3, lr}
 80a21a2:	4b02      	ldr	r3, [pc, #8]	; (80a21ac <spark_set_random_seed_from_cloud_handler+0xc>)
 80a21a4:	681b      	ldr	r3, [r3, #0]
 80a21a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a21a8:	9301      	str	r3, [sp, #4]
 80a21aa:	bd08      	pop	{r3, pc}
 80a21ac:	080601cc 	.word	0x080601cc

080a21b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a21b0:	b508      	push	{r3, lr}
 80a21b2:	4b02      	ldr	r3, [pc, #8]	; (80a21bc <malloc+0xc>)
 80a21b4:	681b      	ldr	r3, [r3, #0]
 80a21b6:	681b      	ldr	r3, [r3, #0]
 80a21b8:	9301      	str	r3, [sp, #4]
 80a21ba:	bd08      	pop	{r3, pc}
 80a21bc:	080601a0 	.word	0x080601a0

080a21c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a21c0:	b508      	push	{r3, lr}
 80a21c2:	4b02      	ldr	r3, [pc, #8]	; (80a21cc <free+0xc>)
 80a21c4:	681b      	ldr	r3, [r3, #0]
 80a21c6:	685b      	ldr	r3, [r3, #4]
 80a21c8:	9301      	str	r3, [sp, #4]
 80a21ca:	bd08      	pop	{r3, pc}
 80a21cc:	080601a0 	.word	0x080601a0

080a21d0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a21d0:	b508      	push	{r3, lr}
 80a21d2:	4b02      	ldr	r3, [pc, #8]	; (80a21dc <__errno+0xc>)
 80a21d4:	681b      	ldr	r3, [r3, #0]
 80a21d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a21d8:	9301      	str	r3, [sp, #4]
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	080601a0 	.word	0x080601a0

080a21e0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a21e0:	b508      	push	{r3, lr}
 80a21e2:	4b02      	ldr	r3, [pc, #8]	; (80a21ec <__assert_func+0xc>)
 80a21e4:	681b      	ldr	r3, [r3, #0]
 80a21e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a21e8:	9301      	str	r3, [sp, #4]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	080601a0 	.word	0x080601a0

080a21f0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a21f0:	b508      	push	{r3, lr}
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <newlib_impure_ptr_callback+0xc>)
 80a21f4:	681b      	ldr	r3, [r3, #0]
 80a21f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	bd08      	pop	{r3, pc}
 80a21fc:	080601a0 	.word	0x080601a0

080a2200 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2200:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2202:	2600      	movs	r6, #0
 80a2204:	4604      	mov	r4, r0
 80a2206:	460d      	mov	r5, r1
 80a2208:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a220c:	f7ff fe4a 	bl	80a1ea4 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2210:	4628      	mov	r0, r5
    _spi = spi;
 80a2212:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2214:	f7ff fee8 	bl	80a1fe8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2218:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a221a:	6066      	str	r6, [r4, #4]
}
 80a221c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2220 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2220:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2222:	2000      	movs	r0, #0
 80a2224:	4b04      	ldr	r3, [pc, #16]	; (80a2238 <_GLOBAL__sub_I_System+0x18>)
 80a2226:	601a      	str	r2, [r3, #0]
 80a2228:	4b04      	ldr	r3, [pc, #16]	; (80a223c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a222a:	4a05      	ldr	r2, [pc, #20]	; (80a2240 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a222c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a2230:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2232:	f7ff bf29 	b.w	80a2088 <set_system_mode>
 80a2236:	bf00      	nop
 80a2238:	20000120 	.word	0x20000120
 80a223c:	20000114 	.word	0x20000114
 80a2240:	ffff0000 	.word	0xffff0000

080a2244 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2246:	4606      	mov	r6, r0
 80a2248:	460d      	mov	r5, r1
  size_t n = 0;
 80a224a:	2400      	movs	r4, #0
 80a224c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a224e:	42bd      	cmp	r5, r7
 80a2250:	d00c      	beq.n	80a226c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2252:	6833      	ldr	r3, [r6, #0]
 80a2254:	4630      	mov	r0, r6
 80a2256:	689b      	ldr	r3, [r3, #8]
 80a2258:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a225c:	4798      	blx	r3
     if (chunk>=0)
 80a225e:	1e03      	subs	r3, r0, #0
 80a2260:	db01      	blt.n	80a2266 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2262:	441c      	add	r4, r3
  while (size--) {
 80a2264:	e7f3      	b.n	80a224e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2266:	2c00      	cmp	r4, #0
 80a2268:	bf08      	it	eq
 80a226a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a226c:	4620      	mov	r0, r4
 80a226e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2270 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2270:	b570      	push	{r4, r5, r6, lr}
 80a2272:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2274:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2276:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2278:	b149      	cbz	r1, 80a228e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a227a:	f002 fda9 	bl	80a4dd0 <strlen>
 80a227e:	682b      	ldr	r3, [r5, #0]
 80a2280:	4602      	mov	r2, r0
 80a2282:	4621      	mov	r1, r4
 80a2284:	4628      	mov	r0, r5
    }
 80a2286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a228a:	68db      	ldr	r3, [r3, #12]
 80a228c:	4718      	bx	r3
    }
 80a228e:	bd70      	pop	{r4, r5, r6, pc}

080a2290 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2290:	b508      	push	{r3, lr}
  return write(str);
 80a2292:	f7ff ffed 	bl	80a2270 <_ZN5Print5writeEPKc>
}
 80a2296:	bd08      	pop	{r3, pc}

080a2298 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a2298:	6803      	ldr	r3, [r0, #0]
 80a229a:	689b      	ldr	r3, [r3, #8]
 80a229c:	4718      	bx	r3

080a229e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a229e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a22a0:	210d      	movs	r1, #13
{
 80a22a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a22a4:	f7ff fff8 	bl	80a2298 <_ZN5Print5printEc>
  n += print('\n');
 80a22a8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a22aa:	4604      	mov	r4, r0
  n += print('\n');
 80a22ac:	4628      	mov	r0, r5
 80a22ae:	f7ff fff3 	bl	80a2298 <_ZN5Print5printEc>
  return n;
}
 80a22b2:	4420      	add	r0, r4
 80a22b4:	bd38      	pop	{r3, r4, r5, pc}

080a22b6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a22b6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a22b8:	2a01      	cmp	r2, #1
 80a22ba:	bf98      	it	ls
 80a22bc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a22be:	b530      	push	{r4, r5, lr}
 80a22c0:	b08b      	sub	sp, #44	; 0x2c
 80a22c2:	460c      	mov	r4, r1
  *str = '\0';
 80a22c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a22c8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a22ca:	4625      	mov	r5, r4
 80a22cc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a22d0:	fb04 5312 	mls	r3, r4, r2, r5
 80a22d4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22d6:	2b09      	cmp	r3, #9
 80a22d8:	bf94      	ite	ls
 80a22da:	3330      	addls	r3, #48	; 0x30
 80a22dc:	3337      	addhi	r3, #55	; 0x37
 80a22de:	b2db      	uxtb	r3, r3
  } while(n);
 80a22e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22e2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a22e6:	d9f0      	bls.n	80a22ca <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a22e8:	f7ff ffc2 	bl	80a2270 <_ZN5Print5writeEPKc>
}
 80a22ec:	b00b      	add	sp, #44	; 0x2c
 80a22ee:	bd30      	pop	{r4, r5, pc}

080a22f0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a22f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a22f4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a22f6:	4619      	mov	r1, r3
 80a22f8:	4610      	mov	r0, r2
{
 80a22fa:	4692      	mov	sl, r2
 80a22fc:	461f      	mov	r7, r3
 80a22fe:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a2302:	f002 f9e9 	bl	80a46d8 <__aeabi_dcmpun>
 80a2306:	b140      	cbz	r0, 80a231a <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a2308:	4951      	ldr	r1, [pc, #324]	; (80a2450 <_ZN5Print10printFloatEdh+0x160>)
 80a230a:	4628      	mov	r0, r5
 80a230c:	f7ff ffb0 	bl	80a2270 <_ZN5Print5writeEPKc>
 80a2310:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a2312:	4620      	mov	r0, r4
 80a2314:	b003      	add	sp, #12
 80a2316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a231a:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a231e:	f04f 32ff 	mov.w	r2, #4294967295
 80a2322:	4650      	mov	r0, sl
 80a2324:	4621      	mov	r1, r4
 80a2326:	4b4b      	ldr	r3, [pc, #300]	; (80a2454 <_ZN5Print10printFloatEdh+0x164>)
 80a2328:	f002 f9d6 	bl	80a46d8 <__aeabi_dcmpun>
 80a232c:	b948      	cbnz	r0, 80a2342 <_ZN5Print10printFloatEdh+0x52>
 80a232e:	f04f 32ff 	mov.w	r2, #4294967295
 80a2332:	4650      	mov	r0, sl
 80a2334:	4621      	mov	r1, r4
 80a2336:	4b47      	ldr	r3, [pc, #284]	; (80a2454 <_ZN5Print10printFloatEdh+0x164>)
 80a2338:	f002 f9b0 	bl	80a469c <__aeabi_dcmple>
 80a233c:	b908      	cbnz	r0, 80a2342 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a233e:	4946      	ldr	r1, [pc, #280]	; (80a2458 <_ZN5Print10printFloatEdh+0x168>)
 80a2340:	e7e3      	b.n	80a230a <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2342:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2346:	4650      	mov	r0, sl
 80a2348:	4639      	mov	r1, r7
 80a234a:	4b44      	ldr	r3, [pc, #272]	; (80a245c <_ZN5Print10printFloatEdh+0x16c>)
 80a234c:	f002 f9ba 	bl	80a46c4 <__aeabi_dcmpgt>
 80a2350:	b108      	cbz	r0, 80a2356 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a2352:	4943      	ldr	r1, [pc, #268]	; (80a2460 <_ZN5Print10printFloatEdh+0x170>)
 80a2354:	e7d9      	b.n	80a230a <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2356:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a235a:	4650      	mov	r0, sl
 80a235c:	4639      	mov	r1, r7
 80a235e:	4b41      	ldr	r3, [pc, #260]	; (80a2464 <_ZN5Print10printFloatEdh+0x174>)
 80a2360:	f002 f992 	bl	80a4688 <__aeabi_dcmplt>
 80a2364:	2800      	cmp	r0, #0
 80a2366:	d1f4      	bne.n	80a2352 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a2368:	2200      	movs	r2, #0
 80a236a:	2300      	movs	r3, #0
 80a236c:	4650      	mov	r0, sl
 80a236e:	4639      	mov	r1, r7
 80a2370:	f002 f98a 	bl	80a4688 <__aeabi_dcmplt>
 80a2374:	4604      	mov	r4, r0
 80a2376:	b130      	cbz	r0, 80a2386 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a2378:	212d      	movs	r1, #45	; 0x2d
 80a237a:	4628      	mov	r0, r5
 80a237c:	f7ff ff8c 	bl	80a2298 <_ZN5Print5printEc>
 80a2380:	4604      	mov	r4, r0
     number = -number;
 80a2382:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a2386:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a238a:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a238c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a2390:	4935      	ldr	r1, [pc, #212]	; (80a2468 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a2392:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a246c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a2396:	fa5f f38b 	uxtb.w	r3, fp
 80a239a:	429e      	cmp	r6, r3
 80a239c:	d906      	bls.n	80a23ac <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a239e:	4642      	mov	r2, r8
 80a23a0:	464b      	mov	r3, r9
 80a23a2:	f002 f829 	bl	80a43f8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a23a6:	f10b 0b01 	add.w	fp, fp, #1
 80a23aa:	e7f4      	b.n	80a2396 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a23ac:	463b      	mov	r3, r7
 80a23ae:	4652      	mov	r2, sl
 80a23b0:	f001 fd42 	bl	80a3e38 <__adddf3>
 80a23b4:	4689      	mov	r9, r1
 80a23b6:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a23b8:	f002 f9cc 	bl	80a4754 <__aeabi_d2uiz>
 80a23bc:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a23be:	f001 fe77 	bl	80a40b0 <__aeabi_ui2d>
 80a23c2:	4602      	mov	r2, r0
 80a23c4:	460b      	mov	r3, r1
 80a23c6:	4640      	mov	r0, r8
 80a23c8:	4649      	mov	r1, r9
 80a23ca:	f001 fd33 	bl	80a3e34 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a23ce:	220a      	movs	r2, #10
 80a23d0:	4680      	mov	r8, r0
 80a23d2:	4689      	mov	r9, r1
 80a23d4:	4628      	mov	r0, r5
 80a23d6:	4639      	mov	r1, r7
 80a23d8:	f7ff ff6d 	bl	80a22b6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a23dc:	4404      	add	r4, r0
  if (digits > 0) {
 80a23de:	2e00      	cmp	r6, #0
 80a23e0:	d097      	beq.n	80a2312 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a23e2:	4628      	mov	r0, r5
 80a23e4:	4922      	ldr	r1, [pc, #136]	; (80a2470 <_ZN5Print10printFloatEdh+0x180>)
 80a23e6:	f7ff ff43 	bl	80a2270 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a23ea:	f04f 0a00 	mov.w	sl, #0
 80a23ee:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a246c <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a23f2:	4404      	add	r4, r0
  while (digits-- > 0)
 80a23f4:	2e00      	cmp	r6, #0
 80a23f6:	d08c      	beq.n	80a2312 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a23f8:	4652      	mov	r2, sl
 80a23fa:	465b      	mov	r3, fp
 80a23fc:	4640      	mov	r0, r8
 80a23fe:	4649      	mov	r1, r9
 80a2400:	f001 fed0 	bl	80a41a4 <__aeabi_dmul>
 80a2404:	4680      	mov	r8, r0
 80a2406:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a2408:	f002 f97c 	bl	80a4704 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a240c:	1e07      	subs	r7, r0, #0
 80a240e:	da1b      	bge.n	80a2448 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a2410:	212d      	movs	r1, #45	; 0x2d
 80a2412:	4628      	mov	r0, r5
 80a2414:	f7ff ff40 	bl	80a2298 <_ZN5Print5printEc>
 80a2418:	4603      	mov	r3, r0
            val = -n;
 80a241a:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a241c:	220a      	movs	r2, #10
 80a241e:	4628      	mov	r0, r5
 80a2420:	9301      	str	r3, [sp, #4]
 80a2422:	f7ff ff48 	bl	80a22b6 <_ZN5Print11printNumberEmh>
 80a2426:	9b01      	ldr	r3, [sp, #4]
 80a2428:	3e01      	subs	r6, #1
 80a242a:	4403      	add	r3, r0
    remainder -= toPrint;
 80a242c:	4638      	mov	r0, r7
    n += print(toPrint);
 80a242e:	441c      	add	r4, r3
    remainder -= toPrint;
 80a2430:	f001 fe4e 	bl	80a40d0 <__aeabi_i2d>
 80a2434:	4602      	mov	r2, r0
 80a2436:	460b      	mov	r3, r1
 80a2438:	4640      	mov	r0, r8
 80a243a:	4649      	mov	r1, r9
 80a243c:	f001 fcfa 	bl	80a3e34 <__aeabi_dsub>
 80a2440:	b2f6      	uxtb	r6, r6
 80a2442:	4680      	mov	r8, r0
 80a2444:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a2446:	e7d5      	b.n	80a23f4 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a2448:	4639      	mov	r1, r7
        size_t t = 0;
 80a244a:	2300      	movs	r3, #0
 80a244c:	e7e6      	b.n	80a241c <_ZN5Print10printFloatEdh+0x12c>
 80a244e:	bf00      	nop
 80a2450:	080a4f6c 	.word	0x080a4f6c
 80a2454:	7fefffff 	.word	0x7fefffff
 80a2458:	080a4f70 	.word	0x080a4f70
 80a245c:	41efffff 	.word	0x41efffff
 80a2460:	080a4f74 	.word	0x080a4f74
 80a2464:	c1efffff 	.word	0xc1efffff
 80a2468:	3fe00000 	.word	0x3fe00000
 80a246c:	40240000 	.word	0x40240000
 80a2470:	080a4f31 	.word	0x080a4f31

080a2474 <_ZN5Print5printEfi>:
{
 80a2474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2476:	4605      	mov	r5, r0
 80a2478:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a247a:	4608      	mov	r0, r1
 80a247c:	f001 fe3a 	bl	80a40f4 <__aeabi_f2d>
 80a2480:	b2e4      	uxtb	r4, r4
 80a2482:	4602      	mov	r2, r0
 80a2484:	460b      	mov	r3, r1
 80a2486:	4628      	mov	r0, r5
 80a2488:	9400      	str	r4, [sp, #0]
 80a248a:	f7ff ff31 	bl	80a22f0 <_ZN5Print10printFloatEdh>
}
 80a248e:	b003      	add	sp, #12
 80a2490:	bd30      	pop	{r4, r5, pc}

080a2492 <_ZN5Print7printlnEdi>:
{
 80a2492:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a2494:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a2498:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a249a:	9100      	str	r1, [sp, #0]
 80a249c:	f7ff ff28 	bl	80a22f0 <_ZN5Print10printFloatEdh>
 80a24a0:	4604      	mov	r4, r0
  n += println();
 80a24a2:	4628      	mov	r0, r5
 80a24a4:	f7ff fefb 	bl	80a229e <_ZN5Print7printlnEv>
}
 80a24a8:	4420      	add	r0, r4
 80a24aa:	b003      	add	sp, #12
 80a24ac:	bd30      	pop	{r4, r5, pc}

080a24ae <_ZN5Print7printlnEfi>:
{
 80a24ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a24b0:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a24b2:	4608      	mov	r0, r1
{
 80a24b4:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a24b6:	f001 fe1d 	bl	80a40f4 <__aeabi_f2d>
 80a24ba:	9500      	str	r5, [sp, #0]
 80a24bc:	4602      	mov	r2, r0
 80a24be:	460b      	mov	r3, r1
 80a24c0:	4620      	mov	r0, r4
 80a24c2:	f7ff ffe6 	bl	80a2492 <_ZN5Print7printlnEdi>
}
 80a24c6:	b003      	add	sp, #12
 80a24c8:	bd30      	pop	{r4, r5, pc}
	...

080a24cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a24cc:	4b01      	ldr	r3, [pc, #4]	; (80a24d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a24ce:	4a02      	ldr	r2, [pc, #8]	; (80a24d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a24d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a24d2:	4770      	bx	lr
 80a24d4:	20000124 	.word	0x20000124
 80a24d8:	080a4f78 	.word	0x080a4f78

080a24dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a24dc:	4b02      	ldr	r3, [pc, #8]	; (80a24e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a24de:	681a      	ldr	r2, [r3, #0]
 80a24e0:	4b02      	ldr	r3, [pc, #8]	; (80a24ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a24e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a24e4:	4770      	bx	lr
 80a24e6:	bf00      	nop
 80a24e8:	20000008 	.word	0x20000008
 80a24ec:	20000128 	.word	0x20000128

080a24f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a24f0:	2100      	movs	r1, #0
 80a24f2:	f7ff bdd1 	b.w	80a2098 <system_delay_ms>
	...

080a24f8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a24f8:	2200      	movs	r2, #0
 80a24fa:	4b01      	ldr	r3, [pc, #4]	; (80a2500 <_GLOBAL__sub_I_RGB+0x8>)
 80a24fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a24fe:	4770      	bx	lr
 80a2500:	2000012c 	.word	0x2000012c

080a2504 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2504:	4b01      	ldr	r3, [pc, #4]	; (80a250c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2506:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2508:	4770      	bx	lr
 80a250a:	bf00      	nop
 80a250c:	20000010 	.word	0x20000010

080a2510 <serialEventRun>:
{
 80a2510:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2512:	4b13      	ldr	r3, [pc, #76]	; (80a2560 <serialEventRun+0x50>)
 80a2514:	b143      	cbz	r3, 80a2528 <serialEventRun+0x18>
 80a2516:	f000 f975 	bl	80a2804 <_Z16_fetch_usbserialv>
 80a251a:	6803      	ldr	r3, [r0, #0]
 80a251c:	691b      	ldr	r3, [r3, #16]
 80a251e:	4798      	blx	r3
 80a2520:	2800      	cmp	r0, #0
 80a2522:	dd01      	ble.n	80a2528 <serialEventRun+0x18>
        serialEvent();
 80a2524:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2528:	4b0e      	ldr	r3, [pc, #56]	; (80a2564 <serialEventRun+0x54>)
 80a252a:	b143      	cbz	r3, 80a253e <serialEventRun+0x2e>
 80a252c:	f000 fbf2 	bl	80a2d14 <_Z22__fetch_global_Serial1v>
 80a2530:	6803      	ldr	r3, [r0, #0]
 80a2532:	691b      	ldr	r3, [r3, #16]
 80a2534:	4798      	blx	r3
 80a2536:	2800      	cmp	r0, #0
 80a2538:	dd01      	ble.n	80a253e <serialEventRun+0x2e>
        serialEvent1();
 80a253a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a253e:	4b0a      	ldr	r3, [pc, #40]	; (80a2568 <serialEventRun+0x58>)
 80a2540:	b10b      	cbz	r3, 80a2546 <serialEventRun+0x36>
 80a2542:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2546:	4b09      	ldr	r3, [pc, #36]	; (80a256c <serialEventRun+0x5c>)
 80a2548:	b143      	cbz	r3, 80a255c <serialEventRun+0x4c>
 80a254a:	f000 f995 	bl	80a2878 <_Z17_fetch_usbserial1v>
 80a254e:	6803      	ldr	r3, [r0, #0]
 80a2550:	691b      	ldr	r3, [r3, #16]
 80a2552:	4798      	blx	r3
 80a2554:	2800      	cmp	r0, #0
 80a2556:	dd01      	ble.n	80a255c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2558:	f3af 8000 	nop.w
}
 80a255c:	bd08      	pop	{r3, pc}
 80a255e:	bf00      	nop
	...

080a2570 <_post_loop>:
{
 80a2570:	b508      	push	{r3, lr}
	serialEventRun();
 80a2572:	f7ff ffcd 	bl	80a2510 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2576:	f7ff fc8d 	bl	80a1e94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a257a:	4b01      	ldr	r3, [pc, #4]	; (80a2580 <_post_loop+0x10>)
 80a257c:	6018      	str	r0, [r3, #0]
}
 80a257e:	bd08      	pop	{r3, pc}
 80a2580:	200004b0 	.word	0x200004b0

080a2584 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2584:	4805      	ldr	r0, [pc, #20]	; (80a259c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a2586:	4a06      	ldr	r2, [pc, #24]	; (80a25a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2588:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a258a:	1a12      	subs	r2, r2, r0
 80a258c:	4905      	ldr	r1, [pc, #20]	; (80a25a4 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a258e:	f002 fbdb 	bl	80a4d48 <memcpy>
    __backup_sram_signature = signature;
 80a2592:	4b05      	ldr	r3, [pc, #20]	; (80a25a8 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2594:	4a05      	ldr	r2, [pc, #20]	; (80a25ac <_Z33system_initialize_user_backup_ramv+0x28>)
 80a2596:	601a      	str	r2, [r3, #0]
}
 80a2598:	bd08      	pop	{r3, pc}
 80a259a:	bf00      	nop
 80a259c:	40024000 	.word	0x40024000
 80a25a0:	40024004 	.word	0x40024004
 80a25a4:	080a5180 	.word	0x080a5180
 80a25a8:	40024000 	.word	0x40024000
 80a25ac:	9a271c1e 	.word	0x9a271c1e

080a25b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a25b0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a25b2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a25b4:	461a      	mov	r2, r3
 80a25b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a25ba:	9300      	str	r3, [sp, #0]
 80a25bc:	f7ff fd7e 	bl	80a20bc <system_ctrl_set_result>
}
 80a25c0:	b003      	add	sp, #12
 80a25c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a25c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a25c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a25ca:	8843      	ldrh	r3, [r0, #2]
 80a25cc:	2b0a      	cmp	r3, #10
 80a25ce:	d008      	beq.n	80a25e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a25d0:	2b50      	cmp	r3, #80	; 0x50
 80a25d2:	d10b      	bne.n	80a25ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a25d4:	4b09      	ldr	r3, [pc, #36]	; (80a25fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a25d6:	681b      	ldr	r3, [r3, #0]
 80a25d8:	b14b      	cbz	r3, 80a25ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a25da:	b003      	add	sp, #12
 80a25dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a25e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a25e2:	f7ff ffe5 	bl	80a25b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a25e6:	b003      	add	sp, #12
 80a25e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a25ec:	2300      	movs	r3, #0
 80a25ee:	461a      	mov	r2, r3
 80a25f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a25f4:	9300      	str	r3, [sp, #0]
 80a25f6:	f7ff fd61 	bl	80a20bc <system_ctrl_set_result>
}
 80a25fa:	e7f4      	b.n	80a25e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a25fc:	20000140 	.word	0x20000140

080a2600 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2600:	2100      	movs	r1, #0
{
 80a2602:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2604:	4811      	ldr	r0, [pc, #68]	; (80a264c <module_user_init_hook+0x4c>)
 80a2606:	f7ff fdf3 	bl	80a21f0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a260a:	4b11      	ldr	r3, [pc, #68]	; (80a2650 <module_user_init_hook+0x50>)
 80a260c:	681a      	ldr	r2, [r3, #0]
 80a260e:	4b11      	ldr	r3, [pc, #68]	; (80a2654 <module_user_init_hook+0x54>)
 80a2610:	429a      	cmp	r2, r3
 80a2612:	bf0c      	ite	eq
 80a2614:	2201      	moveq	r2, #1
 80a2616:	2200      	movne	r2, #0
 80a2618:	4b0f      	ldr	r3, [pc, #60]	; (80a2658 <module_user_init_hook+0x58>)
 80a261a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a261c:	d001      	beq.n	80a2622 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a261e:	f7ff ffb1 	bl	80a2584 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2622:	f7ff fc1f 	bl	80a1e64 <HAL_RNG_GetRandomNumber>
 80a2626:	4604      	mov	r4, r0
    srand(seed);
 80a2628:	f002 fba4 	bl	80a4d74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a262c:	4b0b      	ldr	r3, [pc, #44]	; (80a265c <module_user_init_hook+0x5c>)
 80a262e:	b113      	cbz	r3, 80a2636 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2630:	4620      	mov	r0, r4
 80a2632:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2636:	2100      	movs	r1, #0
 80a2638:	4808      	ldr	r0, [pc, #32]	; (80a265c <module_user_init_hook+0x5c>)
 80a263a:	f7ff fdb1 	bl	80a21a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2642:	2100      	movs	r1, #0
 80a2644:	4806      	ldr	r0, [pc, #24]	; (80a2660 <module_user_init_hook+0x60>)
 80a2646:	f7ff bd2f 	b.w	80a20a8 <system_ctrl_set_app_request_handler>
 80a264a:	bf00      	nop
 80a264c:	080a2505 	.word	0x080a2505
 80a2650:	40024000 	.word	0x40024000
 80a2654:	9a271c1e 	.word	0x9a271c1e
 80a2658:	2000013c 	.word	0x2000013c
 80a265c:	00000000 	.word	0x00000000
 80a2660:	080a25c9 	.word	0x080a25c9

080a2664 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2664:	4770      	bx	lr

080a2666 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2668:	460e      	mov	r6, r1
 80a266a:	2400      	movs	r4, #0
 80a266c:	f100 0708 	add.w	r7, r0, #8
 80a2670:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a2672:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a2676:	220a      	movs	r2, #10
 80a2678:	4630      	mov	r0, r6
 80a267a:	f7ff fe1c 	bl	80a22b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a267e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2680:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2682:	d101      	bne.n	80a2688 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a2684:	4620      	mov	r0, r4
 80a2686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a2688:	2c00      	cmp	r4, #0
 80a268a:	d0f2      	beq.n	80a2672 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a268c:	212e      	movs	r1, #46	; 0x2e
 80a268e:	4630      	mov	r0, r6
 80a2690:	f7ff fe02 	bl	80a2298 <_ZN5Print5printEc>
 80a2694:	4404      	add	r4, r0
 80a2696:	e7ec      	b.n	80a2672 <_ZNK9IPAddress7printToER5Print+0xc>

080a2698 <_ZN9IPAddressD0Ev>:
 80a2698:	b510      	push	{r4, lr}
 80a269a:	4604      	mov	r4, r0
 80a269c:	2118      	movs	r1, #24
 80a269e:	f7fd fcfe 	bl	80a009e <_ZdlPvj>
 80a26a2:	4620      	mov	r0, r4
 80a26a4:	bd10      	pop	{r4, pc}
	...

080a26a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a26a8:	b510      	push	{r4, lr}
 80a26aa:	4604      	mov	r4, r0
 80a26ac:	4b04      	ldr	r3, [pc, #16]	; (80a26c0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a26ae:	2211      	movs	r2, #17
 80a26b0:	2100      	movs	r1, #0
 80a26b2:	f840 3b04 	str.w	r3, [r0], #4
 80a26b6:	f002 fb55 	bl	80a4d64 <memset>
}
 80a26ba:	4620      	mov	r0, r4
 80a26bc:	bd10      	pop	{r4, pc}
 80a26be:	bf00      	nop
 80a26c0:	080a4fa0 	.word	0x080a4fa0

080a26c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a26c4:	4603      	mov	r3, r0
 80a26c6:	4a07      	ldr	r2, [pc, #28]	; (80a26e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a26c8:	b510      	push	{r4, lr}
 80a26ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a26ce:	f101 0210 	add.w	r2, r1, #16
 80a26d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a26d6:	4291      	cmp	r1, r2
 80a26d8:	f843 4b04 	str.w	r4, [r3], #4
 80a26dc:	d1f9      	bne.n	80a26d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a26de:	780a      	ldrb	r2, [r1, #0]
 80a26e0:	701a      	strb	r2, [r3, #0]
}
 80a26e2:	bd10      	pop	{r4, pc}
 80a26e4:	080a4fa0 	.word	0x080a4fa0

080a26e8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a26e8:	4a02      	ldr	r2, [pc, #8]	; (80a26f4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a26ea:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a26ee:	2204      	movs	r2, #4
 80a26f0:	7502      	strb	r2, [r0, #20]
}
 80a26f2:	4770      	bx	lr
 80a26f4:	080a4fa0 	.word	0x080a4fa0

080a26f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a26f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a26fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a26fe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2702:	2304      	movs	r3, #4
 80a2704:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2708:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a270c:	6044      	str	r4, [r0, #4]
 80a270e:	7503      	strb	r3, [r0, #20]
}
 80a2710:	bd10      	pop	{r4, pc}
	...

080a2714 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2714:	b513      	push	{r0, r1, r4, lr}
 80a2716:	4c04      	ldr	r4, [pc, #16]	; (80a2728 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2718:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a271a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a271e:	9400      	str	r4, [sp, #0]
 80a2720:	f7ff ffea 	bl	80a26f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2724:	b002      	add	sp, #8
 80a2726:	bd10      	pop	{r4, pc}
 80a2728:	080a4fa0 	.word	0x080a4fa0

080a272c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a272c:	7441      	strb	r1, [r0, #17]
}
 80a272e:	4770      	bx	lr

080a2730 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2730:	4770      	bx	lr

080a2732 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2732:	4770      	bx	lr

080a2734 <_ZN9USBSerial4readEv>:
{
 80a2734:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2736:	2100      	movs	r1, #0
 80a2738:	7c00      	ldrb	r0, [r0, #16]
 80a273a:	f7ff fc85 	bl	80a2048 <HAL_USB_USART_Receive_Data>
}
 80a273e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2742:	bd08      	pop	{r3, pc}

080a2744 <_ZN9USBSerial4peekEv>:
{
 80a2744:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2746:	2101      	movs	r1, #1
 80a2748:	7c00      	ldrb	r0, [r0, #16]
 80a274a:	f7ff fc7d 	bl	80a2048 <HAL_USB_USART_Receive_Data>
}
 80a274e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2752:	bd08      	pop	{r3, pc}

080a2754 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2754:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2756:	7c00      	ldrb	r0, [r0, #16]
 80a2758:	f7ff fc6e 	bl	80a2038 <HAL_USB_USART_Available_Data_For_Write>
}
 80a275c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2760:	bd08      	pop	{r3, pc}

080a2762 <_ZN9USBSerial9availableEv>:
{
 80a2762:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2764:	7c00      	ldrb	r0, [r0, #16]
 80a2766:	f7ff fc5f 	bl	80a2028 <HAL_USB_USART_Available_Data>
}
 80a276a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a276e:	bd08      	pop	{r3, pc}

080a2770 <_ZN9USBSerial5writeEh>:
{
 80a2770:	b538      	push	{r3, r4, r5, lr}
 80a2772:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2774:	7c00      	ldrb	r0, [r0, #16]
{
 80a2776:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2778:	f7ff fc5e 	bl	80a2038 <HAL_USB_USART_Available_Data_For_Write>
 80a277c:	2800      	cmp	r0, #0
 80a277e:	dc01      	bgt.n	80a2784 <_ZN9USBSerial5writeEh+0x14>
 80a2780:	7c60      	ldrb	r0, [r4, #17]
 80a2782:	b128      	cbz	r0, 80a2790 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2784:	4629      	mov	r1, r5
 80a2786:	7c20      	ldrb	r0, [r4, #16]
 80a2788:	f7ff fc66 	bl	80a2058 <HAL_USB_USART_Send_Data>
 80a278c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2790:	bd38      	pop	{r3, r4, r5, pc}

080a2792 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2792:	7c00      	ldrb	r0, [r0, #16]
 80a2794:	f7ff bc68 	b.w	80a2068 <HAL_USB_USART_Flush_Data>

080a2798 <_ZN9USBSerialD0Ev>:
 80a2798:	b510      	push	{r4, lr}
 80a279a:	4604      	mov	r4, r0
 80a279c:	2114      	movs	r1, #20
 80a279e:	f7fd fc7e 	bl	80a009e <_ZdlPvj>
 80a27a2:	4620      	mov	r0, r4
 80a27a4:	bd10      	pop	{r4, pc}

080a27a6 <__tcf_1>:
 80a27a6:	4770      	bx	lr

080a27a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a27a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a27aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27ae:	4604      	mov	r4, r0
 80a27b0:	4608      	mov	r0, r1
 80a27b2:	2100      	movs	r1, #0
 80a27b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a27b8:	4b04      	ldr	r3, [pc, #16]	; (80a27cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a27ba:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a27bc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a27be:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a27c0:	4611      	mov	r1, r2
  _blocking = true;
 80a27c2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a27c4:	f7ff fc20 	bl	80a2008 <HAL_USB_USART_Init>
}
 80a27c8:	4620      	mov	r0, r4
 80a27ca:	bd10      	pop	{r4, pc}
 80a27cc:	080a4fb4 	.word	0x080a4fb4

080a27d0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a27d0:	2200      	movs	r2, #0
 80a27d2:	7c00      	ldrb	r0, [r0, #16]
 80a27d4:	f7ff bc20 	b.w	80a2018 <HAL_USB_USART_Begin>

080a27d8 <_Z19acquireSerialBufferv>:
{
 80a27d8:	b510      	push	{r4, lr}
 80a27da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a27dc:	2214      	movs	r2, #20
 80a27de:	2100      	movs	r1, #0
 80a27e0:	f002 fac0 	bl	80a4d64 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a27e4:	4b05      	ldr	r3, [pc, #20]	; (80a27fc <_Z19acquireSerialBufferv+0x24>)
}
 80a27e6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a27e8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a27ea:	4b05      	ldr	r3, [pc, #20]	; (80a2800 <_Z19acquireSerialBufferv+0x28>)
 80a27ec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a27ee:	f240 1301 	movw	r3, #257	; 0x101
 80a27f2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a27f4:	2381      	movs	r3, #129	; 0x81
 80a27f6:	8223      	strh	r3, [r4, #16]
}
 80a27f8:	bd10      	pop	{r4, pc}
 80a27fa:	bf00      	nop
 80a27fc:	20000174 	.word	0x20000174
 80a2800:	20000275 	.word	0x20000275

080a2804 <_Z16_fetch_usbserialv>:
{
 80a2804:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2806:	4d0e      	ldr	r5, [pc, #56]	; (80a2840 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2808:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a280a:	a801      	add	r0, sp, #4
 80a280c:	f7ff ffe4 	bl	80a27d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2810:	7829      	ldrb	r1, [r5, #0]
 80a2812:	f3bf 8f5b 	dmb	ish
 80a2816:	f011 0401 	ands.w	r4, r1, #1
 80a281a:	d10e      	bne.n	80a283a <_Z16_fetch_usbserialv+0x36>
 80a281c:	4628      	mov	r0, r5
 80a281e:	f7fd fc40 	bl	80a00a2 <__cxa_guard_acquire>
 80a2822:	b150      	cbz	r0, 80a283a <_Z16_fetch_usbserialv+0x36>
 80a2824:	4621      	mov	r1, r4
 80a2826:	aa01      	add	r2, sp, #4
 80a2828:	4806      	ldr	r0, [pc, #24]	; (80a2844 <_Z16_fetch_usbserialv+0x40>)
 80a282a:	f7ff ffbd 	bl	80a27a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a282e:	4628      	mov	r0, r5
 80a2830:	f7fd fc3c 	bl	80a00ac <__cxa_guard_release>
 80a2834:	4804      	ldr	r0, [pc, #16]	; (80a2848 <_Z16_fetch_usbserialv+0x44>)
 80a2836:	f002 fa81 	bl	80a4d3c <atexit>
	return _usbserial;
}
 80a283a:	4802      	ldr	r0, [pc, #8]	; (80a2844 <_Z16_fetch_usbserialv+0x40>)
 80a283c:	b007      	add	sp, #28
 80a283e:	bd30      	pop	{r4, r5, pc}
 80a2840:	20000144 	.word	0x20000144
 80a2844:	2000014c 	.word	0x2000014c
 80a2848:	080a2731 	.word	0x080a2731

080a284c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a284c:	b510      	push	{r4, lr}
 80a284e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2850:	2214      	movs	r2, #20
 80a2852:	2100      	movs	r1, #0
 80a2854:	f002 fa86 	bl	80a4d64 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2858:	4b05      	ldr	r3, [pc, #20]	; (80a2870 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a285a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a285c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a285e:	4b05      	ldr	r3, [pc, #20]	; (80a2874 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2860:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2862:	f240 1301 	movw	r3, #257	; 0x101
 80a2866:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2868:	2381      	movs	r3, #129	; 0x81
 80a286a:	8223      	strh	r3, [r4, #16]
}
 80a286c:	bd10      	pop	{r4, pc}
 80a286e:	bf00      	nop
 80a2870:	200002f6 	.word	0x200002f6
 80a2874:	200003f7 	.word	0x200003f7

080a2878 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2878:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a287a:	4c0e      	ldr	r4, [pc, #56]	; (80a28b4 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a287c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a287e:	a801      	add	r0, sp, #4
 80a2880:	f7ff ffe4 	bl	80a284c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2884:	7823      	ldrb	r3, [r4, #0]
 80a2886:	f3bf 8f5b 	dmb	ish
 80a288a:	07db      	lsls	r3, r3, #31
 80a288c:	d40e      	bmi.n	80a28ac <_Z17_fetch_usbserial1v+0x34>
 80a288e:	4620      	mov	r0, r4
 80a2890:	f7fd fc07 	bl	80a00a2 <__cxa_guard_acquire>
 80a2894:	b150      	cbz	r0, 80a28ac <_Z17_fetch_usbserial1v+0x34>
 80a2896:	2101      	movs	r1, #1
 80a2898:	aa01      	add	r2, sp, #4
 80a289a:	4807      	ldr	r0, [pc, #28]	; (80a28b8 <_Z17_fetch_usbserial1v+0x40>)
 80a289c:	f7ff ff84 	bl	80a27a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a28a0:	4620      	mov	r0, r4
 80a28a2:	f7fd fc03 	bl	80a00ac <__cxa_guard_release>
 80a28a6:	4805      	ldr	r0, [pc, #20]	; (80a28bc <_Z17_fetch_usbserial1v+0x44>)
 80a28a8:	f002 fa48 	bl	80a4d3c <atexit>
  return _usbserial1;
}
 80a28ac:	4802      	ldr	r0, [pc, #8]	; (80a28b8 <_Z17_fetch_usbserial1v+0x40>)
 80a28ae:	b006      	add	sp, #24
 80a28b0:	bd10      	pop	{r4, pc}
 80a28b2:	bf00      	nop
 80a28b4:	20000148 	.word	0x20000148
 80a28b8:	20000160 	.word	0x20000160
 80a28bc:	080a27a7 	.word	0x080a27a7

080a28c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a28c0:	4770      	bx	lr

080a28c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a28c2:	7441      	strb	r1, [r0, #17]
}
 80a28c4:	4770      	bx	lr

080a28c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a28c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a28c8:	7c00      	ldrb	r0, [r0, #16]
 80a28ca:	f7ff fb2b 	bl	80a1f24 <hal_usart_available_data_for_write>
}
 80a28ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28d2:	bd08      	pop	{r3, pc}

080a28d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a28d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a28d6:	7c00      	ldrb	r0, [r0, #16]
 80a28d8:	f7ff fafc 	bl	80a1ed4 <hal_usart_available>
}
 80a28dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28e0:	bd08      	pop	{r3, pc}

080a28e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a28e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a28e4:	7c00      	ldrb	r0, [r0, #16]
 80a28e6:	f7ff fb05 	bl	80a1ef4 <hal_usart_peek>
}
 80a28ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a28ee:	bd08      	pop	{r3, pc}

080a28f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a28f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a28f2:	7c00      	ldrb	r0, [r0, #16]
 80a28f4:	f7ff faf6 	bl	80a1ee4 <hal_usart_read>
}
 80a28f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a28fc:	bd08      	pop	{r3, pc}

080a28fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a28fe:	7c00      	ldrb	r0, [r0, #16]
 80a2900:	f7ff bb00 	b.w	80a1f04 <hal_usart_flush>

080a2904 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2904:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2906:	7c46      	ldrb	r6, [r0, #17]
{
 80a2908:	4604      	mov	r4, r0
 80a290a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a290c:	b12e      	cbz	r6, 80a291a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a290e:	4629      	mov	r1, r5
 80a2910:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2916:	f7ff bad5 	b.w	80a1ec4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a291a:	7c00      	ldrb	r0, [r0, #16]
 80a291c:	f7ff fb02 	bl	80a1f24 <hal_usart_available_data_for_write>
 80a2920:	2800      	cmp	r0, #0
 80a2922:	dcf4      	bgt.n	80a290e <_ZN11USARTSerial5writeEh+0xa>
}
 80a2924:	4630      	mov	r0, r6
 80a2926:	bd70      	pop	{r4, r5, r6, pc}

080a2928 <_ZN11USARTSerialD0Ev>:
 80a2928:	b510      	push	{r4, lr}
 80a292a:	4604      	mov	r4, r0
 80a292c:	2114      	movs	r1, #20
 80a292e:	f7fd fbb6 	bl	80a009e <_ZdlPvj>
 80a2932:	4620      	mov	r0, r4
 80a2934:	bd10      	pop	{r4, pc}
	...

080a2938 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a2938:	b510      	push	{r4, lr}
 80a293a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a293e:	4604      	mov	r4, r0
 80a2940:	4608      	mov	r0, r1
 80a2942:	4611      	mov	r1, r2
 80a2944:	2200      	movs	r2, #0
 80a2946:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a294a:	4b04      	ldr	r3, [pc, #16]	; (80a295c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a294c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a294e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2950:	2301      	movs	r3, #1
 80a2952:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a2954:	f7ff faee 	bl	80a1f34 <hal_usart_init_ex>
}
 80a2958:	4620      	mov	r0, r4
 80a295a:	bd10      	pop	{r4, pc}
 80a295c:	080a4fe4 	.word	0x080a4fe4

080a2960 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2960:	4770      	bx	lr

080a2962 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2964:	4606      	mov	r6, r0
 80a2966:	4615      	mov	r5, r2
 80a2968:	460c      	mov	r4, r1
 80a296a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a296c:	42bc      	cmp	r4, r7
 80a296e:	d006      	beq.n	80a297e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2970:	6833      	ldr	r3, [r6, #0]
 80a2972:	4630      	mov	r0, r6
 80a2974:	689b      	ldr	r3, [r3, #8]
 80a2976:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a297a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a297c:	e7f6      	b.n	80a296c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a297e:	4628      	mov	r0, r5
 80a2980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2982 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2982:	2200      	movs	r2, #0
 80a2984:	7c00      	ldrb	r0, [r0, #16]
 80a2986:	f7ff baf5 	b.w	80a1f74 <hal_i2c_write>

080a298a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a298a:	2100      	movs	r1, #0
 80a298c:	7c00      	ldrb	r0, [r0, #16]
 80a298e:	f7ff baf9 	b.w	80a1f84 <hal_i2c_available>

080a2992 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2992:	2100      	movs	r1, #0
 80a2994:	7c00      	ldrb	r0, [r0, #16]
 80a2996:	f7ff bafd 	b.w	80a1f94 <hal_i2c_read>

080a299a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a299a:	2100      	movs	r1, #0
 80a299c:	7c00      	ldrb	r0, [r0, #16]
 80a299e:	f7ff bb01 	b.w	80a1fa4 <hal_i2c_peek>

080a29a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a29a2:	2100      	movs	r1, #0
 80a29a4:	7c00      	ldrb	r0, [r0, #16]
 80a29a6:	f7ff bb05 	b.w	80a1fb4 <hal_i2c_flush>

080a29aa <_ZN7TwoWireD0Ev>:
 80a29aa:	b510      	push	{r4, lr}
 80a29ac:	4604      	mov	r4, r0
 80a29ae:	2114      	movs	r1, #20
 80a29b0:	f7fd fb75 	bl	80a009e <_ZdlPvj>
 80a29b4:	4620      	mov	r0, r4
 80a29b6:	bd10      	pop	{r4, pc}

080a29b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a29b8:	b510      	push	{r4, lr}
 80a29ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a29be:	4604      	mov	r4, r0
 80a29c0:	4608      	mov	r0, r1
 80a29c2:	2100      	movs	r1, #0
 80a29c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a29c8:	4b03      	ldr	r3, [pc, #12]	; (80a29d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a29ca:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a29cc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a29ce:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a29d0:	f7ff fb00 	bl	80a1fd4 <hal_i2c_init>
}
 80a29d4:	4620      	mov	r0, r4
 80a29d6:	bd10      	pop	{r4, pc}
 80a29d8:	080a5014 	.word	0x080a5014

080a29dc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a29dc:	2300      	movs	r3, #0
 80a29de:	7c00      	ldrb	r0, [r0, #16]
 80a29e0:	461a      	mov	r2, r3
 80a29e2:	4619      	mov	r1, r3
 80a29e4:	f7ff baae 	b.w	80a1f44 <hal_i2c_begin>

080a29e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a29e8:	2200      	movs	r2, #0
 80a29ea:	7c00      	ldrb	r0, [r0, #16]
 80a29ec:	f7ff bab2 	b.w	80a1f54 <hal_i2c_begin_transmission>

080a29f0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a29f0:	b2c9      	uxtb	r1, r1
 80a29f2:	f7ff bff9 	b.w	80a29e8 <_ZN7TwoWire17beginTransmissionEh>

080a29f6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a29f6:	2200      	movs	r2, #0
 80a29f8:	7c00      	ldrb	r0, [r0, #16]
 80a29fa:	f7ff bab3 	b.w	80a1f64 <hal_i2c_end_transmission>

080a29fe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a29fe:	2101      	movs	r1, #1
 80a2a00:	f7ff bff9 	b.w	80a29f6 <_ZN7TwoWire15endTransmissionEh>

080a2a04 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2a04:	2200      	movs	r2, #0
 80a2a06:	6840      	ldr	r0, [r0, #4]
 80a2a08:	4611      	mov	r1, r2
 80a2a0a:	f7ff bb79 	b.w	80a2100 <network_ready>

080a2a0e <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a10:	4615      	mov	r5, r2
 80a2a12:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2a14:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2a16:	460e      	mov	r6, r1
 80a2a18:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2a1a:	2100      	movs	r1, #0
 80a2a1c:	a803      	add	r0, sp, #12
 80a2a1e:	f002 f9a1 	bl	80a4d64 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a22:	4628      	mov	r0, r5
 80a2a24:	f002 f9d4 	bl	80a4dd0 <strlen>
 80a2a28:	2700      	movs	r7, #0
 80a2a2a:	b281      	uxth	r1, r0
 80a2a2c:	6873      	ldr	r3, [r6, #4]
 80a2a2e:	4628      	mov	r0, r5
 80a2a30:	9700      	str	r7, [sp, #0]
 80a2a32:	aa03      	add	r2, sp, #12
 80a2a34:	f7ff fb20 	bl	80a2078 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2a38:	b130      	cbz	r0, 80a2a48 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2a3a:	4639      	mov	r1, r7
 80a2a3c:	4620      	mov	r0, r4
 80a2a3e:	f7ff fe53 	bl	80a26e8 <_ZN9IPAddressC1Em>
    }
 80a2a42:	4620      	mov	r0, r4
 80a2a44:	b009      	add	sp, #36	; 0x24
 80a2a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	a903      	add	r1, sp, #12
 80a2a4c:	f7ff fe3a 	bl	80a26c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2a50:	e7f7      	b.n	80a2a42 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2a52 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2a52:	2200      	movs	r2, #0
 80a2a54:	6840      	ldr	r0, [r0, #4]
 80a2a56:	4611      	mov	r1, r2
 80a2a58:	f7ff bb72 	b.w	80a2140 <network_listening>

080a2a5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2a5c:	2200      	movs	r2, #0
 80a2a5e:	6840      	ldr	r0, [r0, #4]
 80a2a60:	4611      	mov	r1, r2
 80a2a62:	f7ff bb7d 	b.w	80a2160 <network_get_listen_timeout>

080a2a66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2a66:	2200      	movs	r2, #0
 80a2a68:	6840      	ldr	r0, [r0, #4]
 80a2a6a:	f7ff bb71 	b.w	80a2150 <network_set_listen_timeout>

080a2a6e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2a6e:	2200      	movs	r2, #0
 80a2a70:	6840      	ldr	r0, [r0, #4]
 80a2a72:	f081 0101 	eor.w	r1, r1, #1
 80a2a76:	f7ff bb5b 	b.w	80a2130 <network_listen>

080a2a7a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2a7a:	2300      	movs	r3, #0
 80a2a7c:	6840      	ldr	r0, [r0, #4]
 80a2a7e:	461a      	mov	r2, r3
 80a2a80:	4619      	mov	r1, r3
 80a2a82:	f7ff bb4d 	b.w	80a2120 <network_off>

080a2a86 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2a86:	2300      	movs	r3, #0
 80a2a88:	6840      	ldr	r0, [r0, #4]
 80a2a8a:	461a      	mov	r2, r3
 80a2a8c:	4619      	mov	r1, r3
 80a2a8e:	f7ff bb3f 	b.w	80a2110 <network_on>

080a2a92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2a92:	2200      	movs	r2, #0
 80a2a94:	6840      	ldr	r0, [r0, #4]
 80a2a96:	4611      	mov	r1, r2
 80a2a98:	f7ff bb22 	b.w	80a20e0 <network_connecting>

080a2a9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2a9c:	2200      	movs	r2, #0
 80a2a9e:	2102      	movs	r1, #2
 80a2aa0:	6840      	ldr	r0, [r0, #4]
 80a2aa2:	f7ff bb25 	b.w	80a20f0 <network_disconnect>

080a2aa6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2aa6:	2300      	movs	r3, #0
 80a2aa8:	6840      	ldr	r0, [r0, #4]
 80a2aaa:	461a      	mov	r2, r3
 80a2aac:	f7ff bb10 	b.w	80a20d0 <network_connect>

080a2ab0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2ab0:	2204      	movs	r2, #4
 80a2ab2:	4b02      	ldr	r3, [pc, #8]	; (80a2abc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2ab4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2ab6:	4a02      	ldr	r2, [pc, #8]	; (80a2ac0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2ab8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2aba:	4770      	bx	lr
 80a2abc:	20000478 	.word	0x20000478
 80a2ac0:	080a503c 	.word	0x080a503c

080a2ac4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2ac4:	2300      	movs	r3, #0
 80a2ac6:	6840      	ldr	r0, [r0, #4]
 80a2ac8:	461a      	mov	r2, r3
 80a2aca:	f7ff bb01 	b.w	80a20d0 <network_connect>

080a2ace <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2ace:	2200      	movs	r2, #0
 80a2ad0:	2102      	movs	r1, #2
 80a2ad2:	6840      	ldr	r0, [r0, #4]
 80a2ad4:	f7ff bb0c 	b.w	80a20f0 <network_disconnect>

080a2ad8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ad8:	2200      	movs	r2, #0
 80a2ada:	6840      	ldr	r0, [r0, #4]
 80a2adc:	4611      	mov	r1, r2
 80a2ade:	f7ff baff 	b.w	80a20e0 <network_connecting>

080a2ae2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2ae2:	2200      	movs	r2, #0
 80a2ae4:	6840      	ldr	r0, [r0, #4]
 80a2ae6:	4611      	mov	r1, r2
 80a2ae8:	f7ff bb0a 	b.w	80a2100 <network_ready>

080a2aec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2aec:	2300      	movs	r3, #0
 80a2aee:	6840      	ldr	r0, [r0, #4]
 80a2af0:	461a      	mov	r2, r3
 80a2af2:	4619      	mov	r1, r3
 80a2af4:	f7ff bb0c 	b.w	80a2110 <network_on>

080a2af8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2af8:	2300      	movs	r3, #0
 80a2afa:	6840      	ldr	r0, [r0, #4]
 80a2afc:	461a      	mov	r2, r3
 80a2afe:	4619      	mov	r1, r3
 80a2b00:	f7ff bb0e 	b.w	80a2120 <network_off>

080a2b04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2b04:	2100      	movs	r1, #0
 80a2b06:	6840      	ldr	r0, [r0, #4]
 80a2b08:	f7ff bb32 	b.w	80a2170 <network_is_on>

080a2b0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2b0c:	2100      	movs	r1, #0
 80a2b0e:	6840      	ldr	r0, [r0, #4]
 80a2b10:	f7ff bb36 	b.w	80a2180 <network_is_off>

080a2b14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2b14:	2200      	movs	r2, #0
 80a2b16:	6840      	ldr	r0, [r0, #4]
 80a2b18:	f081 0101 	eor.w	r1, r1, #1
 80a2b1c:	f7ff bb08 	b.w	80a2130 <network_listen>

080a2b20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2b20:	2200      	movs	r2, #0
 80a2b22:	6840      	ldr	r0, [r0, #4]
 80a2b24:	f7ff bb14 	b.w	80a2150 <network_set_listen_timeout>

080a2b28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2b28:	2200      	movs	r2, #0
 80a2b2a:	6840      	ldr	r0, [r0, #4]
 80a2b2c:	4611      	mov	r1, r2
 80a2b2e:	f7ff bb17 	b.w	80a2160 <network_get_listen_timeout>

080a2b32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2b32:	2200      	movs	r2, #0
 80a2b34:	6840      	ldr	r0, [r0, #4]
 80a2b36:	4611      	mov	r1, r2
 80a2b38:	f7ff bb02 	b.w	80a2140 <network_listening>

080a2b3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2b3c:	b570      	push	{r4, r5, r6, lr}
 80a2b3e:	4615      	mov	r5, r2
 80a2b40:	b08e      	sub	sp, #56	; 0x38
 80a2b42:	4604      	mov	r4, r0
    IPAddress addr;
 80a2b44:	a808      	add	r0, sp, #32
 80a2b46:	f7ff fdaf 	bl	80a26a8 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2b4a:	2211      	movs	r2, #17
 80a2b4c:	2100      	movs	r1, #0
 80a2b4e:	a803      	add	r0, sp, #12
 80a2b50:	f002 f908 	bl	80a4d64 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2b54:	2600      	movs	r6, #0
 80a2b56:	4628      	mov	r0, r5
 80a2b58:	f002 f93a 	bl	80a4dd0 <strlen>
 80a2b5c:	4b0a      	ldr	r3, [pc, #40]	; (80a2b88 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2b5e:	9600      	str	r6, [sp, #0]
 80a2b60:	b281      	uxth	r1, r0
 80a2b62:	685b      	ldr	r3, [r3, #4]
 80a2b64:	4628      	mov	r0, r5
 80a2b66:	aa03      	add	r2, sp, #12
 80a2b68:	f7ff fa86 	bl	80a2078 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b6c:	b130      	cbz	r0, 80a2b7c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2b6e:	4631      	mov	r1, r6
 80a2b70:	4620      	mov	r0, r4
 80a2b72:	f7ff fdb9 	bl	80a26e8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2b76:	4620      	mov	r0, r4
 80a2b78:	b00e      	add	sp, #56	; 0x38
 80a2b7a:	bd70      	pop	{r4, r5, r6, pc}
 80a2b7c:	4620      	mov	r0, r4
 80a2b7e:	a903      	add	r1, sp, #12
 80a2b80:	f7ff fda0 	bl	80a26c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2b84:	e7f7      	b.n	80a2b76 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2b86:	bf00      	nop
 80a2b88:	20000478 	.word	0x20000478

080a2b8c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2b8c:	4b02      	ldr	r3, [pc, #8]	; (80a2b98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2b8e:	4a03      	ldr	r2, [pc, #12]	; (80a2b9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2b90:	601a      	str	r2, [r3, #0]
 80a2b92:	2200      	movs	r2, #0
 80a2b94:	605a      	str	r2, [r3, #4]

} // spark
 80a2b96:	4770      	bx	lr
 80a2b98:	20000480 	.word	0x20000480
 80a2b9c:	080a5078 	.word	0x080a5078

080a2ba0 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2ba0:	4b02      	ldr	r3, [pc, #8]	; (80a2bac <__tcf_0+0xc>)
 80a2ba2:	6898      	ldr	r0, [r3, #8]
 80a2ba4:	b108      	cbz	r0, 80a2baa <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2ba6:	f7ff b985 	b.w	80a1eb4 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2baa:	4770      	bx	lr
 80a2bac:	2000048c 	.word	0x2000048c

080a2bb0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2bb0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2bb2:	b570      	push	{r4, r5, r6, lr}
 80a2bb4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2bb6:	d901      	bls.n	80a2bbc <pinAvailable+0xc>
    return false;
 80a2bb8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2bba:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2bbc:	f1a0 030d 	sub.w	r3, r0, #13
 80a2bc0:	2b02      	cmp	r3, #2
 80a2bc2:	d90b      	bls.n	80a2bdc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2bc4:	2801      	cmp	r0, #1
 80a2bc6:	d824      	bhi.n	80a2c12 <pinAvailable+0x62>
 80a2bc8:	f000 f8ee 	bl	80a2da8 <_Z19__fetch_global_Wirev>
 80a2bcc:	2100      	movs	r1, #0
 80a2bce:	7c00      	ldrb	r0, [r0, #16]
 80a2bd0:	f7ff f9f8 	bl	80a1fc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2bd4:	f080 0001 	eor.w	r0, r0, #1
 80a2bd8:	b2c0      	uxtb	r0, r0
 80a2bda:	e7ee      	b.n	80a2bba <pinAvailable+0xa>
 80a2bdc:	4e12      	ldr	r6, [pc, #72]	; (80a2c28 <pinAvailable+0x78>)
 80a2bde:	7831      	ldrb	r1, [r6, #0]
 80a2be0:	f3bf 8f5b 	dmb	ish
 80a2be4:	f011 0501 	ands.w	r5, r1, #1
 80a2be8:	d10d      	bne.n	80a2c06 <pinAvailable+0x56>
 80a2bea:	4630      	mov	r0, r6
 80a2bec:	f7fd fa59 	bl	80a00a2 <__cxa_guard_acquire>
 80a2bf0:	b148      	cbz	r0, 80a2c06 <pinAvailable+0x56>
 80a2bf2:	4629      	mov	r1, r5
 80a2bf4:	480d      	ldr	r0, [pc, #52]	; (80a2c2c <pinAvailable+0x7c>)
 80a2bf6:	f7ff fb03 	bl	80a2200 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2bfa:	4630      	mov	r0, r6
 80a2bfc:	f7fd fa56 	bl	80a00ac <__cxa_guard_release>
 80a2c00:	480b      	ldr	r0, [pc, #44]	; (80a2c30 <pinAvailable+0x80>)
 80a2c02:	f002 f89b 	bl	80a4d3c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2c06:	4b09      	ldr	r3, [pc, #36]	; (80a2c2c <pinAvailable+0x7c>)
 80a2c08:	7818      	ldrb	r0, [r3, #0]
 80a2c0a:	f7ff f9f5 	bl	80a1ff8 <hal_spi_is_enabled>
 80a2c0e:	2800      	cmp	r0, #0
 80a2c10:	d1d2      	bne.n	80a2bb8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2c12:	3c12      	subs	r4, #18
 80a2c14:	2c01      	cmp	r4, #1
 80a2c16:	d805      	bhi.n	80a2c24 <pinAvailable+0x74>
 80a2c18:	f000 f87c 	bl	80a2d14 <_Z22__fetch_global_Serial1v>
 80a2c1c:	7c00      	ldrb	r0, [r0, #16]
 80a2c1e:	f7ff f979 	bl	80a1f14 <hal_usart_is_enabled>
 80a2c22:	e7d7      	b.n	80a2bd4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2c24:	2001      	movs	r0, #1
 80a2c26:	e7c8      	b.n	80a2bba <pinAvailable+0xa>
 80a2c28:	20000488 	.word	0x20000488
 80a2c2c:	2000048c 	.word	0x2000048c
 80a2c30:	080a2ba1 	.word	0x080a2ba1

080a2c34 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2c34:	2817      	cmp	r0, #23
{
 80a2c36:	b538      	push	{r3, r4, r5, lr}
 80a2c38:	4604      	mov	r4, r0
 80a2c3a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2c3c:	d80a      	bhi.n	80a2c54 <pinMode+0x20>
 80a2c3e:	29ff      	cmp	r1, #255	; 0xff
 80a2c40:	d008      	beq.n	80a2c54 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2c42:	f7ff ffb5 	bl	80a2bb0 <pinAvailable>
 80a2c46:	b128      	cbz	r0, 80a2c54 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2c48:	4629      	mov	r1, r5
 80a2c4a:	4620      	mov	r0, r4
}
 80a2c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2c50:	f7ff b8e0 	b.w	80a1e14 <HAL_Pin_Mode>
}
 80a2c54:	bd38      	pop	{r3, r4, r5, pc}

080a2c56 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2c56:	b538      	push	{r3, r4, r5, lr}
 80a2c58:	4604      	mov	r4, r0
 80a2c5a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2c5c:	f7ff f8e2 	bl	80a1e24 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2c60:	28ff      	cmp	r0, #255	; 0xff
 80a2c62:	d010      	beq.n	80a2c86 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2c64:	2806      	cmp	r0, #6
 80a2c66:	d804      	bhi.n	80a2c72 <digitalWrite+0x1c>
 80a2c68:	234d      	movs	r3, #77	; 0x4d
 80a2c6a:	fa23 f000 	lsr.w	r0, r3, r0
 80a2c6e:	07c3      	lsls	r3, r0, #31
 80a2c70:	d409      	bmi.n	80a2c86 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2c72:	4620      	mov	r0, r4
 80a2c74:	f7ff ff9c 	bl	80a2bb0 <pinAvailable>
 80a2c78:	b128      	cbz	r0, 80a2c86 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2c7a:	4629      	mov	r1, r5
 80a2c7c:	4620      	mov	r0, r4
}
 80a2c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2c82:	f7ff b8d7 	b.w	80a1e34 <HAL_GPIO_Write>
}
 80a2c86:	bd38      	pop	{r3, r4, r5, pc}

080a2c88 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2c88:	b510      	push	{r4, lr}
 80a2c8a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2c8c:	f7ff f8ca 	bl	80a1e24 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2c90:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2c92:	b2db      	uxtb	r3, r3
 80a2c94:	2b01      	cmp	r3, #1
 80a2c96:	d908      	bls.n	80a2caa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2c98:	4620      	mov	r0, r4
 80a2c9a:	f7ff ff89 	bl	80a2bb0 <pinAvailable>
 80a2c9e:	b120      	cbz	r0, 80a2caa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2ca0:	4620      	mov	r0, r4
}
 80a2ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2ca6:	f7ff b8cd 	b.w	80a1e44 <HAL_GPIO_Read>
}
 80a2caa:	2000      	movs	r0, #0
 80a2cac:	bd10      	pop	{r4, pc}

080a2cae <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2cae:	b510      	push	{r4, lr}
 80a2cb0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a2cb2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2cb4:	bf9c      	itt	ls
 80a2cb6:	340a      	addls	r4, #10
 80a2cb8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2cba:	4620      	mov	r0, r4
 80a2cbc:	f7ff ff78 	bl	80a2bb0 <pinAvailable>
 80a2cc0:	b150      	cbz	r0, 80a2cd8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2cc2:	2103      	movs	r1, #3
 80a2cc4:	4620      	mov	r0, r4
 80a2cc6:	f7ff f89d 	bl	80a1e04 <HAL_Validate_Pin_Function>
 80a2cca:	2803      	cmp	r0, #3
 80a2ccc:	d104      	bne.n	80a2cd8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a2cce:	4620      	mov	r0, r4
}
 80a2cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a2cd4:	f7ff b8be 	b.w	80a1e54 <hal_adc_read>
}
 80a2cd8:	2000      	movs	r0, #0
 80a2cda:	bd10      	pop	{r4, pc}

080a2cdc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2cdc:	4770      	bx	lr
	...

080a2ce0 <_Z20acquireSerial1Bufferv>:
{
 80a2ce0:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2ce2:	2514      	movs	r5, #20
{
 80a2ce4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a2ce6:	462a      	mov	r2, r5
 80a2ce8:	2100      	movs	r1, #0
 80a2cea:	f002 f83b 	bl	80a4d64 <memset>
 80a2cee:	8025      	strh	r5, [r4, #0]
 80a2cf0:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2cf2:	4e07      	ldr	r6, [pc, #28]	; (80a2d10 <_Z20acquireSerial1Bufferv+0x30>)
 80a2cf4:	4628      	mov	r0, r5
 80a2cf6:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a2cf8:	8125      	strh	r5, [r4, #8]
 80a2cfa:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2cfc:	f000 f878 	bl	80a2df0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d00:	4631      	mov	r1, r6
    };
 80a2d02:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d04:	4628      	mov	r0, r5
 80a2d06:	f000 f873 	bl	80a2df0 <_ZnajRKSt9nothrow_t>
    };
 80a2d0a:	60e0      	str	r0, [r4, #12]
}
 80a2d0c:	4620      	mov	r0, r4
 80a2d0e:	bd70      	pop	{r4, r5, r6, pc}
 80a2d10:	080a50ac 	.word	0x080a50ac

080a2d14 <_Z22__fetch_global_Serial1v>:
{
 80a2d14:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2d16:	4d0e      	ldr	r5, [pc, #56]	; (80a2d50 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2d18:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2d1a:	7829      	ldrb	r1, [r5, #0]
 80a2d1c:	f3bf 8f5b 	dmb	ish
 80a2d20:	f011 0401 	ands.w	r4, r1, #1
 80a2d24:	d111      	bne.n	80a2d4a <_Z22__fetch_global_Serial1v+0x36>
 80a2d26:	4628      	mov	r0, r5
 80a2d28:	f7fd f9bb 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d2c:	b168      	cbz	r0, 80a2d4a <_Z22__fetch_global_Serial1v+0x36>
 80a2d2e:	a801      	add	r0, sp, #4
 80a2d30:	f7ff ffd6 	bl	80a2ce0 <_Z20acquireSerial1Bufferv>
 80a2d34:	4621      	mov	r1, r4
 80a2d36:	aa01      	add	r2, sp, #4
 80a2d38:	4806      	ldr	r0, [pc, #24]	; (80a2d54 <_Z22__fetch_global_Serial1v+0x40>)
 80a2d3a:	f7ff fdfd 	bl	80a2938 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2d3e:	4628      	mov	r0, r5
 80a2d40:	f7fd f9b4 	bl	80a00ac <__cxa_guard_release>
 80a2d44:	4804      	ldr	r0, [pc, #16]	; (80a2d58 <_Z22__fetch_global_Serial1v+0x44>)
 80a2d46:	f001 fff9 	bl	80a4d3c <atexit>
    return serial1;
}
 80a2d4a:	4802      	ldr	r0, [pc, #8]	; (80a2d54 <_Z22__fetch_global_Serial1v+0x40>)
 80a2d4c:	b007      	add	sp, #28
 80a2d4e:	bd30      	pop	{r4, r5, pc}
 80a2d50:	20000498 	.word	0x20000498
 80a2d54:	2000049c 	.word	0x2000049c
 80a2d58:	080a2cdd 	.word	0x080a2cdd

080a2d5c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2d5c:	2300      	movs	r3, #0
 80a2d5e:	b507      	push	{r0, r1, r2, lr}
 80a2d60:	461a      	mov	r2, r3
 80a2d62:	4619      	mov	r1, r3
 80a2d64:	9300      	str	r3, [sp, #0]
 80a2d66:	4803      	ldr	r0, [pc, #12]	; (80a2d74 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2d68:	f7ff fcd4 	bl	80a2714 <_ZN9IPAddressC1Ehhhh>
 80a2d6c:	b003      	add	sp, #12
 80a2d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2d72:	bf00      	nop
 80a2d74:	200004b4 	.word	0x200004b4

080a2d78 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2d78:	4770      	bx	lr
	...

080a2d7c <_Z17acquireWireBufferv>:
{
 80a2d7c:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2d7e:	2314      	movs	r3, #20
 80a2d80:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d82:	4e08      	ldr	r6, [pc, #32]	; (80a2da4 <_Z17acquireWireBufferv+0x28>)
{
 80a2d84:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2d86:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d88:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2d8a:	6085      	str	r5, [r0, #8]
 80a2d8c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d8e:	4628      	mov	r0, r5
 80a2d90:	f000 f82e 	bl	80a2df0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d94:	4631      	mov	r1, r6
	};
 80a2d96:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2d98:	4628      	mov	r0, r5
 80a2d9a:	f000 f829 	bl	80a2df0 <_ZnajRKSt9nothrow_t>
	};
 80a2d9e:	60e0      	str	r0, [r4, #12]
}
 80a2da0:	4620      	mov	r0, r4
 80a2da2:	bd70      	pop	{r4, r5, r6, pc}
 80a2da4:	080a50ac 	.word	0x080a50ac

080a2da8 <_Z19__fetch_global_Wirev>:
{
 80a2da8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2daa:	4d0e      	ldr	r5, [pc, #56]	; (80a2de4 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2dac:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2dae:	7829      	ldrb	r1, [r5, #0]
 80a2db0:	f3bf 8f5b 	dmb	ish
 80a2db4:	f011 0401 	ands.w	r4, r1, #1
 80a2db8:	d111      	bne.n	80a2dde <_Z19__fetch_global_Wirev+0x36>
 80a2dba:	4628      	mov	r0, r5
 80a2dbc:	f7fd f971 	bl	80a00a2 <__cxa_guard_acquire>
 80a2dc0:	b168      	cbz	r0, 80a2dde <_Z19__fetch_global_Wirev+0x36>
 80a2dc2:	a801      	add	r0, sp, #4
 80a2dc4:	f7ff ffda 	bl	80a2d7c <_Z17acquireWireBufferv>
 80a2dc8:	4621      	mov	r1, r4
 80a2dca:	aa01      	add	r2, sp, #4
 80a2dcc:	4806      	ldr	r0, [pc, #24]	; (80a2de8 <_Z19__fetch_global_Wirev+0x40>)
 80a2dce:	f7ff fdf3 	bl	80a29b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2dd2:	4628      	mov	r0, r5
 80a2dd4:	f7fd f96a 	bl	80a00ac <__cxa_guard_release>
 80a2dd8:	4804      	ldr	r0, [pc, #16]	; (80a2dec <_Z19__fetch_global_Wirev+0x44>)
 80a2dda:	f001 ffaf 	bl	80a4d3c <atexit>
	return wire;
}
 80a2dde:	4802      	ldr	r0, [pc, #8]	; (80a2de8 <_Z19__fetch_global_Wirev+0x40>)
 80a2de0:	b007      	add	sp, #28
 80a2de2:	bd30      	pop	{r4, r5, pc}
 80a2de4:	200004cc 	.word	0x200004cc
 80a2de8:	200004d0 	.word	0x200004d0
 80a2dec:	080a2d79 	.word	0x080a2d79

080a2df0 <_ZnajRKSt9nothrow_t>:
 80a2df0:	f7fd b953 	b.w	80a009a <_Znaj>

080a2df4 <pow>:
 80a2df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2df8:	461d      	mov	r5, r3
 80a2dfa:	4606      	mov	r6, r0
 80a2dfc:	460f      	mov	r7, r1
 80a2dfe:	4614      	mov	r4, r2
 80a2e00:	f000 f8ba 	bl	80a2f78 <__ieee754_pow>
 80a2e04:	4b57      	ldr	r3, [pc, #348]	; (80a2f64 <pow+0x170>)
 80a2e06:	4680      	mov	r8, r0
 80a2e08:	f993 3000 	ldrsb.w	r3, [r3]
 80a2e0c:	4689      	mov	r9, r1
 80a2e0e:	3301      	adds	r3, #1
 80a2e10:	d02a      	beq.n	80a2e68 <pow+0x74>
 80a2e12:	4622      	mov	r2, r4
 80a2e14:	462b      	mov	r3, r5
 80a2e16:	4620      	mov	r0, r4
 80a2e18:	4629      	mov	r1, r5
 80a2e1a:	f001 fc5d 	bl	80a46d8 <__aeabi_dcmpun>
 80a2e1e:	bb18      	cbnz	r0, 80a2e68 <pow+0x74>
 80a2e20:	4632      	mov	r2, r6
 80a2e22:	463b      	mov	r3, r7
 80a2e24:	4630      	mov	r0, r6
 80a2e26:	4639      	mov	r1, r7
 80a2e28:	f001 fc56 	bl	80a46d8 <__aeabi_dcmpun>
 80a2e2c:	2800      	cmp	r0, #0
 80a2e2e:	d141      	bne.n	80a2eb4 <pow+0xc0>
 80a2e30:	2200      	movs	r2, #0
 80a2e32:	2300      	movs	r3, #0
 80a2e34:	4630      	mov	r0, r6
 80a2e36:	4639      	mov	r1, r7
 80a2e38:	f001 fc1c 	bl	80a4674 <__aeabi_dcmpeq>
 80a2e3c:	b1c0      	cbz	r0, 80a2e70 <pow+0x7c>
 80a2e3e:	2200      	movs	r2, #0
 80a2e40:	2300      	movs	r3, #0
 80a2e42:	4620      	mov	r0, r4
 80a2e44:	4629      	mov	r1, r5
 80a2e46:	f001 fc15 	bl	80a4674 <__aeabi_dcmpeq>
 80a2e4a:	2800      	cmp	r0, #0
 80a2e4c:	d13a      	bne.n	80a2ec4 <pow+0xd0>
 80a2e4e:	4620      	mov	r0, r4
 80a2e50:	4629      	mov	r1, r5
 80a2e52:	f000 fec3 	bl	80a3bdc <finite>
 80a2e56:	b138      	cbz	r0, 80a2e68 <pow+0x74>
 80a2e58:	4620      	mov	r0, r4
 80a2e5a:	4629      	mov	r1, r5
 80a2e5c:	2200      	movs	r2, #0
 80a2e5e:	2300      	movs	r3, #0
 80a2e60:	f001 fc12 	bl	80a4688 <__aeabi_dcmplt>
 80a2e64:	2800      	cmp	r0, #0
 80a2e66:	d159      	bne.n	80a2f1c <pow+0x128>
 80a2e68:	4640      	mov	r0, r8
 80a2e6a:	4649      	mov	r1, r9
 80a2e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2e70:	4640      	mov	r0, r8
 80a2e72:	4649      	mov	r1, r9
 80a2e74:	f000 feb2 	bl	80a3bdc <finite>
 80a2e78:	b360      	cbz	r0, 80a2ed4 <pow+0xe0>
 80a2e7a:	2200      	movs	r2, #0
 80a2e7c:	2300      	movs	r3, #0
 80a2e7e:	4640      	mov	r0, r8
 80a2e80:	4649      	mov	r1, r9
 80a2e82:	f001 fbf7 	bl	80a4674 <__aeabi_dcmpeq>
 80a2e86:	2800      	cmp	r0, #0
 80a2e88:	d0ee      	beq.n	80a2e68 <pow+0x74>
 80a2e8a:	4630      	mov	r0, r6
 80a2e8c:	4639      	mov	r1, r7
 80a2e8e:	f000 fea5 	bl	80a3bdc <finite>
 80a2e92:	2800      	cmp	r0, #0
 80a2e94:	d0e8      	beq.n	80a2e68 <pow+0x74>
 80a2e96:	4620      	mov	r0, r4
 80a2e98:	4629      	mov	r1, r5
 80a2e9a:	f000 fe9f 	bl	80a3bdc <finite>
 80a2e9e:	2800      	cmp	r0, #0
 80a2ea0:	d0e2      	beq.n	80a2e68 <pow+0x74>
 80a2ea2:	f7ff f995 	bl	80a21d0 <__errno>
 80a2ea6:	2322      	movs	r3, #34	; 0x22
 80a2ea8:	f04f 0800 	mov.w	r8, #0
 80a2eac:	f04f 0900 	mov.w	r9, #0
 80a2eb0:	6003      	str	r3, [r0, #0]
 80a2eb2:	e7d9      	b.n	80a2e68 <pow+0x74>
 80a2eb4:	4620      	mov	r0, r4
 80a2eb6:	4629      	mov	r1, r5
 80a2eb8:	2200      	movs	r2, #0
 80a2eba:	2300      	movs	r3, #0
 80a2ebc:	f001 fbda 	bl	80a4674 <__aeabi_dcmpeq>
 80a2ec0:	2800      	cmp	r0, #0
 80a2ec2:	d0d1      	beq.n	80a2e68 <pow+0x74>
 80a2ec4:	f04f 0800 	mov.w	r8, #0
 80a2ec8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80a2f68 <pow+0x174>
 80a2ecc:	4640      	mov	r0, r8
 80a2ece:	4649      	mov	r1, r9
 80a2ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2ed4:	4630      	mov	r0, r6
 80a2ed6:	4639      	mov	r1, r7
 80a2ed8:	f000 fe80 	bl	80a3bdc <finite>
 80a2edc:	2800      	cmp	r0, #0
 80a2ede:	d0cc      	beq.n	80a2e7a <pow+0x86>
 80a2ee0:	4620      	mov	r0, r4
 80a2ee2:	4629      	mov	r1, r5
 80a2ee4:	f000 fe7a 	bl	80a3bdc <finite>
 80a2ee8:	2800      	cmp	r0, #0
 80a2eea:	d0c6      	beq.n	80a2e7a <pow+0x86>
 80a2eec:	4642      	mov	r2, r8
 80a2eee:	464b      	mov	r3, r9
 80a2ef0:	4640      	mov	r0, r8
 80a2ef2:	4649      	mov	r1, r9
 80a2ef4:	f001 fbf0 	bl	80a46d8 <__aeabi_dcmpun>
 80a2ef8:	bb30      	cbnz	r0, 80a2f48 <pow+0x154>
 80a2efa:	f7ff f969 	bl	80a21d0 <__errno>
 80a2efe:	2222      	movs	r2, #34	; 0x22
 80a2f00:	4603      	mov	r3, r0
 80a2f02:	4639      	mov	r1, r7
 80a2f04:	601a      	str	r2, [r3, #0]
 80a2f06:	4630      	mov	r0, r6
 80a2f08:	2200      	movs	r2, #0
 80a2f0a:	2300      	movs	r3, #0
 80a2f0c:	f001 fbbc 	bl	80a4688 <__aeabi_dcmplt>
 80a2f10:	f04f 0800 	mov.w	r8, #0
 80a2f14:	b958      	cbnz	r0, 80a2f2e <pow+0x13a>
 80a2f16:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a2f6c <pow+0x178>
 80a2f1a:	e7a5      	b.n	80a2e68 <pow+0x74>
 80a2f1c:	f7ff f958 	bl	80a21d0 <__errno>
 80a2f20:	2321      	movs	r3, #33	; 0x21
 80a2f22:	f04f 0800 	mov.w	r8, #0
 80a2f26:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80a2f70 <pow+0x17c>
 80a2f2a:	6003      	str	r3, [r0, #0]
 80a2f2c:	e79c      	b.n	80a2e68 <pow+0x74>
 80a2f2e:	4620      	mov	r0, r4
 80a2f30:	4629      	mov	r1, r5
 80a2f32:	f000 fe5f 	bl	80a3bf4 <rint>
 80a2f36:	4622      	mov	r2, r4
 80a2f38:	462b      	mov	r3, r5
 80a2f3a:	f001 fb9b 	bl	80a4674 <__aeabi_dcmpeq>
 80a2f3e:	2800      	cmp	r0, #0
 80a2f40:	d1e9      	bne.n	80a2f16 <pow+0x122>
 80a2f42:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80a2f70 <pow+0x17c>
 80a2f46:	e78f      	b.n	80a2e68 <pow+0x74>
 80a2f48:	f7ff f942 	bl	80a21d0 <__errno>
 80a2f4c:	2200      	movs	r2, #0
 80a2f4e:	2300      	movs	r3, #0
 80a2f50:	2121      	movs	r1, #33	; 0x21
 80a2f52:	6001      	str	r1, [r0, #0]
 80a2f54:	4610      	mov	r0, r2
 80a2f56:	4619      	mov	r1, r3
 80a2f58:	f001 fa4e 	bl	80a43f8 <__aeabi_ddiv>
 80a2f5c:	4680      	mov	r8, r0
 80a2f5e:	4689      	mov	r9, r1
 80a2f60:	e782      	b.n	80a2e68 <pow+0x74>
 80a2f62:	bf00      	nop
 80a2f64:	2000000c 	.word	0x2000000c
 80a2f68:	3ff00000 	.word	0x3ff00000
 80a2f6c:	7ff00000 	.word	0x7ff00000
 80a2f70:	fff00000 	.word	0xfff00000
 80a2f74:	00000000 	.word	0x00000000

080a2f78 <__ieee754_pow>:
 80a2f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f7c:	4699      	mov	r9, r3
 80a2f7e:	4690      	mov	r8, r2
 80a2f80:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 80a2f84:	461e      	mov	r6, r3
 80a2f86:	4613      	mov	r3, r2
 80a2f88:	ea55 0208 	orrs.w	r2, r5, r8
 80a2f8c:	b093      	sub	sp, #76	; 0x4c
 80a2f8e:	d035      	beq.n	80a2ffc <__ieee754_pow+0x84>
 80a2f90:	4a6b      	ldr	r2, [pc, #428]	; (80a3140 <__ieee754_pow+0x1c8>)
 80a2f92:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a2f96:	4294      	cmp	r4, r2
 80a2f98:	4683      	mov	fp, r0
 80a2f9a:	468a      	mov	sl, r1
 80a2f9c:	460f      	mov	r7, r1
 80a2f9e:	9000      	str	r0, [sp, #0]
 80a2fa0:	dc25      	bgt.n	80a2fee <__ieee754_pow+0x76>
 80a2fa2:	d034      	beq.n	80a300e <__ieee754_pow+0x96>
 80a2fa4:	4295      	cmp	r5, r2
 80a2fa6:	dc22      	bgt.n	80a2fee <__ieee754_pow+0x76>
 80a2fa8:	4a65      	ldr	r2, [pc, #404]	; (80a3140 <__ieee754_pow+0x1c8>)
 80a2faa:	4295      	cmp	r5, r2
 80a2fac:	d01d      	beq.n	80a2fea <__ieee754_pow+0x72>
 80a2fae:	2f00      	cmp	r7, #0
 80a2fb0:	db36      	blt.n	80a3020 <__ieee754_pow+0xa8>
 80a2fb2:	2200      	movs	r2, #0
 80a2fb4:	9202      	str	r2, [sp, #8]
 80a2fb6:	2b00      	cmp	r3, #0
 80a2fb8:	d14c      	bne.n	80a3054 <__ieee754_pow+0xdc>
 80a2fba:	4b61      	ldr	r3, [pc, #388]	; (80a3140 <__ieee754_pow+0x1c8>)
 80a2fbc:	429d      	cmp	r5, r3
 80a2fbe:	f000 8097 	beq.w	80a30f0 <__ieee754_pow+0x178>
 80a2fc2:	4b60      	ldr	r3, [pc, #384]	; (80a3144 <__ieee754_pow+0x1cc>)
 80a2fc4:	429d      	cmp	r5, r3
 80a2fc6:	f000 80a5 	beq.w	80a3114 <__ieee754_pow+0x19c>
 80a2fca:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80a2fce:	f000 84a3 	beq.w	80a3918 <__ieee754_pow+0x9a0>
 80a2fd2:	4b5d      	ldr	r3, [pc, #372]	; (80a3148 <__ieee754_pow+0x1d0>)
 80a2fd4:	429e      	cmp	r6, r3
 80a2fd6:	d13d      	bne.n	80a3054 <__ieee754_pow+0xdc>
 80a2fd8:	2f00      	cmp	r7, #0
 80a2fda:	db3b      	blt.n	80a3054 <__ieee754_pow+0xdc>
 80a2fdc:	4658      	mov	r0, fp
 80a2fde:	4651      	mov	r1, sl
 80a2fe0:	b013      	add	sp, #76	; 0x4c
 80a2fe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2fe6:	f000 bd2f 	b.w	80a3a48 <__ieee754_sqrt>
 80a2fea:	2b00      	cmp	r3, #0
 80a2fec:	d0df      	beq.n	80a2fae <__ieee754_pow+0x36>
 80a2fee:	9b00      	ldr	r3, [sp, #0]
 80a2ff0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a2ff4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a2ff8:	4323      	orrs	r3, r4
 80a2ffa:	d10b      	bne.n	80a3014 <__ieee754_pow+0x9c>
 80a2ffc:	2300      	movs	r3, #0
 80a2ffe:	4c51      	ldr	r4, [pc, #324]	; (80a3144 <__ieee754_pow+0x1cc>)
 80a3000:	e9cd 3400 	strd	r3, r4, [sp]
 80a3004:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3008:	b013      	add	sp, #76	; 0x4c
 80a300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a300e:	b908      	cbnz	r0, 80a3014 <__ieee754_pow+0x9c>
 80a3010:	42a5      	cmp	r5, r4
 80a3012:	ddc9      	ble.n	80a2fa8 <__ieee754_pow+0x30>
 80a3014:	484d      	ldr	r0, [pc, #308]	; (80a314c <__ieee754_pow+0x1d4>)
 80a3016:	b013      	add	sp, #76	; 0x4c
 80a3018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a301c:	f000 bde4 	b.w	80a3be8 <nan>
 80a3020:	4a4b      	ldr	r2, [pc, #300]	; (80a3150 <__ieee754_pow+0x1d8>)
 80a3022:	4295      	cmp	r5, r2
 80a3024:	dc7e      	bgt.n	80a3124 <__ieee754_pow+0x1ac>
 80a3026:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 80a302a:	4295      	cmp	r5, r2
 80a302c:	dd0e      	ble.n	80a304c <__ieee754_pow+0xd4>
 80a302e:	152a      	asrs	r2, r5, #20
 80a3030:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a3034:	2a14      	cmp	r2, #20
 80a3036:	f340 8479 	ble.w	80a392c <__ieee754_pow+0x9b4>
 80a303a:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 80a303e:	fa23 f102 	lsr.w	r1, r3, r2
 80a3042:	fa01 f202 	lsl.w	r2, r1, r2
 80a3046:	429a      	cmp	r2, r3
 80a3048:	f000 84c5 	beq.w	80a39d6 <__ieee754_pow+0xa5e>
 80a304c:	2200      	movs	r2, #0
 80a304e:	9202      	str	r2, [sp, #8]
 80a3050:	2b00      	cmp	r3, #0
 80a3052:	d0b6      	beq.n	80a2fc2 <__ieee754_pow+0x4a>
 80a3054:	4658      	mov	r0, fp
 80a3056:	4651      	mov	r1, sl
 80a3058:	f000 fdbc 	bl	80a3bd4 <fabs>
 80a305c:	465b      	mov	r3, fp
 80a305e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3062:	bb33      	cbnz	r3, 80a30b2 <__ieee754_pow+0x13a>
 80a3064:	b124      	cbz	r4, 80a3070 <__ieee754_pow+0xf8>
 80a3066:	4b37      	ldr	r3, [pc, #220]	; (80a3144 <__ieee754_pow+0x1cc>)
 80a3068:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 80a306c:	429a      	cmp	r2, r3
 80a306e:	d120      	bne.n	80a30b2 <__ieee754_pow+0x13a>
 80a3070:	2e00      	cmp	r6, #0
 80a3072:	da07      	bge.n	80a3084 <__ieee754_pow+0x10c>
 80a3074:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3078:	2000      	movs	r0, #0
 80a307a:	4932      	ldr	r1, [pc, #200]	; (80a3144 <__ieee754_pow+0x1cc>)
 80a307c:	f001 f9bc 	bl	80a43f8 <__aeabi_ddiv>
 80a3080:	e9cd 0100 	strd	r0, r1, [sp]
 80a3084:	2f00      	cmp	r7, #0
 80a3086:	dabd      	bge.n	80a3004 <__ieee754_pow+0x8c>
 80a3088:	9b02      	ldr	r3, [sp, #8]
 80a308a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a308e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a3092:	4323      	orrs	r3, r4
 80a3094:	f040 846f 	bne.w	80a3976 <__ieee754_pow+0x9fe>
 80a3098:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a309c:	4610      	mov	r0, r2
 80a309e:	4619      	mov	r1, r3
 80a30a0:	f000 fec8 	bl	80a3e34 <__aeabi_dsub>
 80a30a4:	4602      	mov	r2, r0
 80a30a6:	460b      	mov	r3, r1
 80a30a8:	f001 f9a6 	bl	80a43f8 <__aeabi_ddiv>
 80a30ac:	e9cd 0100 	strd	r0, r1, [sp]
 80a30b0:	e7a8      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a30b2:	9a02      	ldr	r2, [sp, #8]
 80a30b4:	0ffb      	lsrs	r3, r7, #31
 80a30b6:	3b01      	subs	r3, #1
 80a30b8:	930a      	str	r3, [sp, #40]	; 0x28
 80a30ba:	4313      	orrs	r3, r2
 80a30bc:	d035      	beq.n	80a312a <__ieee754_pow+0x1b2>
 80a30be:	4b25      	ldr	r3, [pc, #148]	; (80a3154 <__ieee754_pow+0x1dc>)
 80a30c0:	429d      	cmp	r5, r3
 80a30c2:	dd4b      	ble.n	80a315c <__ieee754_pow+0x1e4>
 80a30c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a30c8:	429d      	cmp	r5, r3
 80a30ca:	4b23      	ldr	r3, [pc, #140]	; (80a3158 <__ieee754_pow+0x1e0>)
 80a30cc:	f340 83bc 	ble.w	80a3848 <__ieee754_pow+0x8d0>
 80a30d0:	429c      	cmp	r4, r3
 80a30d2:	f340 834f 	ble.w	80a3774 <__ieee754_pow+0x7fc>
 80a30d6:	2e00      	cmp	r6, #0
 80a30d8:	f340 834f 	ble.w	80a377a <__ieee754_pow+0x802>
 80a30dc:	a316      	add	r3, pc, #88	; (adr r3, 80a3138 <__ieee754_pow+0x1c0>)
 80a30de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a30e2:	4610      	mov	r0, r2
 80a30e4:	4619      	mov	r1, r3
 80a30e6:	f001 f85d 	bl	80a41a4 <__aeabi_dmul>
 80a30ea:	e9cd 0100 	strd	r0, r1, [sp]
 80a30ee:	e789      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a30f0:	9a00      	ldr	r2, [sp, #0]
 80a30f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80a30f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a30fa:	4313      	orrs	r3, r2
 80a30fc:	f43f af7e 	beq.w	80a2ffc <__ieee754_pow+0x84>
 80a3100:	4b15      	ldr	r3, [pc, #84]	; (80a3158 <__ieee754_pow+0x1e0>)
 80a3102:	429c      	cmp	r4, r3
 80a3104:	f340 8363 	ble.w	80a37ce <__ieee754_pow+0x856>
 80a3108:	2e00      	cmp	r6, #0
 80a310a:	f2c0 8336 	blt.w	80a377a <__ieee754_pow+0x802>
 80a310e:	e9cd 8900 	strd	r8, r9, [sp]
 80a3112:	e777      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a3114:	2e00      	cmp	r6, #0
 80a3116:	f2c0 83f5 	blt.w	80a3904 <__ieee754_pow+0x98c>
 80a311a:	4658      	mov	r0, fp
 80a311c:	4651      	mov	r1, sl
 80a311e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3122:	e76f      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a3124:	2202      	movs	r2, #2
 80a3126:	9202      	str	r2, [sp, #8]
 80a3128:	e745      	b.n	80a2fb6 <__ieee754_pow+0x3e>
 80a312a:	465a      	mov	r2, fp
 80a312c:	4658      	mov	r0, fp
 80a312e:	4653      	mov	r3, sl
 80a3130:	4651      	mov	r1, sl
 80a3132:	e7b5      	b.n	80a30a0 <__ieee754_pow+0x128>
 80a3134:	f3af 8000 	nop.w
 80a3138:	8800759c 	.word	0x8800759c
 80a313c:	7e37e43c 	.word	0x7e37e43c
 80a3140:	7ff00000 	.word	0x7ff00000
 80a3144:	3ff00000 	.word	0x3ff00000
 80a3148:	3fe00000 	.word	0x3fe00000
 80a314c:	080a50b0 	.word	0x080a50b0
 80a3150:	433fffff 	.word	0x433fffff
 80a3154:	41e00000 	.word	0x41e00000
 80a3158:	3fefffff 	.word	0x3fefffff
 80a315c:	4bd4      	ldr	r3, [pc, #848]	; (80a34b0 <__ieee754_pow+0x538>)
 80a315e:	403b      	ands	r3, r7
 80a3160:	2b00      	cmp	r3, #0
 80a3162:	f040 83cd 	bne.w	80a3900 <__ieee754_pow+0x988>
 80a3166:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a316a:	2200      	movs	r2, #0
 80a316c:	4bd1      	ldr	r3, [pc, #836]	; (80a34b4 <__ieee754_pow+0x53c>)
 80a316e:	f001 f819 	bl	80a41a4 <__aeabi_dmul>
 80a3172:	f06f 0534 	mvn.w	r5, #52	; 0x34
 80a3176:	460c      	mov	r4, r1
 80a3178:	e9cd 0100 	strd	r0, r1, [sp]
 80a317c:	1523      	asrs	r3, r4, #20
 80a317e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3182:	1959      	adds	r1, r3, r5
 80a3184:	4bcc      	ldr	r3, [pc, #816]	; (80a34b8 <__ieee754_pow+0x540>)
 80a3186:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a318a:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 80a318e:	429a      	cmp	r2, r3
 80a3190:	910b      	str	r1, [sp, #44]	; 0x2c
 80a3192:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a3196:	dd07      	ble.n	80a31a8 <__ieee754_pow+0x230>
 80a3198:	4bc8      	ldr	r3, [pc, #800]	; (80a34bc <__ieee754_pow+0x544>)
 80a319a:	429a      	cmp	r2, r3
 80a319c:	f340 83f8 	ble.w	80a3990 <__ieee754_pow+0xa18>
 80a31a0:	3101      	adds	r1, #1
 80a31a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80a31a4:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 80a31a8:	2200      	movs	r2, #0
 80a31aa:	2300      	movs	r3, #0
 80a31ac:	2000      	movs	r0, #0
 80a31ae:	2500      	movs	r5, #0
 80a31b0:	49c3      	ldr	r1, [pc, #780]	; (80a34c0 <__ieee754_pow+0x548>)
 80a31b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a31b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a31ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a31be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a31c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a31c6:	4621      	mov	r1, r4
 80a31c8:	4682      	mov	sl, r0
 80a31ca:	f000 fe33 	bl	80a3e34 <__aeabi_dsub>
 80a31ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a31d2:	46a3      	mov	fp, r4
 80a31d4:	4606      	mov	r6, r0
 80a31d6:	460f      	mov	r7, r1
 80a31d8:	4650      	mov	r0, sl
 80a31da:	4621      	mov	r1, r4
 80a31dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80a31e0:	f000 fe2a 	bl	80a3e38 <__adddf3>
 80a31e4:	4602      	mov	r2, r0
 80a31e6:	460b      	mov	r3, r1
 80a31e8:	2000      	movs	r0, #0
 80a31ea:	49b5      	ldr	r1, [pc, #724]	; (80a34c0 <__ieee754_pow+0x548>)
 80a31ec:	f001 f904 	bl	80a43f8 <__aeabi_ddiv>
 80a31f0:	468c      	mov	ip, r1
 80a31f2:	4683      	mov	fp, r0
 80a31f4:	4663      	mov	r3, ip
 80a31f6:	465a      	mov	r2, fp
 80a31f8:	4630      	mov	r0, r6
 80a31fa:	4639      	mov	r1, r7
 80a31fc:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a3200:	f000 ffd0 	bl	80a41a4 <__aeabi_dmul>
 80a3204:	4682      	mov	sl, r0
 80a3206:	468b      	mov	fp, r1
 80a3208:	1063      	asrs	r3, r4, #1
 80a320a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a320e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a3212:	1959      	adds	r1, r3, r5
 80a3214:	460d      	mov	r5, r1
 80a3216:	465a      	mov	r2, fp
 80a3218:	4651      	mov	r1, sl
 80a321a:	2300      	movs	r3, #0
 80a321c:	2000      	movs	r0, #0
 80a321e:	e9cd 1200 	strd	r1, r2, [sp]
 80a3222:	9300      	str	r3, [sp, #0]
 80a3224:	4604      	mov	r4, r0
 80a3226:	4602      	mov	r2, r0
 80a3228:	462b      	mov	r3, r5
 80a322a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a322e:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a3232:	4650      	mov	r0, sl
 80a3234:	4659      	mov	r1, fp
 80a3236:	f000 ffb5 	bl	80a41a4 <__aeabi_dmul>
 80a323a:	4602      	mov	r2, r0
 80a323c:	460b      	mov	r3, r1
 80a323e:	4630      	mov	r0, r6
 80a3240:	4639      	mov	r1, r7
 80a3242:	f000 fdf7 	bl	80a3e34 <__aeabi_dsub>
 80a3246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a324a:	4606      	mov	r6, r0
 80a324c:	460f      	mov	r7, r1
 80a324e:	4620      	mov	r0, r4
 80a3250:	4629      	mov	r1, r5
 80a3252:	f000 fdef 	bl	80a3e34 <__aeabi_dsub>
 80a3256:	4602      	mov	r2, r0
 80a3258:	460b      	mov	r3, r1
 80a325a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a325e:	f000 fde9 	bl	80a3e34 <__aeabi_dsub>
 80a3262:	4652      	mov	r2, sl
 80a3264:	465b      	mov	r3, fp
 80a3266:	f000 ff9d 	bl	80a41a4 <__aeabi_dmul>
 80a326a:	4602      	mov	r2, r0
 80a326c:	460b      	mov	r3, r1
 80a326e:	4630      	mov	r0, r6
 80a3270:	4639      	mov	r1, r7
 80a3272:	f000 fddf 	bl	80a3e34 <__aeabi_dsub>
 80a3276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a327a:	f000 ff93 	bl	80a41a4 <__aeabi_dmul>
 80a327e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80a3282:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3286:	4622      	mov	r2, r4
 80a3288:	462b      	mov	r3, r5
 80a328a:	4620      	mov	r0, r4
 80a328c:	4629      	mov	r1, r5
 80a328e:	f000 ff89 	bl	80a41a4 <__aeabi_dmul>
 80a3292:	a375      	add	r3, pc, #468	; (adr r3, 80a3468 <__ieee754_pow+0x4f0>)
 80a3294:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3298:	4604      	mov	r4, r0
 80a329a:	460d      	mov	r5, r1
 80a329c:	f000 ff82 	bl	80a41a4 <__aeabi_dmul>
 80a32a0:	a373      	add	r3, pc, #460	; (adr r3, 80a3470 <__ieee754_pow+0x4f8>)
 80a32a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32a6:	f000 fdc7 	bl	80a3e38 <__adddf3>
 80a32aa:	4622      	mov	r2, r4
 80a32ac:	462b      	mov	r3, r5
 80a32ae:	f000 ff79 	bl	80a41a4 <__aeabi_dmul>
 80a32b2:	a371      	add	r3, pc, #452	; (adr r3, 80a3478 <__ieee754_pow+0x500>)
 80a32b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32b8:	f000 fdbe 	bl	80a3e38 <__adddf3>
 80a32bc:	4622      	mov	r2, r4
 80a32be:	462b      	mov	r3, r5
 80a32c0:	f000 ff70 	bl	80a41a4 <__aeabi_dmul>
 80a32c4:	a36e      	add	r3, pc, #440	; (adr r3, 80a3480 <__ieee754_pow+0x508>)
 80a32c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32ca:	f000 fdb5 	bl	80a3e38 <__adddf3>
 80a32ce:	4622      	mov	r2, r4
 80a32d0:	462b      	mov	r3, r5
 80a32d2:	f000 ff67 	bl	80a41a4 <__aeabi_dmul>
 80a32d6:	a36c      	add	r3, pc, #432	; (adr r3, 80a3488 <__ieee754_pow+0x510>)
 80a32d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32dc:	f000 fdac 	bl	80a3e38 <__adddf3>
 80a32e0:	4622      	mov	r2, r4
 80a32e2:	462b      	mov	r3, r5
 80a32e4:	f000 ff5e 	bl	80a41a4 <__aeabi_dmul>
 80a32e8:	a369      	add	r3, pc, #420	; (adr r3, 80a3490 <__ieee754_pow+0x518>)
 80a32ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32ee:	f000 fda3 	bl	80a3e38 <__adddf3>
 80a32f2:	4622      	mov	r2, r4
 80a32f4:	4606      	mov	r6, r0
 80a32f6:	460f      	mov	r7, r1
 80a32f8:	462b      	mov	r3, r5
 80a32fa:	4620      	mov	r0, r4
 80a32fc:	4629      	mov	r1, r5
 80a32fe:	f000 ff51 	bl	80a41a4 <__aeabi_dmul>
 80a3302:	4602      	mov	r2, r0
 80a3304:	460b      	mov	r3, r1
 80a3306:	4630      	mov	r0, r6
 80a3308:	4639      	mov	r1, r7
 80a330a:	f000 ff4b 	bl	80a41a4 <__aeabi_dmul>
 80a330e:	4604      	mov	r4, r0
 80a3310:	460d      	mov	r5, r1
 80a3312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3316:	4652      	mov	r2, sl
 80a3318:	465b      	mov	r3, fp
 80a331a:	f000 fd8d 	bl	80a3e38 <__adddf3>
 80a331e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3322:	f000 ff3f 	bl	80a41a4 <__aeabi_dmul>
 80a3326:	4622      	mov	r2, r4
 80a3328:	462b      	mov	r3, r5
 80a332a:	f000 fd85 	bl	80a3e38 <__adddf3>
 80a332e:	4652      	mov	r2, sl
 80a3330:	4606      	mov	r6, r0
 80a3332:	460f      	mov	r7, r1
 80a3334:	465b      	mov	r3, fp
 80a3336:	4650      	mov	r0, sl
 80a3338:	4659      	mov	r1, fp
 80a333a:	f000 ff33 	bl	80a41a4 <__aeabi_dmul>
 80a333e:	4602      	mov	r2, r0
 80a3340:	460b      	mov	r3, r1
 80a3342:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3346:	2200      	movs	r2, #0
 80a3348:	4b5e      	ldr	r3, [pc, #376]	; (80a34c4 <__ieee754_pow+0x54c>)
 80a334a:	f000 fd75 	bl	80a3e38 <__adddf3>
 80a334e:	4632      	mov	r2, r6
 80a3350:	463b      	mov	r3, r7
 80a3352:	f000 fd71 	bl	80a3e38 <__adddf3>
 80a3356:	2400      	movs	r4, #0
 80a3358:	460d      	mov	r5, r1
 80a335a:	4622      	mov	r2, r4
 80a335c:	462b      	mov	r3, r5
 80a335e:	4650      	mov	r0, sl
 80a3360:	4659      	mov	r1, fp
 80a3362:	f000 ff1f 	bl	80a41a4 <__aeabi_dmul>
 80a3366:	2200      	movs	r2, #0
 80a3368:	4682      	mov	sl, r0
 80a336a:	468b      	mov	fp, r1
 80a336c:	4620      	mov	r0, r4
 80a336e:	4629      	mov	r1, r5
 80a3370:	4b54      	ldr	r3, [pc, #336]	; (80a34c4 <__ieee754_pow+0x54c>)
 80a3372:	f000 fd5f 	bl	80a3e34 <__aeabi_dsub>
 80a3376:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a337a:	f000 fd5b 	bl	80a3e34 <__aeabi_dsub>
 80a337e:	4602      	mov	r2, r0
 80a3380:	460b      	mov	r3, r1
 80a3382:	4630      	mov	r0, r6
 80a3384:	4639      	mov	r1, r7
 80a3386:	f000 fd55 	bl	80a3e34 <__aeabi_dsub>
 80a338a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a338e:	f000 ff09 	bl	80a41a4 <__aeabi_dmul>
 80a3392:	4622      	mov	r2, r4
 80a3394:	4606      	mov	r6, r0
 80a3396:	460f      	mov	r7, r1
 80a3398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a339c:	462b      	mov	r3, r5
 80a339e:	f000 ff01 	bl	80a41a4 <__aeabi_dmul>
 80a33a2:	4602      	mov	r2, r0
 80a33a4:	460b      	mov	r3, r1
 80a33a6:	4630      	mov	r0, r6
 80a33a8:	4639      	mov	r1, r7
 80a33aa:	f000 fd45 	bl	80a3e38 <__adddf3>
 80a33ae:	4606      	mov	r6, r0
 80a33b0:	460f      	mov	r7, r1
 80a33b2:	2400      	movs	r4, #0
 80a33b4:	4632      	mov	r2, r6
 80a33b6:	463b      	mov	r3, r7
 80a33b8:	4650      	mov	r0, sl
 80a33ba:	4659      	mov	r1, fp
 80a33bc:	f000 fd3c 	bl	80a3e38 <__adddf3>
 80a33c0:	a335      	add	r3, pc, #212	; (adr r3, 80a3498 <__ieee754_pow+0x520>)
 80a33c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33c6:	4620      	mov	r0, r4
 80a33c8:	460d      	mov	r5, r1
 80a33ca:	f000 feeb 	bl	80a41a4 <__aeabi_dmul>
 80a33ce:	4652      	mov	r2, sl
 80a33d0:	465b      	mov	r3, fp
 80a33d2:	4682      	mov	sl, r0
 80a33d4:	468b      	mov	fp, r1
 80a33d6:	4620      	mov	r0, r4
 80a33d8:	4629      	mov	r1, r5
 80a33da:	f000 fd2b 	bl	80a3e34 <__aeabi_dsub>
 80a33de:	4602      	mov	r2, r0
 80a33e0:	460b      	mov	r3, r1
 80a33e2:	4630      	mov	r0, r6
 80a33e4:	4639      	mov	r1, r7
 80a33e6:	f000 fd25 	bl	80a3e34 <__aeabi_dsub>
 80a33ea:	a32d      	add	r3, pc, #180	; (adr r3, 80a34a0 <__ieee754_pow+0x528>)
 80a33ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33f0:	f000 fed8 	bl	80a41a4 <__aeabi_dmul>
 80a33f4:	4602      	mov	r2, r0
 80a33f6:	460b      	mov	r3, r1
 80a33f8:	4620      	mov	r0, r4
 80a33fa:	4629      	mov	r1, r5
 80a33fc:	4614      	mov	r4, r2
 80a33fe:	461d      	mov	r5, r3
 80a3400:	a329      	add	r3, pc, #164	; (adr r3, 80a34a8 <__ieee754_pow+0x530>)
 80a3402:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3406:	f000 fecd 	bl	80a41a4 <__aeabi_dmul>
 80a340a:	4602      	mov	r2, r0
 80a340c:	460b      	mov	r3, r1
 80a340e:	4620      	mov	r0, r4
 80a3410:	4629      	mov	r1, r5
 80a3412:	f000 fd11 	bl	80a3e38 <__adddf3>
 80a3416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a341a:	f000 fd0d 	bl	80a3e38 <__adddf3>
 80a341e:	4606      	mov	r6, r0
 80a3420:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a3422:	460f      	mov	r7, r1
 80a3424:	f000 fe54 	bl	80a40d0 <__aeabi_i2d>
 80a3428:	4604      	mov	r4, r0
 80a342a:	460d      	mov	r5, r1
 80a342c:	4632      	mov	r2, r6
 80a342e:	463b      	mov	r3, r7
 80a3430:	4650      	mov	r0, sl
 80a3432:	4659      	mov	r1, fp
 80a3434:	f000 fd00 	bl	80a3e38 <__adddf3>
 80a3438:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a343c:	f000 fcfc 	bl	80a3e38 <__adddf3>
 80a3440:	4622      	mov	r2, r4
 80a3442:	462b      	mov	r3, r5
 80a3444:	f000 fcf8 	bl	80a3e38 <__adddf3>
 80a3448:	4622      	mov	r2, r4
 80a344a:	2400      	movs	r4, #0
 80a344c:	462b      	mov	r3, r5
 80a344e:	4620      	mov	r0, r4
 80a3450:	460d      	mov	r5, r1
 80a3452:	f000 fcef 	bl	80a3e34 <__aeabi_dsub>
 80a3456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a345a:	f000 fceb 	bl	80a3e34 <__aeabi_dsub>
 80a345e:	4652      	mov	r2, sl
 80a3460:	465b      	mov	r3, fp
 80a3462:	e031      	b.n	80a34c8 <__ieee754_pow+0x550>
 80a3464:	f3af 8000 	nop.w
 80a3468:	4a454eef 	.word	0x4a454eef
 80a346c:	3fca7e28 	.word	0x3fca7e28
 80a3470:	93c9db65 	.word	0x93c9db65
 80a3474:	3fcd864a 	.word	0x3fcd864a
 80a3478:	a91d4101 	.word	0xa91d4101
 80a347c:	3fd17460 	.word	0x3fd17460
 80a3480:	518f264d 	.word	0x518f264d
 80a3484:	3fd55555 	.word	0x3fd55555
 80a3488:	db6fabff 	.word	0xdb6fabff
 80a348c:	3fdb6db6 	.word	0x3fdb6db6
 80a3490:	33333303 	.word	0x33333303
 80a3494:	3fe33333 	.word	0x3fe33333
 80a3498:	e0000000 	.word	0xe0000000
 80a349c:	3feec709 	.word	0x3feec709
 80a34a0:	dc3a03fd 	.word	0xdc3a03fd
 80a34a4:	3feec709 	.word	0x3feec709
 80a34a8:	145b01f5 	.word	0x145b01f5
 80a34ac:	be3e2fe0 	.word	0xbe3e2fe0
 80a34b0:	7ff00000 	.word	0x7ff00000
 80a34b4:	43400000 	.word	0x43400000
 80a34b8:	0003988e 	.word	0x0003988e
 80a34bc:	000bb679 	.word	0x000bb679
 80a34c0:	3ff00000 	.word	0x3ff00000
 80a34c4:	40080000 	.word	0x40080000
 80a34c8:	f000 fcb4 	bl	80a3e34 <__aeabi_dsub>
 80a34cc:	4602      	mov	r2, r0
 80a34ce:	460b      	mov	r3, r1
 80a34d0:	4630      	mov	r0, r6
 80a34d2:	4639      	mov	r1, r7
 80a34d4:	f000 fcae 	bl	80a3e34 <__aeabi_dsub>
 80a34d8:	9b02      	ldr	r3, [sp, #8]
 80a34da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a34dc:	3b01      	subs	r3, #1
 80a34de:	4313      	orrs	r3, r2
 80a34e0:	f04f 0200 	mov.w	r2, #0
 80a34e4:	bf0c      	ite	eq
 80a34e6:	4bd2      	ldreq	r3, [pc, #840]	; (80a3830 <__ieee754_pow+0x8b8>)
 80a34e8:	4bd2      	ldrne	r3, [pc, #840]	; (80a3834 <__ieee754_pow+0x8bc>)
 80a34ea:	e9cd 8900 	strd	r8, r9, [sp]
 80a34ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a34f2:	2300      	movs	r3, #0
 80a34f4:	9300      	str	r3, [sp, #0]
 80a34f6:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a34fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a34fe:	4652      	mov	r2, sl
 80a3500:	4640      	mov	r0, r8
 80a3502:	4649      	mov	r1, r9
 80a3504:	465b      	mov	r3, fp
 80a3506:	f000 fc95 	bl	80a3e34 <__aeabi_dsub>
 80a350a:	4622      	mov	r2, r4
 80a350c:	462b      	mov	r3, r5
 80a350e:	f000 fe49 	bl	80a41a4 <__aeabi_dmul>
 80a3512:	4642      	mov	r2, r8
 80a3514:	4606      	mov	r6, r0
 80a3516:	460f      	mov	r7, r1
 80a3518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a351c:	464b      	mov	r3, r9
 80a351e:	f000 fe41 	bl	80a41a4 <__aeabi_dmul>
 80a3522:	4602      	mov	r2, r0
 80a3524:	460b      	mov	r3, r1
 80a3526:	4630      	mov	r0, r6
 80a3528:	4639      	mov	r1, r7
 80a352a:	f000 fc85 	bl	80a3e38 <__adddf3>
 80a352e:	4652      	mov	r2, sl
 80a3530:	4606      	mov	r6, r0
 80a3532:	460f      	mov	r7, r1
 80a3534:	465b      	mov	r3, fp
 80a3536:	4620      	mov	r0, r4
 80a3538:	4629      	mov	r1, r5
 80a353a:	f000 fe33 	bl	80a41a4 <__aeabi_dmul>
 80a353e:	4604      	mov	r4, r0
 80a3540:	460d      	mov	r5, r1
 80a3542:	4630      	mov	r0, r6
 80a3544:	462b      	mov	r3, r5
 80a3546:	4639      	mov	r1, r7
 80a3548:	4622      	mov	r2, r4
 80a354a:	f000 fc75 	bl	80a3e38 <__adddf3>
 80a354e:	4bba      	ldr	r3, [pc, #744]	; (80a3838 <__ieee754_pow+0x8c0>)
 80a3550:	4680      	mov	r8, r0
 80a3552:	4299      	cmp	r1, r3
 80a3554:	4689      	mov	r9, r1
 80a3556:	468a      	mov	sl, r1
 80a3558:	f340 8114 	ble.w	80a3784 <__ieee754_pow+0x80c>
 80a355c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3560:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3564:	4303      	orrs	r3, r0
 80a3566:	f040 81f6 	bne.w	80a3956 <__ieee754_pow+0x9de>
 80a356a:	a39d      	add	r3, pc, #628	; (adr r3, 80a37e0 <__ieee754_pow+0x868>)
 80a356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3570:	4630      	mov	r0, r6
 80a3572:	4639      	mov	r1, r7
 80a3574:	f000 fc60 	bl	80a3e38 <__adddf3>
 80a3578:	4602      	mov	r2, r0
 80a357a:	460b      	mov	r3, r1
 80a357c:	4640      	mov	r0, r8
 80a357e:	4649      	mov	r1, r9
 80a3580:	4690      	mov	r8, r2
 80a3582:	4699      	mov	r9, r3
 80a3584:	4622      	mov	r2, r4
 80a3586:	462b      	mov	r3, r5
 80a3588:	f000 fc54 	bl	80a3e34 <__aeabi_dsub>
 80a358c:	4602      	mov	r2, r0
 80a358e:	460b      	mov	r3, r1
 80a3590:	4640      	mov	r0, r8
 80a3592:	4649      	mov	r1, r9
 80a3594:	f001 f896 	bl	80a46c4 <__aeabi_dcmpgt>
 80a3598:	2800      	cmp	r0, #0
 80a359a:	f040 81dc 	bne.w	80a3956 <__ieee754_pow+0x9de>
 80a359e:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80a35a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a35a6:	2000      	movs	r0, #0
 80a35a8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a35ac:	fa42 f303 	asr.w	r3, r2, r3
 80a35b0:	4453      	add	r3, sl
 80a35b2:	49a2      	ldr	r1, [pc, #648]	; (80a383c <__ieee754_pow+0x8c4>)
 80a35b4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a35b8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a35bc:	fa41 fc02 	asr.w	ip, r1, r2
 80a35c0:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a35c4:	ea23 010c 	bic.w	r1, r3, ip
 80a35c8:	f1c2 0214 	rsb	r2, r2, #20
 80a35cc:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a35d0:	f1ba 0f00 	cmp.w	sl, #0
 80a35d4:	460b      	mov	r3, r1
 80a35d6:	fa4b fb02 	asr.w	fp, fp, r2
 80a35da:	4629      	mov	r1, r5
 80a35dc:	4602      	mov	r2, r0
 80a35de:	4620      	mov	r0, r4
 80a35e0:	bfb8      	it	lt
 80a35e2:	f1cb 0b00 	rsblt	fp, fp, #0
 80a35e6:	f000 fc25 	bl	80a3e34 <__aeabi_dsub>
 80a35ea:	4604      	mov	r4, r0
 80a35ec:	460d      	mov	r5, r1
 80a35ee:	4630      	mov	r0, r6
 80a35f0:	4639      	mov	r1, r7
 80a35f2:	4622      	mov	r2, r4
 80a35f4:	462b      	mov	r3, r5
 80a35f6:	f000 fc1f 	bl	80a3e38 <__adddf3>
 80a35fa:	4689      	mov	r9, r1
 80a35fc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3600:	f04f 0800 	mov.w	r8, #0
 80a3604:	a378      	add	r3, pc, #480	; (adr r3, 80a37e8 <__ieee754_pow+0x870>)
 80a3606:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a360a:	4640      	mov	r0, r8
 80a360c:	4649      	mov	r1, r9
 80a360e:	f000 fdc9 	bl	80a41a4 <__aeabi_dmul>
 80a3612:	4622      	mov	r2, r4
 80a3614:	462b      	mov	r3, r5
 80a3616:	4604      	mov	r4, r0
 80a3618:	460d      	mov	r5, r1
 80a361a:	4640      	mov	r0, r8
 80a361c:	4649      	mov	r1, r9
 80a361e:	f000 fc09 	bl	80a3e34 <__aeabi_dsub>
 80a3622:	4602      	mov	r2, r0
 80a3624:	460b      	mov	r3, r1
 80a3626:	4630      	mov	r0, r6
 80a3628:	4639      	mov	r1, r7
 80a362a:	f000 fc03 	bl	80a3e34 <__aeabi_dsub>
 80a362e:	a370      	add	r3, pc, #448	; (adr r3, 80a37f0 <__ieee754_pow+0x878>)
 80a3630:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3634:	f000 fdb6 	bl	80a41a4 <__aeabi_dmul>
 80a3638:	a36f      	add	r3, pc, #444	; (adr r3, 80a37f8 <__ieee754_pow+0x880>)
 80a363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a363e:	4606      	mov	r6, r0
 80a3640:	460f      	mov	r7, r1
 80a3642:	4640      	mov	r0, r8
 80a3644:	4649      	mov	r1, r9
 80a3646:	f000 fdad 	bl	80a41a4 <__aeabi_dmul>
 80a364a:	4602      	mov	r2, r0
 80a364c:	460b      	mov	r3, r1
 80a364e:	4630      	mov	r0, r6
 80a3650:	4639      	mov	r1, r7
 80a3652:	f000 fbf1 	bl	80a3e38 <__adddf3>
 80a3656:	4680      	mov	r8, r0
 80a3658:	4689      	mov	r9, r1
 80a365a:	4642      	mov	r2, r8
 80a365c:	464b      	mov	r3, r9
 80a365e:	4620      	mov	r0, r4
 80a3660:	4629      	mov	r1, r5
 80a3662:	f000 fbe9 	bl	80a3e38 <__adddf3>
 80a3666:	4622      	mov	r2, r4
 80a3668:	462b      	mov	r3, r5
 80a366a:	4606      	mov	r6, r0
 80a366c:	460f      	mov	r7, r1
 80a366e:	f000 fbe1 	bl	80a3e34 <__aeabi_dsub>
 80a3672:	4602      	mov	r2, r0
 80a3674:	460b      	mov	r3, r1
 80a3676:	4640      	mov	r0, r8
 80a3678:	4649      	mov	r1, r9
 80a367a:	f000 fbdb 	bl	80a3e34 <__aeabi_dsub>
 80a367e:	4632      	mov	r2, r6
 80a3680:	4680      	mov	r8, r0
 80a3682:	4689      	mov	r9, r1
 80a3684:	463b      	mov	r3, r7
 80a3686:	4630      	mov	r0, r6
 80a3688:	4639      	mov	r1, r7
 80a368a:	f000 fd8b 	bl	80a41a4 <__aeabi_dmul>
 80a368e:	a35c      	add	r3, pc, #368	; (adr r3, 80a3800 <__ieee754_pow+0x888>)
 80a3690:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3694:	4604      	mov	r4, r0
 80a3696:	460d      	mov	r5, r1
 80a3698:	f000 fd84 	bl	80a41a4 <__aeabi_dmul>
 80a369c:	a35a      	add	r3, pc, #360	; (adr r3, 80a3808 <__ieee754_pow+0x890>)
 80a369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36a2:	f000 fbc7 	bl	80a3e34 <__aeabi_dsub>
 80a36a6:	4622      	mov	r2, r4
 80a36a8:	462b      	mov	r3, r5
 80a36aa:	f000 fd7b 	bl	80a41a4 <__aeabi_dmul>
 80a36ae:	a358      	add	r3, pc, #352	; (adr r3, 80a3810 <__ieee754_pow+0x898>)
 80a36b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36b4:	f000 fbc0 	bl	80a3e38 <__adddf3>
 80a36b8:	4622      	mov	r2, r4
 80a36ba:	462b      	mov	r3, r5
 80a36bc:	f000 fd72 	bl	80a41a4 <__aeabi_dmul>
 80a36c0:	a355      	add	r3, pc, #340	; (adr r3, 80a3818 <__ieee754_pow+0x8a0>)
 80a36c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36c6:	f000 fbb5 	bl	80a3e34 <__aeabi_dsub>
 80a36ca:	4622      	mov	r2, r4
 80a36cc:	462b      	mov	r3, r5
 80a36ce:	f000 fd69 	bl	80a41a4 <__aeabi_dmul>
 80a36d2:	a353      	add	r3, pc, #332	; (adr r3, 80a3820 <__ieee754_pow+0x8a8>)
 80a36d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36d8:	f000 fbae 	bl	80a3e38 <__adddf3>
 80a36dc:	4622      	mov	r2, r4
 80a36de:	462b      	mov	r3, r5
 80a36e0:	f000 fd60 	bl	80a41a4 <__aeabi_dmul>
 80a36e4:	4602      	mov	r2, r0
 80a36e6:	460b      	mov	r3, r1
 80a36e8:	4630      	mov	r0, r6
 80a36ea:	4639      	mov	r1, r7
 80a36ec:	f000 fba2 	bl	80a3e34 <__aeabi_dsub>
 80a36f0:	4604      	mov	r4, r0
 80a36f2:	460d      	mov	r5, r1
 80a36f4:	4622      	mov	r2, r4
 80a36f6:	462b      	mov	r3, r5
 80a36f8:	4630      	mov	r0, r6
 80a36fa:	4639      	mov	r1, r7
 80a36fc:	f000 fd52 	bl	80a41a4 <__aeabi_dmul>
 80a3700:	4602      	mov	r2, r0
 80a3702:	460b      	mov	r3, r1
 80a3704:	4620      	mov	r0, r4
 80a3706:	4629      	mov	r1, r5
 80a3708:	4614      	mov	r4, r2
 80a370a:	461d      	mov	r5, r3
 80a370c:	2200      	movs	r2, #0
 80a370e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3712:	f000 fb8f 	bl	80a3e34 <__aeabi_dsub>
 80a3716:	4602      	mov	r2, r0
 80a3718:	460b      	mov	r3, r1
 80a371a:	4620      	mov	r0, r4
 80a371c:	4629      	mov	r1, r5
 80a371e:	f000 fe6b 	bl	80a43f8 <__aeabi_ddiv>
 80a3722:	4642      	mov	r2, r8
 80a3724:	4604      	mov	r4, r0
 80a3726:	460d      	mov	r5, r1
 80a3728:	464b      	mov	r3, r9
 80a372a:	4630      	mov	r0, r6
 80a372c:	4639      	mov	r1, r7
 80a372e:	f000 fd39 	bl	80a41a4 <__aeabi_dmul>
 80a3732:	4642      	mov	r2, r8
 80a3734:	464b      	mov	r3, r9
 80a3736:	f000 fb7f 	bl	80a3e38 <__adddf3>
 80a373a:	4602      	mov	r2, r0
 80a373c:	460b      	mov	r3, r1
 80a373e:	4620      	mov	r0, r4
 80a3740:	4629      	mov	r1, r5
 80a3742:	f000 fb77 	bl	80a3e34 <__aeabi_dsub>
 80a3746:	4632      	mov	r2, r6
 80a3748:	463b      	mov	r3, r7
 80a374a:	f000 fb73 	bl	80a3e34 <__aeabi_dsub>
 80a374e:	4602      	mov	r2, r0
 80a3750:	460b      	mov	r3, r1
 80a3752:	2000      	movs	r0, #0
 80a3754:	4937      	ldr	r1, [pc, #220]	; (80a3834 <__ieee754_pow+0x8bc>)
 80a3756:	f000 fb6d 	bl	80a3e34 <__aeabi_dsub>
 80a375a:	448a      	add	sl, r1
 80a375c:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a3760:	f2c0 8135 	blt.w	80a39ce <__ieee754_pow+0xa56>
 80a3764:	4651      	mov	r1, sl
 80a3766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a376a:	f000 fd1b 	bl	80a41a4 <__aeabi_dmul>
 80a376e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3772:	e447      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a3774:	2e00      	cmp	r6, #0
 80a3776:	f6ff acb1 	blt.w	80a30dc <__ieee754_pow+0x164>
 80a377a:	2300      	movs	r3, #0
 80a377c:	2400      	movs	r4, #0
 80a377e:	e9cd 3400 	strd	r3, r4, [sp]
 80a3782:	e43f      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a3784:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80a3840 <__ieee754_pow+0x8c8>
 80a3788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a378c:	4563      	cmp	r3, ip
 80a378e:	f340 80da 	ble.w	80a3946 <__ieee754_pow+0x9ce>
 80a3792:	4b2c      	ldr	r3, [pc, #176]	; (80a3844 <__ieee754_pow+0x8cc>)
 80a3794:	440b      	add	r3, r1
 80a3796:	4303      	orrs	r3, r0
 80a3798:	d10a      	bne.n	80a37b0 <__ieee754_pow+0x838>
 80a379a:	4622      	mov	r2, r4
 80a379c:	462b      	mov	r3, r5
 80a379e:	f000 fb49 	bl	80a3e34 <__aeabi_dsub>
 80a37a2:	4632      	mov	r2, r6
 80a37a4:	463b      	mov	r3, r7
 80a37a6:	f000 ff83 	bl	80a46b0 <__aeabi_dcmpge>
 80a37aa:	2800      	cmp	r0, #0
 80a37ac:	f43f aef7 	beq.w	80a359e <__ieee754_pow+0x626>
 80a37b0:	a31d      	add	r3, pc, #116	; (adr r3, 80a3828 <__ieee754_pow+0x8b0>)
 80a37b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a37ba:	f000 fcf3 	bl	80a41a4 <__aeabi_dmul>
 80a37be:	a31a      	add	r3, pc, #104	; (adr r3, 80a3828 <__ieee754_pow+0x8b0>)
 80a37c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37c4:	f000 fcee 	bl	80a41a4 <__aeabi_dmul>
 80a37c8:	e9cd 0100 	strd	r0, r1, [sp]
 80a37cc:	e41a      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a37ce:	2e00      	cmp	r6, #0
 80a37d0:	dad3      	bge.n	80a377a <__ieee754_pow+0x802>
 80a37d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a37d6:	f8cd 8000 	str.w	r8, [sp]
 80a37da:	9301      	str	r3, [sp, #4]
 80a37dc:	e412      	b.n	80a3004 <__ieee754_pow+0x8c>
 80a37de:	bf00      	nop
 80a37e0:	652b82fe 	.word	0x652b82fe
 80a37e4:	3c971547 	.word	0x3c971547
 80a37e8:	00000000 	.word	0x00000000
 80a37ec:	3fe62e43 	.word	0x3fe62e43
 80a37f0:	fefa39ef 	.word	0xfefa39ef
 80a37f4:	3fe62e42 	.word	0x3fe62e42
 80a37f8:	0ca86c39 	.word	0x0ca86c39
 80a37fc:	be205c61 	.word	0xbe205c61
 80a3800:	72bea4d0 	.word	0x72bea4d0
 80a3804:	3e663769 	.word	0x3e663769
 80a3808:	c5d26bf1 	.word	0xc5d26bf1
 80a380c:	3ebbbd41 	.word	0x3ebbbd41
 80a3810:	af25de2c 	.word	0xaf25de2c
 80a3814:	3f11566a 	.word	0x3f11566a
 80a3818:	16bebd93 	.word	0x16bebd93
 80a381c:	3f66c16c 	.word	0x3f66c16c
 80a3820:	5555553e 	.word	0x5555553e
 80a3824:	3fc55555 	.word	0x3fc55555
 80a3828:	c2f8f359 	.word	0xc2f8f359
 80a382c:	01a56e1f 	.word	0x01a56e1f
 80a3830:	bff00000 	.word	0xbff00000
 80a3834:	3ff00000 	.word	0x3ff00000
 80a3838:	408fffff 	.word	0x408fffff
 80a383c:	000fffff 	.word	0x000fffff
 80a3840:	4090cbff 	.word	0x4090cbff
 80a3844:	3f6f3400 	.word	0x3f6f3400
 80a3848:	429c      	cmp	r4, r3
 80a384a:	db93      	blt.n	80a3774 <__ieee754_pow+0x7fc>
 80a384c:	4b7a      	ldr	r3, [pc, #488]	; (80a3a38 <__ieee754_pow+0xac0>)
 80a384e:	429c      	cmp	r4, r3
 80a3850:	f73f ac41 	bgt.w	80a30d6 <__ieee754_pow+0x15e>
 80a3854:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3858:	2200      	movs	r2, #0
 80a385a:	4b77      	ldr	r3, [pc, #476]	; (80a3a38 <__ieee754_pow+0xac0>)
 80a385c:	f000 faea 	bl	80a3e34 <__aeabi_dsub>
 80a3860:	a367      	add	r3, pc, #412	; (adr r3, 80a3a00 <__ieee754_pow+0xa88>)
 80a3862:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3866:	4604      	mov	r4, r0
 80a3868:	460d      	mov	r5, r1
 80a386a:	f000 fc9b 	bl	80a41a4 <__aeabi_dmul>
 80a386e:	a366      	add	r3, pc, #408	; (adr r3, 80a3a08 <__ieee754_pow+0xa90>)
 80a3870:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3874:	4682      	mov	sl, r0
 80a3876:	468b      	mov	fp, r1
 80a3878:	4620      	mov	r0, r4
 80a387a:	4629      	mov	r1, r5
 80a387c:	f000 fc92 	bl	80a41a4 <__aeabi_dmul>
 80a3880:	2200      	movs	r2, #0
 80a3882:	e9cd 0100 	strd	r0, r1, [sp]
 80a3886:	4b6d      	ldr	r3, [pc, #436]	; (80a3a3c <__ieee754_pow+0xac4>)
 80a3888:	4620      	mov	r0, r4
 80a388a:	4629      	mov	r1, r5
 80a388c:	f000 fc8a 	bl	80a41a4 <__aeabi_dmul>
 80a3890:	4602      	mov	r2, r0
 80a3892:	460b      	mov	r3, r1
 80a3894:	a15e      	add	r1, pc, #376	; (adr r1, 80a3a10 <__ieee754_pow+0xa98>)
 80a3896:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a389a:	f000 facb 	bl	80a3e34 <__aeabi_dsub>
 80a389e:	4622      	mov	r2, r4
 80a38a0:	462b      	mov	r3, r5
 80a38a2:	f000 fc7f 	bl	80a41a4 <__aeabi_dmul>
 80a38a6:	4602      	mov	r2, r0
 80a38a8:	460b      	mov	r3, r1
 80a38aa:	2000      	movs	r0, #0
 80a38ac:	4964      	ldr	r1, [pc, #400]	; (80a3a40 <__ieee754_pow+0xac8>)
 80a38ae:	f000 fac1 	bl	80a3e34 <__aeabi_dsub>
 80a38b2:	4622      	mov	r2, r4
 80a38b4:	4606      	mov	r6, r0
 80a38b6:	460f      	mov	r7, r1
 80a38b8:	462b      	mov	r3, r5
 80a38ba:	4620      	mov	r0, r4
 80a38bc:	4629      	mov	r1, r5
 80a38be:	f000 fc71 	bl	80a41a4 <__aeabi_dmul>
 80a38c2:	4602      	mov	r2, r0
 80a38c4:	460b      	mov	r3, r1
 80a38c6:	4630      	mov	r0, r6
 80a38c8:	4639      	mov	r1, r7
 80a38ca:	f000 fc6b 	bl	80a41a4 <__aeabi_dmul>
 80a38ce:	a352      	add	r3, pc, #328	; (adr r3, 80a3a18 <__ieee754_pow+0xaa0>)
 80a38d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38d4:	f000 fc66 	bl	80a41a4 <__aeabi_dmul>
 80a38d8:	4602      	mov	r2, r0
 80a38da:	460b      	mov	r3, r1
 80a38dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a38e0:	f000 faa8 	bl	80a3e34 <__aeabi_dsub>
 80a38e4:	4606      	mov	r6, r0
 80a38e6:	460f      	mov	r7, r1
 80a38e8:	4632      	mov	r2, r6
 80a38ea:	463b      	mov	r3, r7
 80a38ec:	4650      	mov	r0, sl
 80a38ee:	4659      	mov	r1, fp
 80a38f0:	f000 faa2 	bl	80a3e38 <__adddf3>
 80a38f4:	2400      	movs	r4, #0
 80a38f6:	4652      	mov	r2, sl
 80a38f8:	465b      	mov	r3, fp
 80a38fa:	460d      	mov	r5, r1
 80a38fc:	4620      	mov	r0, r4
 80a38fe:	e5e3      	b.n	80a34c8 <__ieee754_pow+0x550>
 80a3900:	2500      	movs	r5, #0
 80a3902:	e43b      	b.n	80a317c <__ieee754_pow+0x204>
 80a3904:	465a      	mov	r2, fp
 80a3906:	2000      	movs	r0, #0
 80a3908:	4653      	mov	r3, sl
 80a390a:	494b      	ldr	r1, [pc, #300]	; (80a3a38 <__ieee754_pow+0xac0>)
 80a390c:	f000 fd74 	bl	80a43f8 <__aeabi_ddiv>
 80a3910:	e9cd 0100 	strd	r0, r1, [sp]
 80a3914:	f7ff bb76 	b.w	80a3004 <__ieee754_pow+0x8c>
 80a3918:	465a      	mov	r2, fp
 80a391a:	4658      	mov	r0, fp
 80a391c:	4653      	mov	r3, sl
 80a391e:	4651      	mov	r1, sl
 80a3920:	f000 fc40 	bl	80a41a4 <__aeabi_dmul>
 80a3924:	e9cd 0100 	strd	r0, r1, [sp]
 80a3928:	f7ff bb6c 	b.w	80a3004 <__ieee754_pow+0x8c>
 80a392c:	2b00      	cmp	r3, #0
 80a392e:	d140      	bne.n	80a39b2 <__ieee754_pow+0xa3a>
 80a3930:	f1c2 0214 	rsb	r2, r2, #20
 80a3934:	fa45 f102 	asr.w	r1, r5, r2
 80a3938:	fa01 f202 	lsl.w	r2, r1, r2
 80a393c:	42aa      	cmp	r2, r5
 80a393e:	d054      	beq.n	80a39ea <__ieee754_pow+0xa72>
 80a3940:	9302      	str	r3, [sp, #8]
 80a3942:	f7ff bb3e 	b.w	80a2fc2 <__ieee754_pow+0x4a>
 80a3946:	4a3e      	ldr	r2, [pc, #248]	; (80a3a40 <__ieee754_pow+0xac8>)
 80a3948:	4293      	cmp	r3, r2
 80a394a:	dc55      	bgt.n	80a39f8 <__ieee754_pow+0xa80>
 80a394c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3950:	4692      	mov	sl, r2
 80a3952:	4693      	mov	fp, r2
 80a3954:	e654      	b.n	80a3600 <__ieee754_pow+0x688>
 80a3956:	a332      	add	r3, pc, #200	; (adr r3, 80a3a20 <__ieee754_pow+0xaa8>)
 80a3958:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a395c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3960:	f000 fc20 	bl	80a41a4 <__aeabi_dmul>
 80a3964:	a32e      	add	r3, pc, #184	; (adr r3, 80a3a20 <__ieee754_pow+0xaa8>)
 80a3966:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a396a:	f000 fc1b 	bl	80a41a4 <__aeabi_dmul>
 80a396e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3972:	f7ff bb47 	b.w	80a3004 <__ieee754_pow+0x8c>
 80a3976:	9b02      	ldr	r3, [sp, #8]
 80a3978:	2b01      	cmp	r3, #1
 80a397a:	f47f ab43 	bne.w	80a3004 <__ieee754_pow+0x8c>
 80a397e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a3982:	4622      	mov	r2, r4
 80a3984:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a3988:	e9cd 2300 	strd	r2, r3, [sp]
 80a398c:	f7ff bb3a 	b.w	80a3004 <__ieee754_pow+0x8c>
 80a3990:	2200      	movs	r2, #0
 80a3992:	4b2c      	ldr	r3, [pc, #176]	; (80a3a44 <__ieee754_pow+0xacc>)
 80a3994:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80a3998:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a399c:	a322      	add	r3, pc, #136	; (adr r3, 80a3a28 <__ieee754_pow+0xab0>)
 80a399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a39a6:	a322      	add	r3, pc, #136	; (adr r3, 80a3a30 <__ieee754_pow+0xab8>)
 80a39a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a39b0:	e405      	b.n	80a31be <__ieee754_pow+0x246>
 80a39b2:	4658      	mov	r0, fp
 80a39b4:	4651      	mov	r1, sl
 80a39b6:	f000 f90d 	bl	80a3bd4 <fabs>
 80a39ba:	465b      	mov	r3, fp
 80a39bc:	e9cd 0100 	strd	r0, r1, [sp]
 80a39c0:	2b00      	cmp	r3, #0
 80a39c2:	f47f abb2 	bne.w	80a312a <__ieee754_pow+0x1b2>
 80a39c6:	f8cd b008 	str.w	fp, [sp, #8]
 80a39ca:	f7ff bb4b 	b.w	80a3064 <__ieee754_pow+0xec>
 80a39ce:	465a      	mov	r2, fp
 80a39d0:	f000 f9ae 	bl	80a3d30 <scalbn>
 80a39d4:	e6c7      	b.n	80a3766 <__ieee754_pow+0x7ee>
 80a39d6:	f001 0101 	and.w	r1, r1, #1
 80a39da:	f1c1 0202 	rsb	r2, r1, #2
 80a39de:	9202      	str	r2, [sp, #8]
 80a39e0:	2b00      	cmp	r3, #0
 80a39e2:	f43f aaee 	beq.w	80a2fc2 <__ieee754_pow+0x4a>
 80a39e6:	f7ff bb35 	b.w	80a3054 <__ieee754_pow+0xdc>
 80a39ea:	f001 0101 	and.w	r1, r1, #1
 80a39ee:	f1c1 0302 	rsb	r3, r1, #2
 80a39f2:	9302      	str	r3, [sp, #8]
 80a39f4:	f7ff bae5 	b.w	80a2fc2 <__ieee754_pow+0x4a>
 80a39f8:	151b      	asrs	r3, r3, #20
 80a39fa:	e5d2      	b.n	80a35a2 <__ieee754_pow+0x62a>
 80a39fc:	f3af 8000 	nop.w
 80a3a00:	60000000 	.word	0x60000000
 80a3a04:	3ff71547 	.word	0x3ff71547
 80a3a08:	f85ddf44 	.word	0xf85ddf44
 80a3a0c:	3e54ae0b 	.word	0x3e54ae0b
 80a3a10:	55555555 	.word	0x55555555
 80a3a14:	3fd55555 	.word	0x3fd55555
 80a3a18:	652b82fe 	.word	0x652b82fe
 80a3a1c:	3ff71547 	.word	0x3ff71547
 80a3a20:	8800759c 	.word	0x8800759c
 80a3a24:	7e37e43c 	.word	0x7e37e43c
 80a3a28:	40000000 	.word	0x40000000
 80a3a2c:	3fe2b803 	.word	0x3fe2b803
 80a3a30:	43cfd006 	.word	0x43cfd006
 80a3a34:	3e4cfdeb 	.word	0x3e4cfdeb
 80a3a38:	3ff00000 	.word	0x3ff00000
 80a3a3c:	3fd00000 	.word	0x3fd00000
 80a3a40:	3fe00000 	.word	0x3fe00000
 80a3a44:	3ff80000 	.word	0x3ff80000

080a3a48 <__ieee754_sqrt>:
 80a3a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3a4c:	4e60      	ldr	r6, [pc, #384]	; (80a3bd0 <__ieee754_sqrt+0x188>)
 80a3a4e:	4605      	mov	r5, r0
 80a3a50:	ea36 0201 	bics.w	r2, r6, r1
 80a3a54:	460c      	mov	r4, r1
 80a3a56:	f000 809e 	beq.w	80a3b96 <__ieee754_sqrt+0x14e>
 80a3a5a:	2900      	cmp	r1, #0
 80a3a5c:	460b      	mov	r3, r1
 80a3a5e:	4684      	mov	ip, r0
 80a3a60:	dd54      	ble.n	80a3b0c <__ieee754_sqrt+0xc4>
 80a3a62:	1509      	asrs	r1, r1, #20
 80a3a64:	d062      	beq.n	80a3b2c <__ieee754_sqrt+0xe4>
 80a3a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3a6a:	07c8      	lsls	r0, r1, #31
 80a3a6c:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80a3a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3a74:	d404      	bmi.n	80a3a80 <__ieee754_sqrt+0x38>
 80a3a76:	005b      	lsls	r3, r3, #1
 80a3a78:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a3a7c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a3a80:	2600      	movs	r6, #0
 80a3a82:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80a3a86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a3a8a:	f04f 0e16 	mov.w	lr, #22
 80a3a8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a3a92:	4634      	mov	r4, r6
 80a3a94:	107f      	asrs	r7, r7, #1
 80a3a96:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a3a9a:	18a1      	adds	r1, r4, r2
 80a3a9c:	4299      	cmp	r1, r3
 80a3a9e:	dc02      	bgt.n	80a3aa6 <__ieee754_sqrt+0x5e>
 80a3aa0:	1a5b      	subs	r3, r3, r1
 80a3aa2:	188c      	adds	r4, r1, r2
 80a3aa4:	4416      	add	r6, r2
 80a3aa6:	005b      	lsls	r3, r3, #1
 80a3aa8:	f1be 0e01 	subs.w	lr, lr, #1
 80a3aac:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a3ab0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a3ab4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a3ab8:	d1ef      	bne.n	80a3a9a <__ieee754_sqrt+0x52>
 80a3aba:	4675      	mov	r5, lr
 80a3abc:	2020      	movs	r0, #32
 80a3abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a3ac2:	e00a      	b.n	80a3ada <__ieee754_sqrt+0x92>
 80a3ac4:	d043      	beq.n	80a3b4e <__ieee754_sqrt+0x106>
 80a3ac6:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80a3aca:	3801      	subs	r0, #1
 80a3acc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a3ad0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a3ad4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a3ad8:	d042      	beq.n	80a3b60 <__ieee754_sqrt+0x118>
 80a3ada:	42a3      	cmp	r3, r4
 80a3adc:	eb02 010e 	add.w	r1, r2, lr
 80a3ae0:	ddf0      	ble.n	80a3ac4 <__ieee754_sqrt+0x7c>
 80a3ae2:	2900      	cmp	r1, #0
 80a3ae4:	eb01 0e02 	add.w	lr, r1, r2
 80a3ae8:	db0a      	blt.n	80a3b00 <__ieee754_sqrt+0xb8>
 80a3aea:	46a0      	mov	r8, r4
 80a3aec:	1b1b      	subs	r3, r3, r4
 80a3aee:	4561      	cmp	r1, ip
 80a3af0:	bf88      	it	hi
 80a3af2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a3af6:	4644      	mov	r4, r8
 80a3af8:	ebac 0c01 	sub.w	ip, ip, r1
 80a3afc:	4415      	add	r5, r2
 80a3afe:	e7e2      	b.n	80a3ac6 <__ieee754_sqrt+0x7e>
 80a3b00:	f1be 0f00 	cmp.w	lr, #0
 80a3b04:	dbf1      	blt.n	80a3aea <__ieee754_sqrt+0xa2>
 80a3b06:	f104 0801 	add.w	r8, r4, #1
 80a3b0a:	e7ef      	b.n	80a3aec <__ieee754_sqrt+0xa4>
 80a3b0c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a3b10:	4302      	orrs	r2, r0
 80a3b12:	d036      	beq.n	80a3b82 <__ieee754_sqrt+0x13a>
 80a3b14:	2900      	cmp	r1, #0
 80a3b16:	d14c      	bne.n	80a3bb2 <__ieee754_sqrt+0x16a>
 80a3b18:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 80a3b1c:	4613      	mov	r3, r2
 80a3b1e:	3915      	subs	r1, #21
 80a3b20:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 80a3b24:	2a00      	cmp	r2, #0
 80a3b26:	d0f7      	beq.n	80a3b18 <__ieee754_sqrt+0xd0>
 80a3b28:	02d6      	lsls	r6, r2, #11
 80a3b2a:	d44c      	bmi.n	80a3bc6 <__ieee754_sqrt+0x17e>
 80a3b2c:	2000      	movs	r0, #0
 80a3b2e:	005b      	lsls	r3, r3, #1
 80a3b30:	02dd      	lsls	r5, r3, #11
 80a3b32:	4604      	mov	r4, r0
 80a3b34:	f100 0001 	add.w	r0, r0, #1
 80a3b38:	d5f9      	bpl.n	80a3b2e <__ieee754_sqrt+0xe6>
 80a3b3a:	461a      	mov	r2, r3
 80a3b3c:	4663      	mov	r3, ip
 80a3b3e:	fa0c fc00 	lsl.w	ip, ip, r0
 80a3b42:	f1c0 0020 	rsb	r0, r0, #32
 80a3b46:	40c3      	lsrs	r3, r0
 80a3b48:	1b09      	subs	r1, r1, r4
 80a3b4a:	4313      	orrs	r3, r2
 80a3b4c:	e78b      	b.n	80a3a66 <__ieee754_sqrt+0x1e>
 80a3b4e:	4561      	cmp	r1, ip
 80a3b50:	d8b9      	bhi.n	80a3ac6 <__ieee754_sqrt+0x7e>
 80a3b52:	2900      	cmp	r1, #0
 80a3b54:	eb01 0e02 	add.w	lr, r1, r2
 80a3b58:	dbd2      	blt.n	80a3b00 <__ieee754_sqrt+0xb8>
 80a3b5a:	4698      	mov	r8, r3
 80a3b5c:	2300      	movs	r3, #0
 80a3b5e:	e7ca      	b.n	80a3af6 <__ieee754_sqrt+0xae>
 80a3b60:	ea53 030c 	orrs.w	r3, r3, ip
 80a3b64:	d111      	bne.n	80a3b8a <__ieee754_sqrt+0x142>
 80a3b66:	0868      	lsrs	r0, r5, #1
 80a3b68:	1073      	asrs	r3, r6, #1
 80a3b6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a3b6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a3b72:	07f2      	lsls	r2, r6, #31
 80a3b74:	bf48      	it	mi
 80a3b76:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a3b7a:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80a3b7e:	4605      	mov	r5, r0
 80a3b80:	464c      	mov	r4, r9
 80a3b82:	4628      	mov	r0, r5
 80a3b84:	4621      	mov	r1, r4
 80a3b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3b8a:	1c69      	adds	r1, r5, #1
 80a3b8c:	bf16      	itet	ne
 80a3b8e:	1c68      	addne	r0, r5, #1
 80a3b90:	3601      	addeq	r6, #1
 80a3b92:	0840      	lsrne	r0, r0, #1
 80a3b94:	e7e8      	b.n	80a3b68 <__ieee754_sqrt+0x120>
 80a3b96:	4602      	mov	r2, r0
 80a3b98:	460b      	mov	r3, r1
 80a3b9a:	f000 fb03 	bl	80a41a4 <__aeabi_dmul>
 80a3b9e:	462a      	mov	r2, r5
 80a3ba0:	4623      	mov	r3, r4
 80a3ba2:	f000 f949 	bl	80a3e38 <__adddf3>
 80a3ba6:	4605      	mov	r5, r0
 80a3ba8:	460c      	mov	r4, r1
 80a3baa:	4628      	mov	r0, r5
 80a3bac:	4621      	mov	r1, r4
 80a3bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3bb2:	4602      	mov	r2, r0
 80a3bb4:	f000 f93e 	bl	80a3e34 <__aeabi_dsub>
 80a3bb8:	4602      	mov	r2, r0
 80a3bba:	460b      	mov	r3, r1
 80a3bbc:	f000 fc1c 	bl	80a43f8 <__aeabi_ddiv>
 80a3bc0:	4605      	mov	r5, r0
 80a3bc2:	460c      	mov	r4, r1
 80a3bc4:	e7dd      	b.n	80a3b82 <__ieee754_sqrt+0x13a>
 80a3bc6:	4663      	mov	r3, ip
 80a3bc8:	2020      	movs	r0, #32
 80a3bca:	f04f 34ff 	mov.w	r4, #4294967295
 80a3bce:	e7ba      	b.n	80a3b46 <__ieee754_sqrt+0xfe>
 80a3bd0:	7ff00000 	.word	0x7ff00000

080a3bd4 <fabs>:
 80a3bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3bd8:	4770      	bx	lr
 80a3bda:	bf00      	nop

080a3bdc <finite>:
 80a3bdc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a3be0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a3be4:	0fc0      	lsrs	r0, r0, #31
 80a3be6:	4770      	bx	lr

080a3be8 <nan>:
 80a3be8:	2000      	movs	r0, #0
 80a3bea:	4901      	ldr	r1, [pc, #4]	; (80a3bf0 <nan+0x8>)
 80a3bec:	4770      	bx	lr
 80a3bee:	bf00      	nop
 80a3bf0:	7ff80000 	.word	0x7ff80000

080a3bf4 <rint>:
 80a3bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3bf6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80a3bfa:	f2a5 3cff 	subw	ip, r5, #1023	; 0x3ff
 80a3bfe:	f1bc 0f13 	cmp.w	ip, #19
 80a3c02:	4602      	mov	r2, r0
 80a3c04:	460b      	mov	r3, r1
 80a3c06:	460c      	mov	r4, r1
 80a3c08:	4686      	mov	lr, r0
 80a3c0a:	b083      	sub	sp, #12
 80a3c0c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80a3c10:	dc65      	bgt.n	80a3cde <rint+0xea>
 80a3c12:	f1bc 0f00 	cmp.w	ip, #0
 80a3c16:	db30      	blt.n	80a3c7a <rint+0x86>
 80a3c18:	4942      	ldr	r1, [pc, #264]	; (80a3d24 <rint+0x130>)
 80a3c1a:	fa41 f10c 	asr.w	r1, r1, ip
 80a3c1e:	ea03 0001 	and.w	r0, r3, r1
 80a3c22:	4310      	orrs	r0, r2
 80a3c24:	d061      	beq.n	80a3cea <rint+0xf6>
 80a3c26:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a3c2a:	ea52 0e03 	orrs.w	lr, r2, r3
 80a3c2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3c32:	d00d      	beq.n	80a3c50 <rint+0x5c>
 80a3c34:	ea24 0101 	bic.w	r1, r4, r1
 80a3c38:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80a3c3c:	f1bc 0f13 	cmp.w	ip, #19
 80a3c40:	bf0c      	ite	eq
 80a3c42:	f04f 4e00 	moveq.w	lr, #2147483648	; 0x80000000
 80a3c46:	f04f 0e00 	movne.w	lr, #0
 80a3c4a:	fa44 f40c 	asr.w	r4, r4, ip
 80a3c4e:	430c      	orrs	r4, r1
 80a3c50:	4935      	ldr	r1, [pc, #212]	; (80a3d28 <rint+0x134>)
 80a3c52:	4623      	mov	r3, r4
 80a3c54:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a3c58:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a3c5c:	4672      	mov	r2, lr
 80a3c5e:	4630      	mov	r0, r6
 80a3c60:	4639      	mov	r1, r7
 80a3c62:	f000 f8e9 	bl	80a3e38 <__adddf3>
 80a3c66:	e9cd 0100 	strd	r0, r1, [sp]
 80a3c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3c6e:	4632      	mov	r2, r6
 80a3c70:	463b      	mov	r3, r7
 80a3c72:	f000 f8df 	bl	80a3e34 <__aeabi_dsub>
 80a3c76:	b003      	add	sp, #12
 80a3c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3c7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3c7e:	4301      	orrs	r1, r0
 80a3c80:	4619      	mov	r1, r3
 80a3c82:	d0f8      	beq.n	80a3c76 <rint+0x82>
 80a3c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3c88:	ea43 0e00 	orr.w	lr, r3, r0
 80a3c8c:	f1ce 0300 	rsb	r3, lr, #0
 80a3c90:	ea43 030e 	orr.w	r3, r3, lr
 80a3c94:	0c62      	lsrs	r2, r4, #17
 80a3c96:	0b1b      	lsrs	r3, r3, #12
 80a3c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a3c9c:	0452      	lsls	r2, r2, #17
 80a3c9e:	ea43 0102 	orr.w	r1, r3, r2
 80a3ca2:	460b      	mov	r3, r1
 80a3ca4:	4920      	ldr	r1, [pc, #128]	; (80a3d28 <rint+0x134>)
 80a3ca6:	4602      	mov	r2, r0
 80a3ca8:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a3cac:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a3cb0:	4630      	mov	r0, r6
 80a3cb2:	4639      	mov	r1, r7
 80a3cb4:	f000 f8c0 	bl	80a3e38 <__adddf3>
 80a3cb8:	e9cd 0100 	strd	r0, r1, [sp]
 80a3cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3cc0:	4632      	mov	r2, r6
 80a3cc2:	463b      	mov	r3, r7
 80a3cc4:	f000 f8b6 	bl	80a3e34 <__aeabi_dsub>
 80a3cc8:	4602      	mov	r2, r0
 80a3cca:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80a3cce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3cd2:	ea41 0304 	orr.w	r3, r1, r4
 80a3cd6:	4610      	mov	r0, r2
 80a3cd8:	4619      	mov	r1, r3
 80a3cda:	b003      	add	sp, #12
 80a3cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3cde:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80a3ce2:	dd06      	ble.n	80a3cf2 <rint+0xfe>
 80a3ce4:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80a3ce8:	d018      	beq.n	80a3d1c <rint+0x128>
 80a3cea:	4610      	mov	r0, r2
 80a3cec:	4619      	mov	r1, r3
 80a3cee:	b003      	add	sp, #12
 80a3cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3cf2:	f04f 31ff 	mov.w	r1, #4294967295
 80a3cf6:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80a3cfa:	40e9      	lsrs	r1, r5
 80a3cfc:	4208      	tst	r0, r1
 80a3cfe:	d0f4      	beq.n	80a3cea <rint+0xf6>
 80a3d00:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a3d04:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a3d08:	d0a2      	beq.n	80a3c50 <rint+0x5c>
 80a3d0a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 80a3d0e:	ea20 0303 	bic.w	r3, r0, r3
 80a3d12:	fa4e f505 	asr.w	r5, lr, r5
 80a3d16:	ea43 0e05 	orr.w	lr, r3, r5
 80a3d1a:	e799      	b.n	80a3c50 <rint+0x5c>
 80a3d1c:	f000 f88c 	bl	80a3e38 <__adddf3>
 80a3d20:	e7a9      	b.n	80a3c76 <rint+0x82>
 80a3d22:	bf00      	nop
 80a3d24:	000fffff 	.word	0x000fffff
 80a3d28:	080a50b8 	.word	0x080a50b8
 80a3d2c:	00000000 	.word	0x00000000

080a3d30 <scalbn>:
 80a3d30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a3d34:	b570      	push	{r4, r5, r6, lr}
 80a3d36:	468c      	mov	ip, r1
 80a3d38:	4604      	mov	r4, r0
 80a3d3a:	460d      	mov	r5, r1
 80a3d3c:	4616      	mov	r6, r2
 80a3d3e:	bb7b      	cbnz	r3, 80a3da0 <scalbn+0x70>
 80a3d40:	4603      	mov	r3, r0
 80a3d42:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80a3d46:	ea5c 0303 	orrs.w	r3, ip, r3
 80a3d4a:	d028      	beq.n	80a3d9e <scalbn+0x6e>
 80a3d4c:	4b32      	ldr	r3, [pc, #200]	; (80a3e18 <scalbn+0xe8>)
 80a3d4e:	2200      	movs	r2, #0
 80a3d50:	f000 fa28 	bl	80a41a4 <__aeabi_dmul>
 80a3d54:	4b31      	ldr	r3, [pc, #196]	; (80a3e1c <scalbn+0xec>)
 80a3d56:	4604      	mov	r4, r0
 80a3d58:	429e      	cmp	r6, r3
 80a3d5a:	460d      	mov	r5, r1
 80a3d5c:	db1a      	blt.n	80a3d94 <scalbn+0x64>
 80a3d5e:	468c      	mov	ip, r1
 80a3d60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a3d64:	3b36      	subs	r3, #54	; 0x36
 80a3d66:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a3d6a:	4433      	add	r3, r6
 80a3d6c:	4293      	cmp	r3, r2
 80a3d6e:	dc20      	bgt.n	80a3db2 <scalbn+0x82>
 80a3d70:	2b00      	cmp	r3, #0
 80a3d72:	dc3e      	bgt.n	80a3df2 <scalbn+0xc2>
 80a3d74:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a3d78:	da2c      	bge.n	80a3dd4 <scalbn+0xa4>
 80a3d7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a3d7e:	429e      	cmp	r6, r3
 80a3d80:	dc17      	bgt.n	80a3db2 <scalbn+0x82>
 80a3d82:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a3d86:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a3d8a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a3d8e:	4824      	ldr	r0, [pc, #144]	; (80a3e20 <scalbn+0xf0>)
 80a3d90:	f041 011f 	orr.w	r1, r1, #31
 80a3d94:	a31c      	add	r3, pc, #112	; (adr r3, 80a3e08 <scalbn+0xd8>)
 80a3d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d9a:	f000 fa03 	bl	80a41a4 <__aeabi_dmul>
 80a3d9e:	bd70      	pop	{r4, r5, r6, pc}
 80a3da0:	f240 7eff 	movw	lr, #2047	; 0x7ff
 80a3da4:	4573      	cmp	r3, lr
 80a3da6:	d1de      	bne.n	80a3d66 <scalbn+0x36>
 80a3da8:	4602      	mov	r2, r0
 80a3daa:	460b      	mov	r3, r1
 80a3dac:	f000 f844 	bl	80a3e38 <__adddf3>
 80a3db0:	bd70      	pop	{r4, r5, r6, pc}
 80a3db2:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a3db6:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 80a3dba:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a3dbe:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a3dc2:	a313      	add	r3, pc, #76	; (adr r3, 80a3e10 <scalbn+0xe0>)
 80a3dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3dc8:	4816      	ldr	r0, [pc, #88]	; (80a3e24 <scalbn+0xf4>)
 80a3dca:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a3dce:	f000 f9e9 	bl	80a41a4 <__aeabi_dmul>
 80a3dd2:	bd70      	pop	{r4, r5, r6, pc}
 80a3dd4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a3dd8:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80a3ddc:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a3de0:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 80a3de4:	2200      	movs	r2, #0
 80a3de6:	4620      	mov	r0, r4
 80a3de8:	4629      	mov	r1, r5
 80a3dea:	4b0f      	ldr	r3, [pc, #60]	; (80a3e28 <scalbn+0xf8>)
 80a3dec:	f000 f9da 	bl	80a41a4 <__aeabi_dmul>
 80a3df0:	bd70      	pop	{r4, r5, r6, pc}
 80a3df2:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a3df6:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a3dfa:	4620      	mov	r0, r4
 80a3dfc:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 80a3e00:	bd70      	pop	{r4, r5, r6, pc}
 80a3e02:	bf00      	nop
 80a3e04:	f3af 8000 	nop.w
 80a3e08:	c2f8f359 	.word	0xc2f8f359
 80a3e0c:	01a56e1f 	.word	0x01a56e1f
 80a3e10:	8800759c 	.word	0x8800759c
 80a3e14:	7e37e43c 	.word	0x7e37e43c
 80a3e18:	43500000 	.word	0x43500000
 80a3e1c:	ffff3cb0 	.word	0xffff3cb0
 80a3e20:	c2f8f359 	.word	0xc2f8f359
 80a3e24:	8800759c 	.word	0x8800759c
 80a3e28:	3c900000 	.word	0x3c900000

080a3e2c <__aeabi_drsub>:
 80a3e2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3e30:	e002      	b.n	80a3e38 <__adddf3>
 80a3e32:	bf00      	nop

080a3e34 <__aeabi_dsub>:
 80a3e34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3e38 <__adddf3>:
 80a3e38:	b530      	push	{r4, r5, lr}
 80a3e3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3e3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3e42:	ea94 0f05 	teq	r4, r5
 80a3e46:	bf08      	it	eq
 80a3e48:	ea90 0f02 	teqeq	r0, r2
 80a3e4c:	bf1f      	itttt	ne
 80a3e4e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3e52:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3e56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3e5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3e5e:	f000 80e2 	beq.w	80a4026 <__adddf3+0x1ee>
 80a3e62:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3e66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3e6a:	bfb8      	it	lt
 80a3e6c:	426d      	neglt	r5, r5
 80a3e6e:	dd0c      	ble.n	80a3e8a <__adddf3+0x52>
 80a3e70:	442c      	add	r4, r5
 80a3e72:	ea80 0202 	eor.w	r2, r0, r2
 80a3e76:	ea81 0303 	eor.w	r3, r1, r3
 80a3e7a:	ea82 0000 	eor.w	r0, r2, r0
 80a3e7e:	ea83 0101 	eor.w	r1, r3, r1
 80a3e82:	ea80 0202 	eor.w	r2, r0, r2
 80a3e86:	ea81 0303 	eor.w	r3, r1, r3
 80a3e8a:	2d36      	cmp	r5, #54	; 0x36
 80a3e8c:	bf88      	it	hi
 80a3e8e:	bd30      	pophi	{r4, r5, pc}
 80a3e90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3e94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3e98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3e9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3ea0:	d002      	beq.n	80a3ea8 <__adddf3+0x70>
 80a3ea2:	4240      	negs	r0, r0
 80a3ea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3ea8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3eac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3eb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3eb4:	d002      	beq.n	80a3ebc <__adddf3+0x84>
 80a3eb6:	4252      	negs	r2, r2
 80a3eb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3ebc:	ea94 0f05 	teq	r4, r5
 80a3ec0:	f000 80a7 	beq.w	80a4012 <__adddf3+0x1da>
 80a3ec4:	f1a4 0401 	sub.w	r4, r4, #1
 80a3ec8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3ecc:	db0d      	blt.n	80a3eea <__adddf3+0xb2>
 80a3ece:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3ed2:	fa22 f205 	lsr.w	r2, r2, r5
 80a3ed6:	1880      	adds	r0, r0, r2
 80a3ed8:	f141 0100 	adc.w	r1, r1, #0
 80a3edc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3ee0:	1880      	adds	r0, r0, r2
 80a3ee2:	fa43 f305 	asr.w	r3, r3, r5
 80a3ee6:	4159      	adcs	r1, r3
 80a3ee8:	e00e      	b.n	80a3f08 <__adddf3+0xd0>
 80a3eea:	f1a5 0520 	sub.w	r5, r5, #32
 80a3eee:	f10e 0e20 	add.w	lr, lr, #32
 80a3ef2:	2a01      	cmp	r2, #1
 80a3ef4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3ef8:	bf28      	it	cs
 80a3efa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3efe:	fa43 f305 	asr.w	r3, r3, r5
 80a3f02:	18c0      	adds	r0, r0, r3
 80a3f04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f0c:	d507      	bpl.n	80a3f1e <__adddf3+0xe6>
 80a3f0e:	f04f 0e00 	mov.w	lr, #0
 80a3f12:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3f16:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3f1a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3f1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3f22:	d31b      	bcc.n	80a3f5c <__adddf3+0x124>
 80a3f24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3f28:	d30c      	bcc.n	80a3f44 <__adddf3+0x10c>
 80a3f2a:	0849      	lsrs	r1, r1, #1
 80a3f2c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3f30:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3f34:	f104 0401 	add.w	r4, r4, #1
 80a3f38:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3f3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3f40:	f080 809a 	bcs.w	80a4078 <__adddf3+0x240>
 80a3f44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3f48:	bf08      	it	eq
 80a3f4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3f4e:	f150 0000 	adcs.w	r0, r0, #0
 80a3f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3f56:	ea41 0105 	orr.w	r1, r1, r5
 80a3f5a:	bd30      	pop	{r4, r5, pc}
 80a3f5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3f60:	4140      	adcs	r0, r0
 80a3f62:	eb41 0101 	adc.w	r1, r1, r1
 80a3f66:	3c01      	subs	r4, #1
 80a3f68:	bf28      	it	cs
 80a3f6a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3f6e:	d2e9      	bcs.n	80a3f44 <__adddf3+0x10c>
 80a3f70:	f091 0f00 	teq	r1, #0
 80a3f74:	bf04      	itt	eq
 80a3f76:	4601      	moveq	r1, r0
 80a3f78:	2000      	moveq	r0, #0
 80a3f7a:	fab1 f381 	clz	r3, r1
 80a3f7e:	bf08      	it	eq
 80a3f80:	3320      	addeq	r3, #32
 80a3f82:	f1a3 030b 	sub.w	r3, r3, #11
 80a3f86:	f1b3 0220 	subs.w	r2, r3, #32
 80a3f8a:	da0c      	bge.n	80a3fa6 <__adddf3+0x16e>
 80a3f8c:	320c      	adds	r2, #12
 80a3f8e:	dd08      	ble.n	80a3fa2 <__adddf3+0x16a>
 80a3f90:	f102 0c14 	add.w	ip, r2, #20
 80a3f94:	f1c2 020c 	rsb	r2, r2, #12
 80a3f98:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3f9c:	fa21 f102 	lsr.w	r1, r1, r2
 80a3fa0:	e00c      	b.n	80a3fbc <__adddf3+0x184>
 80a3fa2:	f102 0214 	add.w	r2, r2, #20
 80a3fa6:	bfd8      	it	le
 80a3fa8:	f1c2 0c20 	rsble	ip, r2, #32
 80a3fac:	fa01 f102 	lsl.w	r1, r1, r2
 80a3fb0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3fb4:	bfdc      	itt	le
 80a3fb6:	ea41 010c 	orrle.w	r1, r1, ip
 80a3fba:	4090      	lslle	r0, r2
 80a3fbc:	1ae4      	subs	r4, r4, r3
 80a3fbe:	bfa2      	ittt	ge
 80a3fc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3fc4:	4329      	orrge	r1, r5
 80a3fc6:	bd30      	popge	{r4, r5, pc}
 80a3fc8:	ea6f 0404 	mvn.w	r4, r4
 80a3fcc:	3c1f      	subs	r4, #31
 80a3fce:	da1c      	bge.n	80a400a <__adddf3+0x1d2>
 80a3fd0:	340c      	adds	r4, #12
 80a3fd2:	dc0e      	bgt.n	80a3ff2 <__adddf3+0x1ba>
 80a3fd4:	f104 0414 	add.w	r4, r4, #20
 80a3fd8:	f1c4 0220 	rsb	r2, r4, #32
 80a3fdc:	fa20 f004 	lsr.w	r0, r0, r4
 80a3fe0:	fa01 f302 	lsl.w	r3, r1, r2
 80a3fe4:	ea40 0003 	orr.w	r0, r0, r3
 80a3fe8:	fa21 f304 	lsr.w	r3, r1, r4
 80a3fec:	ea45 0103 	orr.w	r1, r5, r3
 80a3ff0:	bd30      	pop	{r4, r5, pc}
 80a3ff2:	f1c4 040c 	rsb	r4, r4, #12
 80a3ff6:	f1c4 0220 	rsb	r2, r4, #32
 80a3ffa:	fa20 f002 	lsr.w	r0, r0, r2
 80a3ffe:	fa01 f304 	lsl.w	r3, r1, r4
 80a4002:	ea40 0003 	orr.w	r0, r0, r3
 80a4006:	4629      	mov	r1, r5
 80a4008:	bd30      	pop	{r4, r5, pc}
 80a400a:	fa21 f004 	lsr.w	r0, r1, r4
 80a400e:	4629      	mov	r1, r5
 80a4010:	bd30      	pop	{r4, r5, pc}
 80a4012:	f094 0f00 	teq	r4, #0
 80a4016:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a401a:	bf06      	itte	eq
 80a401c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4020:	3401      	addeq	r4, #1
 80a4022:	3d01      	subne	r5, #1
 80a4024:	e74e      	b.n	80a3ec4 <__adddf3+0x8c>
 80a4026:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a402a:	bf18      	it	ne
 80a402c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4030:	d029      	beq.n	80a4086 <__adddf3+0x24e>
 80a4032:	ea94 0f05 	teq	r4, r5
 80a4036:	bf08      	it	eq
 80a4038:	ea90 0f02 	teqeq	r0, r2
 80a403c:	d005      	beq.n	80a404a <__adddf3+0x212>
 80a403e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4042:	bf04      	itt	eq
 80a4044:	4619      	moveq	r1, r3
 80a4046:	4610      	moveq	r0, r2
 80a4048:	bd30      	pop	{r4, r5, pc}
 80a404a:	ea91 0f03 	teq	r1, r3
 80a404e:	bf1e      	ittt	ne
 80a4050:	2100      	movne	r1, #0
 80a4052:	2000      	movne	r0, #0
 80a4054:	bd30      	popne	{r4, r5, pc}
 80a4056:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a405a:	d105      	bne.n	80a4068 <__adddf3+0x230>
 80a405c:	0040      	lsls	r0, r0, #1
 80a405e:	4149      	adcs	r1, r1
 80a4060:	bf28      	it	cs
 80a4062:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4066:	bd30      	pop	{r4, r5, pc}
 80a4068:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a406c:	bf3c      	itt	cc
 80a406e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4072:	bd30      	popcc	{r4, r5, pc}
 80a4074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4078:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a407c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4080:	f04f 0000 	mov.w	r0, #0
 80a4084:	bd30      	pop	{r4, r5, pc}
 80a4086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a408a:	bf1a      	itte	ne
 80a408c:	4619      	movne	r1, r3
 80a408e:	4610      	movne	r0, r2
 80a4090:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4094:	bf1c      	itt	ne
 80a4096:	460b      	movne	r3, r1
 80a4098:	4602      	movne	r2, r0
 80a409a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a409e:	bf06      	itte	eq
 80a40a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a40a4:	ea91 0f03 	teqeq	r1, r3
 80a40a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a40ac:	bd30      	pop	{r4, r5, pc}
 80a40ae:	bf00      	nop

080a40b0 <__aeabi_ui2d>:
 80a40b0:	f090 0f00 	teq	r0, #0
 80a40b4:	bf04      	itt	eq
 80a40b6:	2100      	moveq	r1, #0
 80a40b8:	4770      	bxeq	lr
 80a40ba:	b530      	push	{r4, r5, lr}
 80a40bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a40c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a40c4:	f04f 0500 	mov.w	r5, #0
 80a40c8:	f04f 0100 	mov.w	r1, #0
 80a40cc:	e750      	b.n	80a3f70 <__adddf3+0x138>
 80a40ce:	bf00      	nop

080a40d0 <__aeabi_i2d>:
 80a40d0:	f090 0f00 	teq	r0, #0
 80a40d4:	bf04      	itt	eq
 80a40d6:	2100      	moveq	r1, #0
 80a40d8:	4770      	bxeq	lr
 80a40da:	b530      	push	{r4, r5, lr}
 80a40dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a40e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a40e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a40e8:	bf48      	it	mi
 80a40ea:	4240      	negmi	r0, r0
 80a40ec:	f04f 0100 	mov.w	r1, #0
 80a40f0:	e73e      	b.n	80a3f70 <__adddf3+0x138>
 80a40f2:	bf00      	nop

080a40f4 <__aeabi_f2d>:
 80a40f4:	0042      	lsls	r2, r0, #1
 80a40f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a40fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a40fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4102:	bf1f      	itttt	ne
 80a4104:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4108:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a410c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4110:	4770      	bxne	lr
 80a4112:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a4116:	bf08      	it	eq
 80a4118:	4770      	bxeq	lr
 80a411a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a411e:	bf04      	itt	eq
 80a4120:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a4124:	4770      	bxeq	lr
 80a4126:	b530      	push	{r4, r5, lr}
 80a4128:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a412c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4130:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4134:	e71c      	b.n	80a3f70 <__adddf3+0x138>
 80a4136:	bf00      	nop

080a4138 <__aeabi_ul2d>:
 80a4138:	ea50 0201 	orrs.w	r2, r0, r1
 80a413c:	bf08      	it	eq
 80a413e:	4770      	bxeq	lr
 80a4140:	b530      	push	{r4, r5, lr}
 80a4142:	f04f 0500 	mov.w	r5, #0
 80a4146:	e00a      	b.n	80a415e <__aeabi_l2d+0x16>

080a4148 <__aeabi_l2d>:
 80a4148:	ea50 0201 	orrs.w	r2, r0, r1
 80a414c:	bf08      	it	eq
 80a414e:	4770      	bxeq	lr
 80a4150:	b530      	push	{r4, r5, lr}
 80a4152:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4156:	d502      	bpl.n	80a415e <__aeabi_l2d+0x16>
 80a4158:	4240      	negs	r0, r0
 80a415a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a415e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4162:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4166:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a416a:	f43f aed8 	beq.w	80a3f1e <__adddf3+0xe6>
 80a416e:	f04f 0203 	mov.w	r2, #3
 80a4172:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4176:	bf18      	it	ne
 80a4178:	3203      	addne	r2, #3
 80a417a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a417e:	bf18      	it	ne
 80a4180:	3203      	addne	r2, #3
 80a4182:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4186:	f1c2 0320 	rsb	r3, r2, #32
 80a418a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a418e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4192:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4196:	ea40 000e 	orr.w	r0, r0, lr
 80a419a:	fa21 f102 	lsr.w	r1, r1, r2
 80a419e:	4414      	add	r4, r2
 80a41a0:	e6bd      	b.n	80a3f1e <__adddf3+0xe6>
 80a41a2:	bf00      	nop

080a41a4 <__aeabi_dmul>:
 80a41a4:	b570      	push	{r4, r5, r6, lr}
 80a41a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a41aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a41ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a41b2:	bf1d      	ittte	ne
 80a41b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a41b8:	ea94 0f0c 	teqne	r4, ip
 80a41bc:	ea95 0f0c 	teqne	r5, ip
 80a41c0:	f000 f8de 	bleq	80a4380 <__aeabi_dmul+0x1dc>
 80a41c4:	442c      	add	r4, r5
 80a41c6:	ea81 0603 	eor.w	r6, r1, r3
 80a41ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a41ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a41d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a41d6:	bf18      	it	ne
 80a41d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a41dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a41e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a41e4:	d038      	beq.n	80a4258 <__aeabi_dmul+0xb4>
 80a41e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a41ea:	f04f 0500 	mov.w	r5, #0
 80a41ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a41f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a41f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a41fa:	f04f 0600 	mov.w	r6, #0
 80a41fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4202:	f09c 0f00 	teq	ip, #0
 80a4206:	bf18      	it	ne
 80a4208:	f04e 0e01 	orrne.w	lr, lr, #1
 80a420c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4210:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4214:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4218:	d204      	bcs.n	80a4224 <__aeabi_dmul+0x80>
 80a421a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a421e:	416d      	adcs	r5, r5
 80a4220:	eb46 0606 	adc.w	r6, r6, r6
 80a4224:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4228:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a422c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4230:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4234:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4238:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a423c:	bf88      	it	hi
 80a423e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4242:	d81e      	bhi.n	80a4282 <__aeabi_dmul+0xde>
 80a4244:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4248:	bf08      	it	eq
 80a424a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a424e:	f150 0000 	adcs.w	r0, r0, #0
 80a4252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4256:	bd70      	pop	{r4, r5, r6, pc}
 80a4258:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a425c:	ea46 0101 	orr.w	r1, r6, r1
 80a4260:	ea40 0002 	orr.w	r0, r0, r2
 80a4264:	ea81 0103 	eor.w	r1, r1, r3
 80a4268:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a426c:	bfc2      	ittt	gt
 80a426e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4276:	bd70      	popgt	{r4, r5, r6, pc}
 80a4278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a427c:	f04f 0e00 	mov.w	lr, #0
 80a4280:	3c01      	subs	r4, #1
 80a4282:	f300 80ab 	bgt.w	80a43dc <__aeabi_dmul+0x238>
 80a4286:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a428a:	bfde      	ittt	le
 80a428c:	2000      	movle	r0, #0
 80a428e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4292:	bd70      	pople	{r4, r5, r6, pc}
 80a4294:	f1c4 0400 	rsb	r4, r4, #0
 80a4298:	3c20      	subs	r4, #32
 80a429a:	da35      	bge.n	80a4308 <__aeabi_dmul+0x164>
 80a429c:	340c      	adds	r4, #12
 80a429e:	dc1b      	bgt.n	80a42d8 <__aeabi_dmul+0x134>
 80a42a0:	f104 0414 	add.w	r4, r4, #20
 80a42a4:	f1c4 0520 	rsb	r5, r4, #32
 80a42a8:	fa00 f305 	lsl.w	r3, r0, r5
 80a42ac:	fa20 f004 	lsr.w	r0, r0, r4
 80a42b0:	fa01 f205 	lsl.w	r2, r1, r5
 80a42b4:	ea40 0002 	orr.w	r0, r0, r2
 80a42b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a42bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a42c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a42c4:	fa21 f604 	lsr.w	r6, r1, r4
 80a42c8:	eb42 0106 	adc.w	r1, r2, r6
 80a42cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a42d0:	bf08      	it	eq
 80a42d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a42d6:	bd70      	pop	{r4, r5, r6, pc}
 80a42d8:	f1c4 040c 	rsb	r4, r4, #12
 80a42dc:	f1c4 0520 	rsb	r5, r4, #32
 80a42e0:	fa00 f304 	lsl.w	r3, r0, r4
 80a42e4:	fa20 f005 	lsr.w	r0, r0, r5
 80a42e8:	fa01 f204 	lsl.w	r2, r1, r4
 80a42ec:	ea40 0002 	orr.w	r0, r0, r2
 80a42f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a42f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a42f8:	f141 0100 	adc.w	r1, r1, #0
 80a42fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4300:	bf08      	it	eq
 80a4302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4306:	bd70      	pop	{r4, r5, r6, pc}
 80a4308:	f1c4 0520 	rsb	r5, r4, #32
 80a430c:	fa00 f205 	lsl.w	r2, r0, r5
 80a4310:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4314:	fa20 f304 	lsr.w	r3, r0, r4
 80a4318:	fa01 f205 	lsl.w	r2, r1, r5
 80a431c:	ea43 0302 	orr.w	r3, r3, r2
 80a4320:	fa21 f004 	lsr.w	r0, r1, r4
 80a4324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4328:	fa21 f204 	lsr.w	r2, r1, r4
 80a432c:	ea20 0002 	bic.w	r0, r0, r2
 80a4330:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4338:	bf08      	it	eq
 80a433a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a433e:	bd70      	pop	{r4, r5, r6, pc}
 80a4340:	f094 0f00 	teq	r4, #0
 80a4344:	d10f      	bne.n	80a4366 <__aeabi_dmul+0x1c2>
 80a4346:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a434a:	0040      	lsls	r0, r0, #1
 80a434c:	eb41 0101 	adc.w	r1, r1, r1
 80a4350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4354:	bf08      	it	eq
 80a4356:	3c01      	subeq	r4, #1
 80a4358:	d0f7      	beq.n	80a434a <__aeabi_dmul+0x1a6>
 80a435a:	ea41 0106 	orr.w	r1, r1, r6
 80a435e:	f095 0f00 	teq	r5, #0
 80a4362:	bf18      	it	ne
 80a4364:	4770      	bxne	lr
 80a4366:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a436a:	0052      	lsls	r2, r2, #1
 80a436c:	eb43 0303 	adc.w	r3, r3, r3
 80a4370:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4374:	bf08      	it	eq
 80a4376:	3d01      	subeq	r5, #1
 80a4378:	d0f7      	beq.n	80a436a <__aeabi_dmul+0x1c6>
 80a437a:	ea43 0306 	orr.w	r3, r3, r6
 80a437e:	4770      	bx	lr
 80a4380:	ea94 0f0c 	teq	r4, ip
 80a4384:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4388:	bf18      	it	ne
 80a438a:	ea95 0f0c 	teqne	r5, ip
 80a438e:	d00c      	beq.n	80a43aa <__aeabi_dmul+0x206>
 80a4390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4394:	bf18      	it	ne
 80a4396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a439a:	d1d1      	bne.n	80a4340 <__aeabi_dmul+0x19c>
 80a439c:	ea81 0103 	eor.w	r1, r1, r3
 80a43a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a43a4:	f04f 0000 	mov.w	r0, #0
 80a43a8:	bd70      	pop	{r4, r5, r6, pc}
 80a43aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a43ae:	bf06      	itte	eq
 80a43b0:	4610      	moveq	r0, r2
 80a43b2:	4619      	moveq	r1, r3
 80a43b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a43b8:	d019      	beq.n	80a43ee <__aeabi_dmul+0x24a>
 80a43ba:	ea94 0f0c 	teq	r4, ip
 80a43be:	d102      	bne.n	80a43c6 <__aeabi_dmul+0x222>
 80a43c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a43c4:	d113      	bne.n	80a43ee <__aeabi_dmul+0x24a>
 80a43c6:	ea95 0f0c 	teq	r5, ip
 80a43ca:	d105      	bne.n	80a43d8 <__aeabi_dmul+0x234>
 80a43cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a43d0:	bf1c      	itt	ne
 80a43d2:	4610      	movne	r0, r2
 80a43d4:	4619      	movne	r1, r3
 80a43d6:	d10a      	bne.n	80a43ee <__aeabi_dmul+0x24a>
 80a43d8:	ea81 0103 	eor.w	r1, r1, r3
 80a43dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a43e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a43e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a43e8:	f04f 0000 	mov.w	r0, #0
 80a43ec:	bd70      	pop	{r4, r5, r6, pc}
 80a43ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a43f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a43f6:	bd70      	pop	{r4, r5, r6, pc}

080a43f8 <__aeabi_ddiv>:
 80a43f8:	b570      	push	{r4, r5, r6, lr}
 80a43fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a43fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4402:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4406:	bf1d      	ittte	ne
 80a4408:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a440c:	ea94 0f0c 	teqne	r4, ip
 80a4410:	ea95 0f0c 	teqne	r5, ip
 80a4414:	f000 f8a7 	bleq	80a4566 <__aeabi_ddiv+0x16e>
 80a4418:	eba4 0405 	sub.w	r4, r4, r5
 80a441c:	ea81 0e03 	eor.w	lr, r1, r3
 80a4420:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4424:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4428:	f000 8088 	beq.w	80a453c <__aeabi_ddiv+0x144>
 80a442c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4430:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4434:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4438:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a443c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4440:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4444:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4448:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a444c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4450:	429d      	cmp	r5, r3
 80a4452:	bf08      	it	eq
 80a4454:	4296      	cmpeq	r6, r2
 80a4456:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a445a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a445e:	d202      	bcs.n	80a4466 <__aeabi_ddiv+0x6e>
 80a4460:	085b      	lsrs	r3, r3, #1
 80a4462:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4466:	1ab6      	subs	r6, r6, r2
 80a4468:	eb65 0503 	sbc.w	r5, r5, r3
 80a446c:	085b      	lsrs	r3, r3, #1
 80a446e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4472:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4476:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a447a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a447e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4482:	bf22      	ittt	cs
 80a4484:	1ab6      	subcs	r6, r6, r2
 80a4486:	4675      	movcs	r5, lr
 80a4488:	ea40 000c 	orrcs.w	r0, r0, ip
 80a448c:	085b      	lsrs	r3, r3, #1
 80a448e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4492:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4496:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a449a:	bf22      	ittt	cs
 80a449c:	1ab6      	subcs	r6, r6, r2
 80a449e:	4675      	movcs	r5, lr
 80a44a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a44a4:	085b      	lsrs	r3, r3, #1
 80a44a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a44aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a44ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a44b2:	bf22      	ittt	cs
 80a44b4:	1ab6      	subcs	r6, r6, r2
 80a44b6:	4675      	movcs	r5, lr
 80a44b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a44bc:	085b      	lsrs	r3, r3, #1
 80a44be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a44c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a44c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a44ca:	bf22      	ittt	cs
 80a44cc:	1ab6      	subcs	r6, r6, r2
 80a44ce:	4675      	movcs	r5, lr
 80a44d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a44d4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a44d8:	d018      	beq.n	80a450c <__aeabi_ddiv+0x114>
 80a44da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a44de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a44e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a44e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a44ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a44ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a44f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a44f6:	d1c0      	bne.n	80a447a <__aeabi_ddiv+0x82>
 80a44f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a44fc:	d10b      	bne.n	80a4516 <__aeabi_ddiv+0x11e>
 80a44fe:	ea41 0100 	orr.w	r1, r1, r0
 80a4502:	f04f 0000 	mov.w	r0, #0
 80a4506:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a450a:	e7b6      	b.n	80a447a <__aeabi_ddiv+0x82>
 80a450c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4510:	bf04      	itt	eq
 80a4512:	4301      	orreq	r1, r0
 80a4514:	2000      	moveq	r0, #0
 80a4516:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a451a:	bf88      	it	hi
 80a451c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4520:	f63f aeaf 	bhi.w	80a4282 <__aeabi_dmul+0xde>
 80a4524:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4528:	bf04      	itt	eq
 80a452a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a452e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4532:	f150 0000 	adcs.w	r0, r0, #0
 80a4536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a453a:	bd70      	pop	{r4, r5, r6, pc}
 80a453c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4540:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4544:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4548:	bfc2      	ittt	gt
 80a454a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a454e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4552:	bd70      	popgt	{r4, r5, r6, pc}
 80a4554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4558:	f04f 0e00 	mov.w	lr, #0
 80a455c:	3c01      	subs	r4, #1
 80a455e:	e690      	b.n	80a4282 <__aeabi_dmul+0xde>
 80a4560:	ea45 0e06 	orr.w	lr, r5, r6
 80a4564:	e68d      	b.n	80a4282 <__aeabi_dmul+0xde>
 80a4566:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a456a:	ea94 0f0c 	teq	r4, ip
 80a456e:	bf08      	it	eq
 80a4570:	ea95 0f0c 	teqeq	r5, ip
 80a4574:	f43f af3b 	beq.w	80a43ee <__aeabi_dmul+0x24a>
 80a4578:	ea94 0f0c 	teq	r4, ip
 80a457c:	d10a      	bne.n	80a4594 <__aeabi_ddiv+0x19c>
 80a457e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4582:	f47f af34 	bne.w	80a43ee <__aeabi_dmul+0x24a>
 80a4586:	ea95 0f0c 	teq	r5, ip
 80a458a:	f47f af25 	bne.w	80a43d8 <__aeabi_dmul+0x234>
 80a458e:	4610      	mov	r0, r2
 80a4590:	4619      	mov	r1, r3
 80a4592:	e72c      	b.n	80a43ee <__aeabi_dmul+0x24a>
 80a4594:	ea95 0f0c 	teq	r5, ip
 80a4598:	d106      	bne.n	80a45a8 <__aeabi_ddiv+0x1b0>
 80a459a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a459e:	f43f aefd 	beq.w	80a439c <__aeabi_dmul+0x1f8>
 80a45a2:	4610      	mov	r0, r2
 80a45a4:	4619      	mov	r1, r3
 80a45a6:	e722      	b.n	80a43ee <__aeabi_dmul+0x24a>
 80a45a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a45ac:	bf18      	it	ne
 80a45ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a45b2:	f47f aec5 	bne.w	80a4340 <__aeabi_dmul+0x19c>
 80a45b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a45ba:	f47f af0d 	bne.w	80a43d8 <__aeabi_dmul+0x234>
 80a45be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a45c2:	f47f aeeb 	bne.w	80a439c <__aeabi_dmul+0x1f8>
 80a45c6:	e712      	b.n	80a43ee <__aeabi_dmul+0x24a>

080a45c8 <__gedf2>:
 80a45c8:	f04f 3cff 	mov.w	ip, #4294967295
 80a45cc:	e006      	b.n	80a45dc <__cmpdf2+0x4>
 80a45ce:	bf00      	nop

080a45d0 <__ledf2>:
 80a45d0:	f04f 0c01 	mov.w	ip, #1
 80a45d4:	e002      	b.n	80a45dc <__cmpdf2+0x4>
 80a45d6:	bf00      	nop

080a45d8 <__cmpdf2>:
 80a45d8:	f04f 0c01 	mov.w	ip, #1
 80a45dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a45e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a45e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a45e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a45ec:	bf18      	it	ne
 80a45ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a45f2:	d01b      	beq.n	80a462c <__cmpdf2+0x54>
 80a45f4:	b001      	add	sp, #4
 80a45f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a45fa:	bf0c      	ite	eq
 80a45fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4600:	ea91 0f03 	teqne	r1, r3
 80a4604:	bf02      	ittt	eq
 80a4606:	ea90 0f02 	teqeq	r0, r2
 80a460a:	2000      	moveq	r0, #0
 80a460c:	4770      	bxeq	lr
 80a460e:	f110 0f00 	cmn.w	r0, #0
 80a4612:	ea91 0f03 	teq	r1, r3
 80a4616:	bf58      	it	pl
 80a4618:	4299      	cmppl	r1, r3
 80a461a:	bf08      	it	eq
 80a461c:	4290      	cmpeq	r0, r2
 80a461e:	bf2c      	ite	cs
 80a4620:	17d8      	asrcs	r0, r3, #31
 80a4622:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4626:	f040 0001 	orr.w	r0, r0, #1
 80a462a:	4770      	bx	lr
 80a462c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4634:	d102      	bne.n	80a463c <__cmpdf2+0x64>
 80a4636:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a463a:	d107      	bne.n	80a464c <__cmpdf2+0x74>
 80a463c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4644:	d1d6      	bne.n	80a45f4 <__cmpdf2+0x1c>
 80a4646:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a464a:	d0d3      	beq.n	80a45f4 <__cmpdf2+0x1c>
 80a464c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4650:	4770      	bx	lr
 80a4652:	bf00      	nop

080a4654 <__aeabi_cdrcmple>:
 80a4654:	4684      	mov	ip, r0
 80a4656:	4610      	mov	r0, r2
 80a4658:	4662      	mov	r2, ip
 80a465a:	468c      	mov	ip, r1
 80a465c:	4619      	mov	r1, r3
 80a465e:	4663      	mov	r3, ip
 80a4660:	e000      	b.n	80a4664 <__aeabi_cdcmpeq>
 80a4662:	bf00      	nop

080a4664 <__aeabi_cdcmpeq>:
 80a4664:	b501      	push	{r0, lr}
 80a4666:	f7ff ffb7 	bl	80a45d8 <__cmpdf2>
 80a466a:	2800      	cmp	r0, #0
 80a466c:	bf48      	it	mi
 80a466e:	f110 0f00 	cmnmi.w	r0, #0
 80a4672:	bd01      	pop	{r0, pc}

080a4674 <__aeabi_dcmpeq>:
 80a4674:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4678:	f7ff fff4 	bl	80a4664 <__aeabi_cdcmpeq>
 80a467c:	bf0c      	ite	eq
 80a467e:	2001      	moveq	r0, #1
 80a4680:	2000      	movne	r0, #0
 80a4682:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4686:	bf00      	nop

080a4688 <__aeabi_dcmplt>:
 80a4688:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a468c:	f7ff ffea 	bl	80a4664 <__aeabi_cdcmpeq>
 80a4690:	bf34      	ite	cc
 80a4692:	2001      	movcc	r0, #1
 80a4694:	2000      	movcs	r0, #0
 80a4696:	f85d fb08 	ldr.w	pc, [sp], #8
 80a469a:	bf00      	nop

080a469c <__aeabi_dcmple>:
 80a469c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46a0:	f7ff ffe0 	bl	80a4664 <__aeabi_cdcmpeq>
 80a46a4:	bf94      	ite	ls
 80a46a6:	2001      	movls	r0, #1
 80a46a8:	2000      	movhi	r0, #0
 80a46aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a46ae:	bf00      	nop

080a46b0 <__aeabi_dcmpge>:
 80a46b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46b4:	f7ff ffce 	bl	80a4654 <__aeabi_cdrcmple>
 80a46b8:	bf94      	ite	ls
 80a46ba:	2001      	movls	r0, #1
 80a46bc:	2000      	movhi	r0, #0
 80a46be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a46c2:	bf00      	nop

080a46c4 <__aeabi_dcmpgt>:
 80a46c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a46c8:	f7ff ffc4 	bl	80a4654 <__aeabi_cdrcmple>
 80a46cc:	bf34      	ite	cc
 80a46ce:	2001      	movcc	r0, #1
 80a46d0:	2000      	movcs	r0, #0
 80a46d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a46d6:	bf00      	nop

080a46d8 <__aeabi_dcmpun>:
 80a46d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a46dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a46e0:	d102      	bne.n	80a46e8 <__aeabi_dcmpun+0x10>
 80a46e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a46e6:	d10a      	bne.n	80a46fe <__aeabi_dcmpun+0x26>
 80a46e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a46ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a46f0:	d102      	bne.n	80a46f8 <__aeabi_dcmpun+0x20>
 80a46f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a46f6:	d102      	bne.n	80a46fe <__aeabi_dcmpun+0x26>
 80a46f8:	f04f 0000 	mov.w	r0, #0
 80a46fc:	4770      	bx	lr
 80a46fe:	f04f 0001 	mov.w	r0, #1
 80a4702:	4770      	bx	lr

080a4704 <__aeabi_d2iz>:
 80a4704:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4708:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a470c:	d215      	bcs.n	80a473a <__aeabi_d2iz+0x36>
 80a470e:	d511      	bpl.n	80a4734 <__aeabi_d2iz+0x30>
 80a4710:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4714:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4718:	d912      	bls.n	80a4740 <__aeabi_d2iz+0x3c>
 80a471a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a471e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4722:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4726:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a472a:	fa23 f002 	lsr.w	r0, r3, r2
 80a472e:	bf18      	it	ne
 80a4730:	4240      	negne	r0, r0
 80a4732:	4770      	bx	lr
 80a4734:	f04f 0000 	mov.w	r0, #0
 80a4738:	4770      	bx	lr
 80a473a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a473e:	d105      	bne.n	80a474c <__aeabi_d2iz+0x48>
 80a4740:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4744:	bf08      	it	eq
 80a4746:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a474a:	4770      	bx	lr
 80a474c:	f04f 0000 	mov.w	r0, #0
 80a4750:	4770      	bx	lr
 80a4752:	bf00      	nop

080a4754 <__aeabi_d2uiz>:
 80a4754:	004a      	lsls	r2, r1, #1
 80a4756:	d211      	bcs.n	80a477c <__aeabi_d2uiz+0x28>
 80a4758:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a475c:	d211      	bcs.n	80a4782 <__aeabi_d2uiz+0x2e>
 80a475e:	d50d      	bpl.n	80a477c <__aeabi_d2uiz+0x28>
 80a4760:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4764:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4768:	d40e      	bmi.n	80a4788 <__aeabi_d2uiz+0x34>
 80a476a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a476e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4772:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4776:	fa23 f002 	lsr.w	r0, r3, r2
 80a477a:	4770      	bx	lr
 80a477c:	f04f 0000 	mov.w	r0, #0
 80a4780:	4770      	bx	lr
 80a4782:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4786:	d102      	bne.n	80a478e <__aeabi_d2uiz+0x3a>
 80a4788:	f04f 30ff 	mov.w	r0, #4294967295
 80a478c:	4770      	bx	lr
 80a478e:	f04f 0000 	mov.w	r0, #0
 80a4792:	4770      	bx	lr

080a4794 <__aeabi_d2f>:
 80a4794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a479c:	bf24      	itt	cs
 80a479e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a47a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a47a6:	d90d      	bls.n	80a47c4 <__aeabi_d2f+0x30>
 80a47a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a47ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a47b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a47b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a47b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a47bc:	bf08      	it	eq
 80a47be:	f020 0001 	biceq.w	r0, r0, #1
 80a47c2:	4770      	bx	lr
 80a47c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a47c8:	d121      	bne.n	80a480e <__aeabi_d2f+0x7a>
 80a47ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a47ce:	bfbc      	itt	lt
 80a47d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a47d4:	4770      	bxlt	lr
 80a47d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a47da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a47de:	f1c2 0218 	rsb	r2, r2, #24
 80a47e2:	f1c2 0c20 	rsb	ip, r2, #32
 80a47e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a47ea:	fa20 f002 	lsr.w	r0, r0, r2
 80a47ee:	bf18      	it	ne
 80a47f0:	f040 0001 	orrne.w	r0, r0, #1
 80a47f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a47f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a47fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4800:	ea40 000c 	orr.w	r0, r0, ip
 80a4804:	fa23 f302 	lsr.w	r3, r3, r2
 80a4808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a480c:	e7cc      	b.n	80a47a8 <__aeabi_d2f+0x14>
 80a480e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4812:	d107      	bne.n	80a4824 <__aeabi_d2f+0x90>
 80a4814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4818:	bf1e      	ittt	ne
 80a481a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a481e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4822:	4770      	bxne	lr
 80a4824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a482c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4830:	4770      	bx	lr
 80a4832:	bf00      	nop

080a4834 <__aeabi_frsub>:
 80a4834:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4838:	e002      	b.n	80a4840 <__addsf3>
 80a483a:	bf00      	nop

080a483c <__aeabi_fsub>:
 80a483c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4840 <__addsf3>:
 80a4840:	0042      	lsls	r2, r0, #1
 80a4842:	bf1f      	itttt	ne
 80a4844:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4848:	ea92 0f03 	teqne	r2, r3
 80a484c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4850:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4854:	d06a      	beq.n	80a492c <__addsf3+0xec>
 80a4856:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a485a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a485e:	bfc1      	itttt	gt
 80a4860:	18d2      	addgt	r2, r2, r3
 80a4862:	4041      	eorgt	r1, r0
 80a4864:	4048      	eorgt	r0, r1
 80a4866:	4041      	eorgt	r1, r0
 80a4868:	bfb8      	it	lt
 80a486a:	425b      	neglt	r3, r3
 80a486c:	2b19      	cmp	r3, #25
 80a486e:	bf88      	it	hi
 80a4870:	4770      	bxhi	lr
 80a4872:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4876:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a487a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a487e:	bf18      	it	ne
 80a4880:	4240      	negne	r0, r0
 80a4882:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4886:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a488a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a488e:	bf18      	it	ne
 80a4890:	4249      	negne	r1, r1
 80a4892:	ea92 0f03 	teq	r2, r3
 80a4896:	d03f      	beq.n	80a4918 <__addsf3+0xd8>
 80a4898:	f1a2 0201 	sub.w	r2, r2, #1
 80a489c:	fa41 fc03 	asr.w	ip, r1, r3
 80a48a0:	eb10 000c 	adds.w	r0, r0, ip
 80a48a4:	f1c3 0320 	rsb	r3, r3, #32
 80a48a8:	fa01 f103 	lsl.w	r1, r1, r3
 80a48ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a48b0:	d502      	bpl.n	80a48b8 <__addsf3+0x78>
 80a48b2:	4249      	negs	r1, r1
 80a48b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a48b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a48bc:	d313      	bcc.n	80a48e6 <__addsf3+0xa6>
 80a48be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a48c2:	d306      	bcc.n	80a48d2 <__addsf3+0x92>
 80a48c4:	0840      	lsrs	r0, r0, #1
 80a48c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a48ca:	f102 0201 	add.w	r2, r2, #1
 80a48ce:	2afe      	cmp	r2, #254	; 0xfe
 80a48d0:	d251      	bcs.n	80a4976 <__addsf3+0x136>
 80a48d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a48d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a48da:	bf08      	it	eq
 80a48dc:	f020 0001 	biceq.w	r0, r0, #1
 80a48e0:	ea40 0003 	orr.w	r0, r0, r3
 80a48e4:	4770      	bx	lr
 80a48e6:	0049      	lsls	r1, r1, #1
 80a48e8:	eb40 0000 	adc.w	r0, r0, r0
 80a48ec:	3a01      	subs	r2, #1
 80a48ee:	bf28      	it	cs
 80a48f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a48f4:	d2ed      	bcs.n	80a48d2 <__addsf3+0x92>
 80a48f6:	fab0 fc80 	clz	ip, r0
 80a48fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a48fe:	ebb2 020c 	subs.w	r2, r2, ip
 80a4902:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4906:	bfaa      	itet	ge
 80a4908:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a490c:	4252      	neglt	r2, r2
 80a490e:	4318      	orrge	r0, r3
 80a4910:	bfbc      	itt	lt
 80a4912:	40d0      	lsrlt	r0, r2
 80a4914:	4318      	orrlt	r0, r3
 80a4916:	4770      	bx	lr
 80a4918:	f092 0f00 	teq	r2, #0
 80a491c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4920:	bf06      	itte	eq
 80a4922:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4926:	3201      	addeq	r2, #1
 80a4928:	3b01      	subne	r3, #1
 80a492a:	e7b5      	b.n	80a4898 <__addsf3+0x58>
 80a492c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4930:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4934:	bf18      	it	ne
 80a4936:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a493a:	d021      	beq.n	80a4980 <__addsf3+0x140>
 80a493c:	ea92 0f03 	teq	r2, r3
 80a4940:	d004      	beq.n	80a494c <__addsf3+0x10c>
 80a4942:	f092 0f00 	teq	r2, #0
 80a4946:	bf08      	it	eq
 80a4948:	4608      	moveq	r0, r1
 80a494a:	4770      	bx	lr
 80a494c:	ea90 0f01 	teq	r0, r1
 80a4950:	bf1c      	itt	ne
 80a4952:	2000      	movne	r0, #0
 80a4954:	4770      	bxne	lr
 80a4956:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a495a:	d104      	bne.n	80a4966 <__addsf3+0x126>
 80a495c:	0040      	lsls	r0, r0, #1
 80a495e:	bf28      	it	cs
 80a4960:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4964:	4770      	bx	lr
 80a4966:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a496a:	bf3c      	itt	cc
 80a496c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4970:	4770      	bxcc	lr
 80a4972:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4976:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a497a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a497e:	4770      	bx	lr
 80a4980:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4984:	bf16      	itet	ne
 80a4986:	4608      	movne	r0, r1
 80a4988:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a498c:	4601      	movne	r1, r0
 80a498e:	0242      	lsls	r2, r0, #9
 80a4990:	bf06      	itte	eq
 80a4992:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4996:	ea90 0f01 	teqeq	r0, r1
 80a499a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a499e:	4770      	bx	lr

080a49a0 <__aeabi_ui2f>:
 80a49a0:	f04f 0300 	mov.w	r3, #0
 80a49a4:	e004      	b.n	80a49b0 <__aeabi_i2f+0x8>
 80a49a6:	bf00      	nop

080a49a8 <__aeabi_i2f>:
 80a49a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a49ac:	bf48      	it	mi
 80a49ae:	4240      	negmi	r0, r0
 80a49b0:	ea5f 0c00 	movs.w	ip, r0
 80a49b4:	bf08      	it	eq
 80a49b6:	4770      	bxeq	lr
 80a49b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a49bc:	4601      	mov	r1, r0
 80a49be:	f04f 0000 	mov.w	r0, #0
 80a49c2:	e01c      	b.n	80a49fe <__aeabi_l2f+0x2a>

080a49c4 <__aeabi_ul2f>:
 80a49c4:	ea50 0201 	orrs.w	r2, r0, r1
 80a49c8:	bf08      	it	eq
 80a49ca:	4770      	bxeq	lr
 80a49cc:	f04f 0300 	mov.w	r3, #0
 80a49d0:	e00a      	b.n	80a49e8 <__aeabi_l2f+0x14>
 80a49d2:	bf00      	nop

080a49d4 <__aeabi_l2f>:
 80a49d4:	ea50 0201 	orrs.w	r2, r0, r1
 80a49d8:	bf08      	it	eq
 80a49da:	4770      	bxeq	lr
 80a49dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a49e0:	d502      	bpl.n	80a49e8 <__aeabi_l2f+0x14>
 80a49e2:	4240      	negs	r0, r0
 80a49e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a49e8:	ea5f 0c01 	movs.w	ip, r1
 80a49ec:	bf02      	ittt	eq
 80a49ee:	4684      	moveq	ip, r0
 80a49f0:	4601      	moveq	r1, r0
 80a49f2:	2000      	moveq	r0, #0
 80a49f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a49f8:	bf08      	it	eq
 80a49fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a49fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4a02:	fabc f28c 	clz	r2, ip
 80a4a06:	3a08      	subs	r2, #8
 80a4a08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4a0c:	db10      	blt.n	80a4a30 <__aeabi_l2f+0x5c>
 80a4a0e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4a12:	4463      	add	r3, ip
 80a4a14:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4a18:	f1c2 0220 	rsb	r2, r2, #32
 80a4a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4a20:	fa20 f202 	lsr.w	r2, r0, r2
 80a4a24:	eb43 0002 	adc.w	r0, r3, r2
 80a4a28:	bf08      	it	eq
 80a4a2a:	f020 0001 	biceq.w	r0, r0, #1
 80a4a2e:	4770      	bx	lr
 80a4a30:	f102 0220 	add.w	r2, r2, #32
 80a4a34:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4a38:	f1c2 0220 	rsb	r2, r2, #32
 80a4a3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4a40:	fa21 f202 	lsr.w	r2, r1, r2
 80a4a44:	eb43 0002 	adc.w	r0, r3, r2
 80a4a48:	bf08      	it	eq
 80a4a4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4a4e:	4770      	bx	lr

080a4a50 <__aeabi_fmul>:
 80a4a50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4a58:	bf1e      	ittt	ne
 80a4a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4a5e:	ea92 0f0c 	teqne	r2, ip
 80a4a62:	ea93 0f0c 	teqne	r3, ip
 80a4a66:	d06f      	beq.n	80a4b48 <__aeabi_fmul+0xf8>
 80a4a68:	441a      	add	r2, r3
 80a4a6a:	ea80 0c01 	eor.w	ip, r0, r1
 80a4a6e:	0240      	lsls	r0, r0, #9
 80a4a70:	bf18      	it	ne
 80a4a72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4a76:	d01e      	beq.n	80a4ab6 <__aeabi_fmul+0x66>
 80a4a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4a7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4a80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4a84:	fba0 3101 	umull	r3, r1, r0, r1
 80a4a88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4a8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4a90:	bf3e      	ittt	cc
 80a4a92:	0049      	lslcc	r1, r1, #1
 80a4a94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4a98:	005b      	lslcc	r3, r3, #1
 80a4a9a:	ea40 0001 	orr.w	r0, r0, r1
 80a4a9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4aa2:	2afd      	cmp	r2, #253	; 0xfd
 80a4aa4:	d81d      	bhi.n	80a4ae2 <__aeabi_fmul+0x92>
 80a4aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4aae:	bf08      	it	eq
 80a4ab0:	f020 0001 	biceq.w	r0, r0, #1
 80a4ab4:	4770      	bx	lr
 80a4ab6:	f090 0f00 	teq	r0, #0
 80a4aba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4abe:	bf08      	it	eq
 80a4ac0:	0249      	lsleq	r1, r1, #9
 80a4ac2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4ac6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4aca:	3a7f      	subs	r2, #127	; 0x7f
 80a4acc:	bfc2      	ittt	gt
 80a4ace:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ad2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4ad6:	4770      	bxgt	lr
 80a4ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4adc:	f04f 0300 	mov.w	r3, #0
 80a4ae0:	3a01      	subs	r2, #1
 80a4ae2:	dc5d      	bgt.n	80a4ba0 <__aeabi_fmul+0x150>
 80a4ae4:	f112 0f19 	cmn.w	r2, #25
 80a4ae8:	bfdc      	itt	le
 80a4aea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4aee:	4770      	bxle	lr
 80a4af0:	f1c2 0200 	rsb	r2, r2, #0
 80a4af4:	0041      	lsls	r1, r0, #1
 80a4af6:	fa21 f102 	lsr.w	r1, r1, r2
 80a4afa:	f1c2 0220 	rsb	r2, r2, #32
 80a4afe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4b02:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4b06:	f140 0000 	adc.w	r0, r0, #0
 80a4b0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4b0e:	bf08      	it	eq
 80a4b10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4b14:	4770      	bx	lr
 80a4b16:	f092 0f00 	teq	r2, #0
 80a4b1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4b1e:	bf02      	ittt	eq
 80a4b20:	0040      	lsleq	r0, r0, #1
 80a4b22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4b26:	3a01      	subeq	r2, #1
 80a4b28:	d0f9      	beq.n	80a4b1e <__aeabi_fmul+0xce>
 80a4b2a:	ea40 000c 	orr.w	r0, r0, ip
 80a4b2e:	f093 0f00 	teq	r3, #0
 80a4b32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4b36:	bf02      	ittt	eq
 80a4b38:	0049      	lsleq	r1, r1, #1
 80a4b3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4b3e:	3b01      	subeq	r3, #1
 80a4b40:	d0f9      	beq.n	80a4b36 <__aeabi_fmul+0xe6>
 80a4b42:	ea41 010c 	orr.w	r1, r1, ip
 80a4b46:	e78f      	b.n	80a4a68 <__aeabi_fmul+0x18>
 80a4b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4b4c:	ea92 0f0c 	teq	r2, ip
 80a4b50:	bf18      	it	ne
 80a4b52:	ea93 0f0c 	teqne	r3, ip
 80a4b56:	d00a      	beq.n	80a4b6e <__aeabi_fmul+0x11e>
 80a4b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4b5c:	bf18      	it	ne
 80a4b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4b62:	d1d8      	bne.n	80a4b16 <__aeabi_fmul+0xc6>
 80a4b64:	ea80 0001 	eor.w	r0, r0, r1
 80a4b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4b6c:	4770      	bx	lr
 80a4b6e:	f090 0f00 	teq	r0, #0
 80a4b72:	bf17      	itett	ne
 80a4b74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4b78:	4608      	moveq	r0, r1
 80a4b7a:	f091 0f00 	teqne	r1, #0
 80a4b7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4b82:	d014      	beq.n	80a4bae <__aeabi_fmul+0x15e>
 80a4b84:	ea92 0f0c 	teq	r2, ip
 80a4b88:	d101      	bne.n	80a4b8e <__aeabi_fmul+0x13e>
 80a4b8a:	0242      	lsls	r2, r0, #9
 80a4b8c:	d10f      	bne.n	80a4bae <__aeabi_fmul+0x15e>
 80a4b8e:	ea93 0f0c 	teq	r3, ip
 80a4b92:	d103      	bne.n	80a4b9c <__aeabi_fmul+0x14c>
 80a4b94:	024b      	lsls	r3, r1, #9
 80a4b96:	bf18      	it	ne
 80a4b98:	4608      	movne	r0, r1
 80a4b9a:	d108      	bne.n	80a4bae <__aeabi_fmul+0x15e>
 80a4b9c:	ea80 0001 	eor.w	r0, r0, r1
 80a4ba0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4bac:	4770      	bx	lr
 80a4bae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4bb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4bb6:	4770      	bx	lr

080a4bb8 <__aeabi_fdiv>:
 80a4bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4bc0:	bf1e      	ittt	ne
 80a4bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4bc6:	ea92 0f0c 	teqne	r2, ip
 80a4bca:	ea93 0f0c 	teqne	r3, ip
 80a4bce:	d069      	beq.n	80a4ca4 <__aeabi_fdiv+0xec>
 80a4bd0:	eba2 0203 	sub.w	r2, r2, r3
 80a4bd4:	ea80 0c01 	eor.w	ip, r0, r1
 80a4bd8:	0249      	lsls	r1, r1, #9
 80a4bda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4bde:	d037      	beq.n	80a4c50 <__aeabi_fdiv+0x98>
 80a4be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4be4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4be8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4bf0:	428b      	cmp	r3, r1
 80a4bf2:	bf38      	it	cc
 80a4bf4:	005b      	lslcc	r3, r3, #1
 80a4bf6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4bfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4bfe:	428b      	cmp	r3, r1
 80a4c00:	bf24      	itt	cs
 80a4c02:	1a5b      	subcs	r3, r3, r1
 80a4c04:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4c08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4c0c:	bf24      	itt	cs
 80a4c0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4c12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4c16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4c1a:	bf24      	itt	cs
 80a4c1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4c20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4c24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4c28:	bf24      	itt	cs
 80a4c2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4c2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4c32:	011b      	lsls	r3, r3, #4
 80a4c34:	bf18      	it	ne
 80a4c36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4c3a:	d1e0      	bne.n	80a4bfe <__aeabi_fdiv+0x46>
 80a4c3c:	2afd      	cmp	r2, #253	; 0xfd
 80a4c3e:	f63f af50 	bhi.w	80a4ae2 <__aeabi_fmul+0x92>
 80a4c42:	428b      	cmp	r3, r1
 80a4c44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4c48:	bf08      	it	eq
 80a4c4a:	f020 0001 	biceq.w	r0, r0, #1
 80a4c4e:	4770      	bx	lr
 80a4c50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4c54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4c58:	327f      	adds	r2, #127	; 0x7f
 80a4c5a:	bfc2      	ittt	gt
 80a4c5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4c60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4c64:	4770      	bxgt	lr
 80a4c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c6a:	f04f 0300 	mov.w	r3, #0
 80a4c6e:	3a01      	subs	r2, #1
 80a4c70:	e737      	b.n	80a4ae2 <__aeabi_fmul+0x92>
 80a4c72:	f092 0f00 	teq	r2, #0
 80a4c76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4c7a:	bf02      	ittt	eq
 80a4c7c:	0040      	lsleq	r0, r0, #1
 80a4c7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4c82:	3a01      	subeq	r2, #1
 80a4c84:	d0f9      	beq.n	80a4c7a <__aeabi_fdiv+0xc2>
 80a4c86:	ea40 000c 	orr.w	r0, r0, ip
 80a4c8a:	f093 0f00 	teq	r3, #0
 80a4c8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4c92:	bf02      	ittt	eq
 80a4c94:	0049      	lsleq	r1, r1, #1
 80a4c96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4c9a:	3b01      	subeq	r3, #1
 80a4c9c:	d0f9      	beq.n	80a4c92 <__aeabi_fdiv+0xda>
 80a4c9e:	ea41 010c 	orr.w	r1, r1, ip
 80a4ca2:	e795      	b.n	80a4bd0 <__aeabi_fdiv+0x18>
 80a4ca4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4ca8:	ea92 0f0c 	teq	r2, ip
 80a4cac:	d108      	bne.n	80a4cc0 <__aeabi_fdiv+0x108>
 80a4cae:	0242      	lsls	r2, r0, #9
 80a4cb0:	f47f af7d 	bne.w	80a4bae <__aeabi_fmul+0x15e>
 80a4cb4:	ea93 0f0c 	teq	r3, ip
 80a4cb8:	f47f af70 	bne.w	80a4b9c <__aeabi_fmul+0x14c>
 80a4cbc:	4608      	mov	r0, r1
 80a4cbe:	e776      	b.n	80a4bae <__aeabi_fmul+0x15e>
 80a4cc0:	ea93 0f0c 	teq	r3, ip
 80a4cc4:	d104      	bne.n	80a4cd0 <__aeabi_fdiv+0x118>
 80a4cc6:	024b      	lsls	r3, r1, #9
 80a4cc8:	f43f af4c 	beq.w	80a4b64 <__aeabi_fmul+0x114>
 80a4ccc:	4608      	mov	r0, r1
 80a4cce:	e76e      	b.n	80a4bae <__aeabi_fmul+0x15e>
 80a4cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4cd4:	bf18      	it	ne
 80a4cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4cda:	d1ca      	bne.n	80a4c72 <__aeabi_fdiv+0xba>
 80a4cdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4ce0:	f47f af5c 	bne.w	80a4b9c <__aeabi_fmul+0x14c>
 80a4ce4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4ce8:	f47f af3c 	bne.w	80a4b64 <__aeabi_fmul+0x114>
 80a4cec:	e75f      	b.n	80a4bae <__aeabi_fmul+0x15e>
 80a4cee:	bf00      	nop

080a4cf0 <__aeabi_f2iz>:
 80a4cf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4cf4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4cf8:	d30f      	bcc.n	80a4d1a <__aeabi_f2iz+0x2a>
 80a4cfa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4cfe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4d02:	d90d      	bls.n	80a4d20 <__aeabi_f2iz+0x30>
 80a4d04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4d0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4d10:	fa23 f002 	lsr.w	r0, r3, r2
 80a4d14:	bf18      	it	ne
 80a4d16:	4240      	negne	r0, r0
 80a4d18:	4770      	bx	lr
 80a4d1a:	f04f 0000 	mov.w	r0, #0
 80a4d1e:	4770      	bx	lr
 80a4d20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a4d24:	d101      	bne.n	80a4d2a <__aeabi_f2iz+0x3a>
 80a4d26:	0242      	lsls	r2, r0, #9
 80a4d28:	d105      	bne.n	80a4d36 <__aeabi_f2iz+0x46>
 80a4d2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4d2e:	bf08      	it	eq
 80a4d30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4d34:	4770      	bx	lr
 80a4d36:	f04f 0000 	mov.w	r0, #0
 80a4d3a:	4770      	bx	lr

080a4d3c <atexit>:
 80a4d3c:	2300      	movs	r3, #0
 80a4d3e:	4601      	mov	r1, r0
 80a4d40:	461a      	mov	r2, r3
 80a4d42:	4618      	mov	r0, r3
 80a4d44:	f000 b84c 	b.w	80a4de0 <__register_exitproc>

080a4d48 <memcpy>:
 80a4d48:	440a      	add	r2, r1
 80a4d4a:	4291      	cmp	r1, r2
 80a4d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4d50:	d100      	bne.n	80a4d54 <memcpy+0xc>
 80a4d52:	4770      	bx	lr
 80a4d54:	b510      	push	{r4, lr}
 80a4d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4d5a:	4291      	cmp	r1, r2
 80a4d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4d60:	d1f9      	bne.n	80a4d56 <memcpy+0xe>
 80a4d62:	bd10      	pop	{r4, pc}

080a4d64 <memset>:
 80a4d64:	4603      	mov	r3, r0
 80a4d66:	4402      	add	r2, r0
 80a4d68:	4293      	cmp	r3, r2
 80a4d6a:	d100      	bne.n	80a4d6e <memset+0xa>
 80a4d6c:	4770      	bx	lr
 80a4d6e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4d72:	e7f9      	b.n	80a4d68 <memset+0x4>

080a4d74 <srand>:
 80a4d74:	b538      	push	{r3, r4, r5, lr}
 80a4d76:	4b10      	ldr	r3, [pc, #64]	; (80a4db8 <srand+0x44>)
 80a4d78:	4604      	mov	r4, r0
 80a4d7a:	681d      	ldr	r5, [r3, #0]
 80a4d7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a4d7e:	b9b3      	cbnz	r3, 80a4dae <srand+0x3a>
 80a4d80:	2018      	movs	r0, #24
 80a4d82:	f7fd fa15 	bl	80a21b0 <malloc>
 80a4d86:	4602      	mov	r2, r0
 80a4d88:	63a8      	str	r0, [r5, #56]	; 0x38
 80a4d8a:	b920      	cbnz	r0, 80a4d96 <srand+0x22>
 80a4d8c:	2142      	movs	r1, #66	; 0x42
 80a4d8e:	4b0b      	ldr	r3, [pc, #44]	; (80a4dbc <srand+0x48>)
 80a4d90:	480b      	ldr	r0, [pc, #44]	; (80a4dc0 <srand+0x4c>)
 80a4d92:	f7fd fa25 	bl	80a21e0 <__assert_func>
 80a4d96:	490b      	ldr	r1, [pc, #44]	; (80a4dc4 <srand+0x50>)
 80a4d98:	4b0b      	ldr	r3, [pc, #44]	; (80a4dc8 <srand+0x54>)
 80a4d9a:	e9c0 1300 	strd	r1, r3, [r0]
 80a4d9e:	4b0b      	ldr	r3, [pc, #44]	; (80a4dcc <srand+0x58>)
 80a4da0:	2100      	movs	r1, #0
 80a4da2:	6083      	str	r3, [r0, #8]
 80a4da4:	230b      	movs	r3, #11
 80a4da6:	8183      	strh	r3, [r0, #12]
 80a4da8:	2001      	movs	r0, #1
 80a4daa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a4dae:	2200      	movs	r2, #0
 80a4db0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a4db2:	611c      	str	r4, [r3, #16]
 80a4db4:	615a      	str	r2, [r3, #20]
 80a4db6:	bd38      	pop	{r3, r4, r5, pc}
 80a4db8:	20000010 	.word	0x20000010
 80a4dbc:	080a50c8 	.word	0x080a50c8
 80a4dc0:	080a50df 	.word	0x080a50df
 80a4dc4:	abcd330e 	.word	0xabcd330e
 80a4dc8:	e66d1234 	.word	0xe66d1234
 80a4dcc:	0005deec 	.word	0x0005deec

080a4dd0 <strlen>:
 80a4dd0:	4603      	mov	r3, r0
 80a4dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4dd6:	2a00      	cmp	r2, #0
 80a4dd8:	d1fb      	bne.n	80a4dd2 <strlen+0x2>
 80a4dda:	1a18      	subs	r0, r3, r0
 80a4ddc:	3801      	subs	r0, #1
 80a4dde:	4770      	bx	lr

080a4de0 <__register_exitproc>:
 80a4de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4de4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a4e94 <__register_exitproc+0xb4>
 80a4de8:	4606      	mov	r6, r0
 80a4dea:	f8d8 0000 	ldr.w	r0, [r8]
 80a4dee:	461f      	mov	r7, r3
 80a4df0:	460d      	mov	r5, r1
 80a4df2:	4691      	mov	r9, r2
 80a4df4:	f000 f858 	bl	80a4ea8 <__retarget_lock_acquire_recursive>
 80a4df8:	4b27      	ldr	r3, [pc, #156]	; (80a4e98 <__register_exitproc+0xb8>)
 80a4dfa:	681c      	ldr	r4, [r3, #0]
 80a4dfc:	b934      	cbnz	r4, 80a4e0c <__register_exitproc+0x2c>
 80a4dfe:	4c27      	ldr	r4, [pc, #156]	; (80a4e9c <__register_exitproc+0xbc>)
 80a4e00:	601c      	str	r4, [r3, #0]
 80a4e02:	4b27      	ldr	r3, [pc, #156]	; (80a4ea0 <__register_exitproc+0xc0>)
 80a4e04:	b113      	cbz	r3, 80a4e0c <__register_exitproc+0x2c>
 80a4e06:	681b      	ldr	r3, [r3, #0]
 80a4e08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a4e0c:	6863      	ldr	r3, [r4, #4]
 80a4e0e:	2b1f      	cmp	r3, #31
 80a4e10:	dd07      	ble.n	80a4e22 <__register_exitproc+0x42>
 80a4e12:	f8d8 0000 	ldr.w	r0, [r8]
 80a4e16:	f000 f849 	bl	80a4eac <__retarget_lock_release_recursive>
 80a4e1a:	f04f 30ff 	mov.w	r0, #4294967295
 80a4e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4e22:	b35e      	cbz	r6, 80a4e7c <__register_exitproc+0x9c>
 80a4e24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a4e28:	b988      	cbnz	r0, 80a4e4e <__register_exitproc+0x6e>
 80a4e2a:	4b1e      	ldr	r3, [pc, #120]	; (80a4ea4 <__register_exitproc+0xc4>)
 80a4e2c:	b923      	cbnz	r3, 80a4e38 <__register_exitproc+0x58>
 80a4e2e:	f8d8 0000 	ldr.w	r0, [r8]
 80a4e32:	f000 f83a 	bl	80a4eaa <__retarget_lock_release>
 80a4e36:	e7f0      	b.n	80a4e1a <__register_exitproc+0x3a>
 80a4e38:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a4e3c:	f7fd f9b8 	bl	80a21b0 <malloc>
 80a4e40:	2800      	cmp	r0, #0
 80a4e42:	d0f4      	beq.n	80a4e2e <__register_exitproc+0x4e>
 80a4e44:	2300      	movs	r3, #0
 80a4e46:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a4e4a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a4e4e:	2201      	movs	r2, #1
 80a4e50:	6863      	ldr	r3, [r4, #4]
 80a4e52:	2e02      	cmp	r6, #2
 80a4e54:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a4e58:	fa02 f203 	lsl.w	r2, r2, r3
 80a4e5c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a4e60:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a4e64:	ea43 0302 	orr.w	r3, r3, r2
 80a4e68:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a4e6c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a4e70:	bf02      	ittt	eq
 80a4e72:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a4e76:	4313      	orreq	r3, r2
 80a4e78:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a4e7c:	6863      	ldr	r3, [r4, #4]
 80a4e7e:	f8d8 0000 	ldr.w	r0, [r8]
 80a4e82:	1c5a      	adds	r2, r3, #1
 80a4e84:	3302      	adds	r3, #2
 80a4e86:	6062      	str	r2, [r4, #4]
 80a4e88:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a4e8c:	f000 f80e 	bl	80a4eac <__retarget_lock_release_recursive>
 80a4e90:	2000      	movs	r0, #0
 80a4e92:	e7c4      	b.n	80a4e1e <__register_exitproc+0x3e>
 80a4e94:	20000074 	.word	0x20000074
 80a4e98:	20000570 	.word	0x20000570
 80a4e9c:	200004e4 	.word	0x200004e4
 80a4ea0:	00000000 	.word	0x00000000
 80a4ea4:	080a21b1 	.word	0x080a21b1

080a4ea8 <__retarget_lock_acquire_recursive>:
 80a4ea8:	4770      	bx	lr

080a4eaa <__retarget_lock_release>:
 80a4eaa:	4770      	bx	lr

080a4eac <__retarget_lock_release_recursive>:
 80a4eac:	4770      	bx	lr

080a4eae <link_code_end>:
	...

080a4eb0 <dynalib_user>:
 80a4eb0:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a4ec0:	0000 0000 4157 4d52 4e49 2047 5055 2e2e     ....WARMING UP..
 80a4ed0:	002e 7661 5067 4d50 6d00 7861 5050 004d     ..avgPPM.maxPPM.
 80a4ee0:	414d 2058 5050 3a4d 4100 4756 5020 4d50     MAX PPM:.AVG PPM
 80a4ef0:	003a 414d 2058 4142 3a43 4100 4756 4220     :.MAX BAC:.AVG B
 80a4f00:	4341 003a 6544 6976 6563 4d20 646f 3a65     AC:.Device Mode:
 80a4f10:	0020 4552 4441 2e59 2e2e 4200 7475 6f74      .READY....Butto
 80a4f20:	206e 7270 7365 0073 4552 4441 4e49 2e47     n press.READING.
 80a4f30:	2e2e 5000 4d50 203a 4200 4341 203a 0000     ...PPM: .BAC: ..

080a4f40 <CSWTCH.215>:
 80a4f40:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a4f50:	0050 0000                                   P...

080a4f54 <_ZTV7rgb_lcd>:
	...
 80a4f5c:	1c0d 080a 1c0f 080a 1c4f 080a 2245 080a     ........O...E"..
 80a4f6c:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
 80a4f7c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a4f8c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a4f98 <_ZTV9IPAddress>:
	...
 80a4fa0:	2667 080a 2665 080a 2699 080a               g&..e&...&..

080a4fac <_ZTV9USBSerial>:
	...
 80a4fb4:	2733 080a 2799 080a 2771 080a 2245 080a     3'...'..q'..E"..
 80a4fc4:	2763 080a 2735 080a 2745 080a 2793 080a     c'..5'..E'...'..
 80a4fd4:	2755 080a 272d 080a                         U'..-'..

080a4fdc <_ZTV11USARTSerial>:
	...
 80a4fe4:	28c1 080a 2929 080a 2905 080a 2245 080a     .(..))...)..E"..
 80a4ff4:	28d5 080a 28f1 080a 28e3 080a 28ff 080a     .(...(...(...(..
 80a5004:	28c3 080a 28c7 080a                         .(...(..

080a500c <_ZTV7TwoWire>:
	...
 80a5014:	2961 080a 29ab 080a 2983 080a 2963 080a     a)...)...)..c)..
 80a5024:	298b 080a 2993 080a 299b 080a 29a3 080a     .)...)...)...)..

080a5034 <_ZTVN5spark9WiFiClassE>:
	...
 80a503c:	2aa7 080a 2a9d 080a 2a93 080a 2a05 080a     .*...*...*...*..
 80a504c:	2a87 080a 2a7b 080a 2b05 080a 2b0d 080a     .*..{*...+...+..
 80a505c:	2a6f 080a 2a67 080a 2a5d 080a 2a53 080a     o*..g*..]*..S*..
 80a506c:	2a0f 080a                                   .*..

080a5070 <_ZTVN5spark12NetworkClassE>:
	...
 80a5078:	2ac5 080a 2acf 080a 2ad9 080a 2ae3 080a     .*...*...*...*..
 80a5088:	2aed 080a 2af9 080a 2b05 080a 2b0d 080a     .*...*...+...+..
 80a5098:	2b15 080a 2b21 080a 2b29 080a 2b33 080a     .+..!+..)+..3+..
 80a50a8:	2b3d 080a                                   =+..

080a50ac <_ZSt7nothrow>:
	...

080a50b8 <TWO52>:
 80a50b8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
 80a50c8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a50d8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a50e8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a50f8:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a5108:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a5118:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a5128:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a5138:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a5148:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a5158:	2e64 0063                                   d.c.

080a515c <link_const_variable_data_end>:
 80a515c:	080a0905 	.word	0x080a0905
 80a5160:	080a1bfd 	.word	0x080a1bfd
 80a5164:	080a2221 	.word	0x080a2221
 80a5168:	080a24cd 	.word	0x080a24cd
 80a516c:	080a24dd 	.word	0x080a24dd
 80a5170:	080a24f9 	.word	0x080a24f9
 80a5174:	080a2ab1 	.word	0x080a2ab1
 80a5178:	080a2b8d 	.word	0x080a2b8d
 80a517c:	080a2d5d 	.word	0x080a2d5d
